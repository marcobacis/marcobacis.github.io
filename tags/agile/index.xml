<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>agile on Marco Bacis</title><link>http://marcobacis.com/tags/agile/</link><description>Recent content in agile on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis 2018-2023</copyright><lastBuildDate>Tue, 17 Jan 2023 18:00:00 +0100</lastBuildDate><atom:link href="http://marcobacis.com/tags/agile/index.xml" rel="self" type="application/rss+xml"/><item><title>My Experience at the Italian Agile Days 2022: Talks and Reflections</title><link>http://marcobacis.com/blog/2022-italian-agile-days/</link><pubDate>Tue, 17 Jan 2023 18:00:00 +0100</pubDate><guid>http://marcobacis.com/blog/2022-italian-agile-days/</guid><description>&lt;p>Hi üëã&lt;/p>
&lt;p>Today‚Äôs post is about my experience at the &lt;a href="https://www.agileday.it/">Italian Agile Days 2022&lt;/a>, which I attended in October 2022. I know, it‚Äôs way too late to write this, but I still think that remembering the talks I watched will be useful for others üòÉ.&lt;/p>
&lt;p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.&lt;/p>
&lt;p>This year, the conference was held on the Brescia University campus. It was my first in-person conference in 3 years, and seeing live talks and talking with people with the same interests was refreshing and inspiring!&lt;/p>
&lt;p>I mostly watched technical talks about programming, but some of the ones you‚Äôll find below drift from pure programming into the realm of philosophy (and psychology), and they were the most interesting.&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;h2 id="talks">Talks&lt;/h2>
&lt;p>&lt;em>Disclaimer: most talks were in Italian. The videos are available &lt;a href="https://vimeo.com/showcase/9957525">online&lt;/a>, here I‚Äôll just post a brief summary and my opinions on the talks.&lt;/em>&lt;/p>
&lt;h3 id="keynote-myth-busting-in-agile-scaling-en---nigel-thurlow">Keynote: Myth busting in agile Scaling (en) - Nigel Thurlow&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/767786361">Video&lt;/a>&lt;/p>
&lt;p>Nigel has been the first ever Chief of Agile at Toyota, and while there he created ‚ÄúThe Flow System‚Äù, a flow-based approach to delivering value built on the Toyota system.&lt;/p>
&lt;p>In his keynote, he debunks myths and tries to solve the ‚Äúformat war‚Äù between agile practices. The talk is packed full of considerations and stories about agile‚Ä¶so full that I cannot summarise it here without writing everything Nigel says. Please go check it out!&lt;/p>
&lt;h3 id="event-sourcing--cqrs-a-light-introduction-en---paolo-banfi">Event Sourcing + CQRS: a light introduction (en) - Paolo Banfi&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/768885882">Video&lt;/a>&lt;/p>
&lt;p>In this talk, the speaker introduces two important concepts that allow to easily change and add functionalities to our systems: event sourcing and CQRS.&lt;/p>
&lt;p>To explain them, he presents an example based on a shopping cart, showing that by just saving the current state of the system (as we usually do with databases) we lose information that could be useful to the business. By using event sourcing and CQRS strategies, we employ a more generic model that allows using these pieces of information without making the system much more complex than before.&lt;/p>
&lt;p>Paolo does a great introduction to both arguments. Even if I never used event sourcing and CQRS before, I now feel like I should use them in all my future projects!&lt;/p>
&lt;h3 id="diamo-una-chance-a-una-codebase-legacy-it---nicola-mincuzzi">Diamo una chance a una codebase legacy? (it) - Nicola Mincuzzi&lt;/h3>
&lt;p>‚ÄúLet‚Äôs give a legacy codebase a chance‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768879474">Video&lt;/a>&lt;/p>
&lt;p>Working with legacy codebases is a dread. Legacy systems are unstable, and every change to their code or structure leads to bugs and unknown issues, given their lack of tests.&lt;/p>
&lt;p>In his talk, Nicola shows a project on which he worked, and describes how he ‚Äúattacked‚Äù the legacy monster by using harnesses and a lot of testing. He basically followed the advice in Michael Feather‚Äôs ‚ÄúWorking Effectively With Legacy Code&amp;quot; which was effective for real!&lt;/p>
&lt;p>Given that this was his first talk, it was great. I‚Äôm also working on a nasty legacy project, and seeing other people&amp;rsquo;s (successful) experiences is inspiring and comforting at the same time.&lt;/p>
&lt;h3 id="ive-done-tdd-wrong-all-the-time-it---luca-giuberti">I‚Äôve done TDD wrong all the time (it) - Luca Giuberti&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/768875860">Video&lt;/a>&lt;/p>
&lt;p>In this talk, Luca expresses a common concern that we all think about while writing tests - Am I testing too much the implementation? Do the tests reflect the &lt;strong>what&lt;/strong> (the business need), or do they represent the &lt;strong>how&lt;/strong> (implementation)?&lt;/p>
&lt;p>Luca shows a more sustainable way to test, in a &lt;strong>coarse-grained&lt;/strong> fashion. I find this more in line with how I usually test, by testing the behaviour of multiple/larger modules and not of the single classes and methods (with a lot of mocking).&lt;/p>
&lt;p>The definition of ‚Äúunit‚Äù is quite confusing. Some of us end up testing single classes or methods in isolation, by mocking every external dependency. Luca‚Äôs talk advocates for a coarser grain, like testing multiple (cohesive) classes for their external behaviour. It might seem like integration testing, but it‚Äôs not, and I think is a more sound approach.&lt;/p>
&lt;h3 id="larte-dello-sviluppatore-it---marco-fracassi">L‚Äôarte dello sviluppatore (it) - Marco Fracassi&lt;/h3>
&lt;p>‚ÄúThe software developer art‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768873513">Video&lt;/a>&lt;/p>
&lt;p>In this philosophical (and humorous) talk, Marco talks about the role of creativity (and how to get creative) in software development.&lt;/p>
&lt;p>Software developers are a creative species, despite the stereotypes that others associate with the role (and we get a huge list in the talk). Practices such as pair programming, TDD and DDD are indeed quite creative and, at the time of their definition, were revolutionary.&lt;/p>
&lt;p>Software development is a social activity in addition to technical practices, and in this regard, creativity can help us solve problems better. Marco presents a lot of ways to increase creativity personally and in the workplace (by increasing psychological safety) and what tends to stop it (ignorance, hyper-specialization, fear, vanity etc..).&lt;/p>
&lt;p>In the end, the talk was very inspiring and showed that there‚Äôs a lot of ‚Äúart‚Äù in our practice as software developers.&lt;/p>
&lt;h3 id="dal-carbone-al-software-i-sistemi-socio-tecnici-it---ferdinando-santacroce">Dal carbone al software: i sistemi socio-tecnici (it) - Ferdinando Santacroce&lt;/h3>
&lt;p>‚ÄúFrom coal to software: socio-technical systems‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768881541">Video&lt;/a>&lt;/p>
&lt;p>Agile is not just for programmers, and Ferdinando shows us why in his talk. He tells a story set in post-war England, when a technological innovation (the ‚Äúlongwall‚Äù) was introduced but didn‚Äôt improve productivity, all because of social issues.&lt;/p>
&lt;p>The researchers found out that this innovation disrupted (in a bad way) the current social organisation of the mines. From autonomous, cross-functional and trusted teams, the longwall brought hyper-specialisation, control and loss of autonomy and ownership, leading to lower productivity.&lt;/p>
&lt;p>This story serves as a reminder that all techniques and practices we see today in agile (such as lean, kanban, XP etc..) didn‚Äôt start with programming, but are way older. In addition, we cannot only think about the technical aspects of the organisation, because the social ones are way more important!&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I really enjoyed attending this conference!&lt;/p>
&lt;p>Each talk explored an argument which I didn‚Äôt know and wanted to know more about. I also got to meet new people in a community near me (Brescia is right next to Bergamo and Milan) and I also got gadgets ü§©. In addition, I bought two books from Avanscoperta: ‚ÄúCronache di Domain-Driven Design‚Äù (DDD Chronicles) and ‚ÄúDecision-Making for Software Development Teams‚Äù. I hope to read them soon!&lt;/p>
&lt;p>That‚Äôs all for today. I hope you enjoyed this short summary of my experience at IAD2022, and I hope to attend and write about next year‚Äôs conference (and some workshops? üòá).&lt;/p></description></item><item><title>XPUGBg December meetup: ‚ÄúMars Rover Kata, an outside-in approach‚Äù</title><link>http://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</link><pubDate>Wed, 28 Dec 2022 08:00:00 +0100</pubDate><guid>http://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</guid><description>&lt;p>Hi! üëã&lt;/p>
&lt;p>Today I will write about a meetup I attended this December, hosted by XPUGBg (Extreme Programming User Group Bergamo). The &lt;a href="https://www.meetup.com/it-IT/xpugbg/">XPUGBg&lt;/a> is an association promoting and organizing events related to extreme programming in the Bergamo region.&lt;/p>
&lt;p>In this meetup, the guests (Marco Consolaro and Alessandro Di Gioia from &lt;a href="https://alcor.academy/">Alcor Academy&lt;/a>) performed a live mob programming session with the audience, to solve the &lt;a href="https://github.com/makomweb/mars-rover">mars rover kata&lt;/a>. We learned how to do mob programming, and how the Outside-In TDD approach works.&lt;/p>
&lt;h2 id="what-is-extreme-programming">What is Extreme Programming?&lt;/h2>
&lt;p>Extreme programming (XP) is a set of values, principles and practices introduced by Kent Beck at the end of the 1990s. Its goals are to improve the software quality and the team&amp;rsquo;s responsiveness to requirements changing during development. I might write my opinions on this methodology in a new blog post, but for now, I‚Äôll redirect you to the &lt;a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658">book&lt;/a>, which definitely explains it better than I do üòâ.&lt;/p>
&lt;p>I discovered extreme programming later this year while attending the XPUG meetups. I also read Kent Beck‚Äôs book and I‚Äôm actively trying to introduce some practices (like TDD and pair programming) into my current team, but I‚Äôm still far from a full XP practitioner. Still, the argument is really interesting.&lt;/p>
&lt;p>How does it apply to this meetup? We followed a practice called &lt;strong>mob programming&lt;/strong>, in which there are:&lt;/p>
&lt;ul>
&lt;li>a &lt;strong>driver&lt;/strong> (Alessandro), the developer actually writing code on the editor&lt;/li>
&lt;li>the &lt;strong>navigator&lt;/strong>, which instructs the driver on what to write (and sometimes also how)&lt;/li>
&lt;li>the &lt;strong>mob&lt;/strong>, other members of the team which can discuss with the navigator to improve the code, find possible issues and so on&lt;/li>
&lt;/ul>
&lt;p>during the meetup, Marco and Alessandro proposed an extended approach (called &lt;strong>fish bowl&lt;/strong>), in which the mob is composed of 5 members of the audience, which rotate after some time. So, in addition to the standard mob, we have:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>facilitator&lt;/strong> (Marco) guiding the mob and the navigator and deciding when to rotate roles and members&lt;/li>
&lt;li>the &lt;strong>audience&lt;/strong>, watching it all. Anyone can then enter the fish bowl when he thinks he can give something to the discussion&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-a-kata">What is a Kata?&lt;/h2>
&lt;p>‚ÄúKata‚Äù is a term borrowed from martial arts. It is ‚Äúa detailed¬†choreographed
¬†pattern of movements made to be practised alone. It can also be reviewed within groups and in unison when training‚Äù (&lt;a href="https://en.wikipedia.org/wiki/Kata">Wikipedia&lt;/a>).
Developers have taken this term and applied it to their set of movements, which are coding, testing and designing. A kata is a short problem/exercise meant to be practised a lot of times. The same kata can be practised with different languages, approaches and methodologies, giving each time a new perspective.&lt;/p>
&lt;p>In our case, in this meetup, we practised the mars rover kata, and the twists were to practice it with &lt;strong>mob programming&lt;/strong> and &lt;strong>outside-in TDD&lt;/strong>. Double trouble!&lt;/p>
&lt;p>In the mars rover kata, you have to implement a rover moving on the surface of mars. You are given the initial coordinates of the rover (x, y) and the initial orientation (N, S, E, W). Then, you are given the commands:&lt;/p>
&lt;ul>
&lt;li>L ‚Üí rotate left by 90¬∞&lt;/li>
&lt;li>R ‚Üí rotate right by 90¬∞&lt;/li>
&lt;li>M ‚Üí move forward one grid point, maintaining the same position&lt;/li>
&lt;/ul>
&lt;p>Your program should output the position of the rover after applying the commands (X, Y coordinates and direction).&lt;/p>
&lt;p>During the meetup (because of lack of time and a lot of discussions) we were able to implement only the simplest version, with the rotate left and move forward commands, and without the I/O translation code (from a text file to actual commands and positions). This doesn&amp;rsquo;t mean that the kata was a failure. On the contrary, it was very useful to see different opinions and approaches to the problem at hand.&lt;/p>
&lt;h2 id="outside-in-approach">Outside-In approach&lt;/h2>
&lt;p>&lt;strong>Outside-in&lt;/strong> is an approach to develop software in tandem with TDD. It works by starting from the outer layer (‚Äùoutside‚Äù) and, guided by tests, creating the underlying layers (‚Äùin‚Äù) of the software.&lt;/p>
&lt;p>In practice, the mob started (guided by marco) with the acceptance tests, the outermost layer of testing. These tests should be in a language understandable by the business, as they indicate whether the problem is solved from the business perspective. The first consideration is that the acceptance tests used the actual input and output strings to test the behaviour of the system (see &lt;a href="https://github.com/makomweb/mars-rover">here&lt;/a> for the example). This meant that the code needed a sort of ‚Äútranslator‚Äù to translate the inputs to domain objects, and the domain objects to outputs.&lt;/p>
&lt;p>The outside-in approach turned out to be difficult to assimilate because it turned my perception of the design upside-down. Starting from the acceptance tests, it was difficult to turn the tests green, and we had to dive deeper and create a lot of code (first the rover controller, then the rover, then the position with coordinates and direction, and so on) before passing our first test.&lt;/p>
&lt;p>In addition, we had to use mocks immediately to avoid writing the translator. Marco presented this to us as a challenge: most of the business value and complexity actually resides in the rover code, not the I/O, so it was a good way to concentrate on the core features of the kata.&lt;/p>
&lt;p>In the end, we were able to turn our first test green, and it was already time to head to the pub, so‚Ä¶ the rest was left as an exercise for the viewers üòá.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The meetup was really interesting, and it helped me learn new concepts. Even if I didn‚Äôt participate in the mob but just watched, I exercised my ‚Äúdesign muscles‚Äù during the session and my brain was always comparing alternatives and thinking about the code.&lt;/p>
&lt;p>Marco and Alessandro are great teachers: Marco was a great facilitator and guided the mob to the right solution, while Alessandro was a thoughtful driver with opinions, also helping the mob to cooperate.&lt;/p>
&lt;p>The outside-in approach was new for most of the audience, and even experienced developers discussed how to design the solution and how to proceed. They created a lot of classes seemingly ‚Äúdoing nothing‚Äù at the moment, but later it all made sense. This is quite different from standard TDD, in which you just write the code needed to pass the tests and then refactor. Outside-In helps to reduce the refactoring stage, which always leads to rewriting big chunks of the code.&lt;/p>
&lt;p>Finally, I never tried practising a kata. I think it is a really useful technique to learn new concepts with a known problem, and I‚Äôll use it more in the future.&lt;/p>
&lt;p>That&amp;rsquo;s all for now üéâ. Thank you for reading and see you next time!.&lt;/p></description></item></channel></rss>