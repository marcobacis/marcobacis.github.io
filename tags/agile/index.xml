<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Agile on Marco Bacis</title><link>https://marcobacis.com/tags/agile/</link><description>Recent content in Agile on Marco Bacis</description><language>en-uk</language><copyright>© Copyright Marco Bacis</copyright><lastBuildDate>Tue, 16 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://marcobacis.com/tags/agile/index.xml" rel="self" type="application/rss+xml"/><item><title>My Experience at the Italian Agile Days 2023</title><link>https://marcobacis.com/blog/2023-italian-agile-days/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://marcobacis.com/blog/2023-italian-agile-days/</guid><description>&lt;p>Hi 👋 and welcome to a new post!&lt;/p>
&lt;p>Today I’m writing a summary of my experience at the Italian Agile Days 2023.&lt;/p>
&lt;p>I already wrote about the 2022 edition &lt;a href="https://marcobacis.com/blog/2022-italian-agile-days/" target="_blank" >here&lt;/a> and, just like last time, I’m writing this summary 2 months after the event…but let’s not worry about this short delay.&lt;/p>
&lt;p>This year, the event was organised at the Politecnico di Milano campus. I graduated there about 4 years ago, so it was a great occasion to return there! I got to see how the campus changed, and I met some old friends (at &lt;a href="https://necst.it/" target="_blank" >NECSTLab&lt;/a>) who stayed for their PhD.&lt;/p></description><media:content url="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu_76980dfe7f6cfc76.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu_76980dfe7f6cfc76.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu_76980dfe7f6cfc76.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi 👋 and welcome to a new post!</p>
<p>Today I’m writing a summary of my experience at the Italian Agile Days 2023.</p>
<p>I already wrote about the 2022 edition <a href="https://marcobacis.com/blog/2022-italian-agile-days/"  target="_blank" >here</a> and, just like last time, I’m writing this summary 2 months after the event…but let’s not worry about this short delay.</p>
<p>This year, the event was organised at the Politecnico di Milano campus. I graduated there about 4 years ago, so it was a great occasion to return there! I got to see how the campus changed, and I met some old friends (at <a href="https://necst.it/"  target="_blank" >NECSTLab</a>) who stayed for their PhD.</p>
<p>Let’s start 💪</p>
<h2 id="first-day---unconference">First Day - Unconference</h2>
<p>The first day was dedicated to the unconference. An unconference (also called open space) is an event in which the agenda and the sessions are decided by the participants at the beginning of the day.</p>
<p>This was the second unconference I ever attended (after SoCraTes, which I described <a href="https://marcobacis.com/blog/socrates-2023/"  target="_blank" >here</a>), and I must admit that I’m starting to get addicted! They are a great way to get inspired and they cover a lot of themes and topics (less $$$ spent attending distinct conferences 😜).</p>
<p><div class="image imgB-dde4a2e377d3daafec7ee6e25a7a6c19-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_2de028c2c8c92df7.webp 320w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_993a9470557d0e34.webp 640w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_11ab88ff63d69981.webp 960w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_a68a065d26e10c91.webp 1280w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_89da0c1850b7297b.webp 1600w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_56088193dd512b74.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_1e0da958524209af.jpg 320w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_f645396485db2a37.jpg 640w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_7c908699d480a74e.jpg 960w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_1b28d0fd73156f0.jpg 1280w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_ed78f5b509ae3be2.jpg 1600w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_6d1276034813c42a.jpg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/2023-italian-agile-days/iad_unconference_marketplace_hu_f645396485db2a37.jpg" width="2208"
        height="1242" alt="" title="" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Friday’s unconference agenda</figcaption>

</figure></p>
<p>Here is a summary of the sessions I was able to attend.</p>
<p><em>A little disclaimer: I didn’t take many notes (and I’m writing these summaries after 2 months 😅), so even remembering the title is enough… you’ll notice during which session I took notes and which I did not 😂.</em></p>
<p><em>In addition, I skipped some sessions and just went along with some other groups during the day. That’s the best part of unconferences: conversations just happen, and there are no limits to the discussions outside of the event itself!!</em></p>
<h3 id="unicorns---evolving-systems-where-to-find-them---alberto-acerbishttpswwwlinkedincominaacerbis">Unicorns - Evolving Systems, where to find them? - <a href="https://www.linkedin.com/in/aacerbis/"  target="_blank" >Alberto Acerbis</a></h3>
<p>In his session, Alberto gave an overview of how we can tackle the complexity of software design using Evolutionary Architectures.</p>
<p>When designing a system, we try to find a model that “fits” the problem we are trying to solve. However, the real world is complex (and sometimes chaotic), while software developers try to fit it into a clean, deterministic and simple model.</p>
<p>The guiding principle of Evolutionary Architecture is to perform guided, incremental, non-breaking changes across multiple dimensions (e.g. application and operations). Alberto then gave some links and concepts related to evolutionary architectures, such as:</p>
<ul>
<li>Modularity (low coupling and high cohesion)</li>
<li>Using fitness functions to guide the evolution of the architecture</li>
<li>The tradeoff between DRY and WET software (is it always better to reduce duplication?)</li>
<li>Using different tools for different problems (no silver bullet)</li>
<li>Least Responsible Moment (delaying decisions when you have enough information)</li>
<li>“Laws” such as <em>Postel’s</em> and <em>Conway’s</em></li>
</ul>
<p>After his session, I had a lot to process (I just highlighted some of the arguments he explained), and it was a great overview of software architecture principles!</p>
<h3 id="how-to-stop-writing-unit-tests-and-be-happy---franco-lombardohttpswwwlinkedincominfrancolombardo">How to stop writing unit tests and be happy - <a href="https://www.linkedin.com/in/francolombardo/"  target="_blank" >Franco Lombardo</a></h3>
<p>Franco gave a session on how ATDD (Acceptance Test-Driven Development) can help make us happier by writing easier tests.</p>
<p>ATDD is a flavour of TDD in which we develop a feature by starting with acceptance tests instead of standard unit tests. <em><strong>Acceptance tests</strong></em> are tests written from the perspective of the user and with the language used by the user/business. They are useful because when the test is green, then the user/business (and us) is happy and the functionality is implemented as specified (at least that’s how it should be).</p>
<p>In his session, Franco showed us that doing ATDD is easier than ever. He argued that testing with the real storage (db engine) is easy if the system is designed simply (e.g. without triggers, stored procedures or other complex stuff) and that persistence is not an “implementation detail” after all.</p>
<p>ATDD is not for everyone and every project, and he showed us the cases in which it shouldn’t be used (e.g., inexperienced developers, greenfield projects, UI-heavy applications, or projects too small or too big). In general, ATDD is a tool we can leverage in addition to the others.</p>
<p>I usually develop my tests using a similar approach (from the API controller to the DB, either in memory or in a small container) and find it useful, so Franco’s session confirmed my approach 👍 (even if there were a lot of discussions afterwards).</p>
<h3 id="legacy-code-theory-and-practice---andrea-franciahttpswwwlinkedincominandreafrancia">Legacy Code, theory and practice - <a href="https://www.linkedin.com/in/andreafrancia/"  target="_blank" >Andrea Francia</a></h3>
<p>Andrea gave a lecture (a real one, with a blackboard and in a university campus!) on how to work with legacy code. In the end, he gave a very straightforward summary of the “Working Effectively with Legacy Code” book!</p>
<p>First, he started with some definitions of legacy code, such as:</p>
<ul>
<li>Code without tests, or badly written tests (e.g. fragile, driven by the underlying implementation)</li>
<li>Code we are afraid to touch and modify</li>
</ul>
<p>After defining the enemy, Andrea showed us how to fight it. The way to do it is, of course, to add tests. But how do you add tests when the code doesn’t help (cannot refactor without test, cannot test without refactor)? We can use some techniques such as <strong>characterisation tests</strong>.</p>
<p>Basically, to test a legacy system we treat the system as a black bock driven by its I/Os (disk, DBs, network, external APIs etc..), and drive the I/O with tests to cover the piece of code we need to modify for the feature we have to develop. After covering the legacy code with enough tests, we can finally refactor it and start to develop the new feature.</p>
<p>Andrea told us about some cases that happened to him, such as testing using the log outputs to check that the system was behaving correctly. He also debunked the myth that we cannot use the debugger while doing TDD…with legacy code, everything is possible (and accepted).</p>
<p>Of the entire session I still remember a phase Andrea said: “Tests are like bets”. I think this sums up pretty well how I feel about tests and TDD in general. Every time I write a test, I’m betting that the system will behave in a certain way, and then correct my assumption (when doing characterisation tests) or the underlying implementation (during normal TDD) based on the test output.</p>
<h3 id="tdd-training-for-devs-working-full-time---matteo-vaccarihttpswwwlinkedincominmatteovaccari">TDD Training for devs working full time - <a href="https://www.linkedin.com/in/matteovaccari/"  target="_blank" >Matteo Vaccari</a></h3>
<p>Matteo is a Technical Principal at ToughtWorks, and in his session, he presented a problem he currently has: how do I train developers in how to use TDD, if they are already working full-time on different projects? I must admit I arrived late at this session, but just by watching the drawings there were a lot of ideas 😜</p>
<h3 id="pair-programming-discussion---angelo-ceccatohttpswwwlinkedincominangeloceccato">Pair Programming discussion - <a href="https://www.linkedin.com/in/angeloceccato/"  target="_blank" >Angelo Ceccato</a></h3>
<p>Angelo proposed an open discussion about pair programming. In a small group, we discussed what pair programming means for us, if and how we are using it at work and what are the advantages, disadvantages and common issues with it. I don’t pair often (and never in the “canonical” way at least), and hearing the stories of other developers was interesting, from people who do it every day and for more than half of their workday, to others who are sceptic about some of its implementation, and to others (like me) who never did it apart from emergencies and workshops.</p>
<h2 id="second-day---conference">Second Day - Conference</h2>
<p>The second day was a standard conference, held in a single Polimi building (n. 3 to be precise).</p>
<p>After arriving at the main campus and finding the entrance (on Saturday all secondary entrances are closed it seems 🤔), it was time to grab the goodies bag, buy the conference T-shirt and finally attend the main event!</p>
<p>Here is the usual (incomplete) list of talks I watched (and some notes when I took them).</p>
<h3 id="e-non-ci-indurre-in-tentazione-ma-liberaci-dal-bug---marco-fracassihttpswwwlinkedincominmarco-fracassi">E non ci indurre in tentazione, ma liberaci dal bug - <a href="https://www.linkedin.com/in/marco-fracassi/"  target="_blank" >Marco Fracassi</a></h3>
<p>In his talk, Marco explained how emergent design can help keep a codebase clean, maintainable and close to the domain of the business.</p>
<p>He started with a definition of emergent design and its advantages (e.g. non-speculative, working in small steps, refactoring and simple design), then he went on showing how legacy code has little to none of that!!</p>
<p>Most legacy code contains recurrent (anti)patterns that push it far away from the domain:</p>
<ul>
<li>Layered architecture (code divided by layer instead of features)</li>
<li>Anaemic objects</li>
<li>Big Services doing everything</li>
<li>Dependency Injection with a lot of scattered containers (10+ parameters constructors anyone?)</li>
<li>Behaviour separate from the data (which is caused by all the above)</li>
</ul>
<p>In the long run, these issues affect most legacy systems and lead to unmaintainable code. To make it worse, the problem is not caused by the framework or language (and we love so much to blame the language!).</p>
<p>To solve these issues, Marco proposed some solutions, such as:</p>
<ul>
<li>Introducing repositories to separate domain and persistence</li>
<li>Extracting (domain-based) use cases from big services, to separate responsibilities and make a set of smaller, cleaner functionalities</li>
<li>Bringing data and behaviour closed by using domain objects (again, bringing code away from big services)</li>
<li>Splitting read and write procedures (usually removing useless use cases, most of all in the read part)</li>
<li>Writing tests and add coverage (remembering that coverage itself is not fundamental, but tests can act as a “parachute”)</li>
<li>“contamination”, through pair/mob programming and shared learning</li>
</ul>
<p>The main takeaway from his talk is that the design can emerge if we work in small steps, keeping the domain as central in the application and bringing data and behaviour close together (as in DDD).</p>
<p>Marco just started his YouTube channel <a href="https://www.youtube.com/@ImprovingCode"  target="_blank" >ImprovingCode</a> (in Italian) in which he talks about these (and other) topic, check it out!!</p>
<h3 id="bdd-molto-più-che-testing---fabio-cocchihttpswwwlinkedincominfabiococchi">BDD: Molto più che testing - <a href="https://www.linkedin.com/in/fabiococchi/"  target="_blank" >Fabio Cocchi</a></h3>
<p>Gathering requirements for a feature or a product is always difficult. We can write all the specifications we want, but then, as developers, we are left alone to implement them.</p>
<p>BDD (Behavior-Driven Development) is an agile methodology that enables customers and developers to collaborate on the requirements process. It involves writing a verifiable specification that can be used as acceptance criteria.</p>
<p>Fabio introduced us to this world and its main principles and ingredients. In particular, he described the process of using <strong>behaviours</strong> to model the system requirements and how it helps in delivering value to the business more quickly and with fewer iterations. By writing acceptance criteria using a shared language, developers and customers can communicate effectively and understand the domain together, resulting in higher quality and faster delivery.</p>
<h3 id="tdd-e-il-mito-del-100-code-coverage---gianni-bombellihttpswwwlinkedincomingianni-bombelli-manuela-munarettohttpswwwlinkedincominmanuelamunaretto">TDD e il mito del 100% code coverage - <a href="https://www.linkedin.com/in/gianni-bombelli/"  target="_blank" >Gianni Bombelli</a>, <a href="https://www.linkedin.com/in/manuelamunaretto/"  target="_blank" >Manuela Munaretto</a></h3>
<p>Gianni and Manuela staged a great theatrical show, in which two developers discuss a bug they found in their team codebase.</p>
<p>The twist is that the buggy code has 100% test coverage! How is it possible?</p>
<p>During their session, Gianni and Manuela showed that code coverage isn’t the best metric to follow when writing tests, and that it’s more important to write proper tests (asserting the behaviour of the system, and not only blinding covering lines…).
I didn’t take any notes because I couldn’t stop laughing during the session 😂 it was great, and in the end, they were able to find and fix the bug (and then they lived happily ever after).</p>
<h3 id="just-commit-to-master-please---how-to-actually-implement-ci---daniele-scilliahttpswwwlinkedincomindaniele-scillia">Just Commit to master, please - How to actually implement CI - <a href="https://www.linkedin.com/in/daniele-scillia/"  target="_blank" >Daniele Scillia</a></h3>
<p>Daniele showed <em><strong>why</strong></em> and <em><strong>how</strong></em> to implement Continuous Integration the right way, using Trunk-Based Development. I like how he compared the usual pull-request model with trunk-based development and why they have different use cases (open source software the first, usual product development the latter).</p>
<p>I didn’t take notes, so I’ll just give you a link to Daniele’s <a href="https://danthedev.carrd.co/"  target="_blank" >website</a>.</p>
<p>I also highly recommend his newsletter, <a href="https://learnagilepractices.substack.com/"  target="_blank" >Learn Agile Practices</a>, in which he explains agile practices (technical and not),  each week. I’ve been following him since the beginning of 2023, and every new post was great 👍.</p>
<h3 id="building-a-culture-of-sw-craftsmanship---michele-brissonihttpswwwlinkedincominmichelebrissoni">Building a culture of SW Craftsmanship - <a href="https://www.linkedin.com/in/michelebrissoni/"  target="_blank" >Michele Brissoni</a></h3>
<p>In his talk, Michele presented the <a href="https://swcraftsmanshipdojo.com/"  target="_blank" >SW Craftmanship Dojo</a>, a platform in which he teaches the principles and techniques of software craftmanship with a holistic approach.</p>
<p>The dojo trains students by using techniques taken from the world of martial arts (of which Michele himself is a very expert practitioner). Students learn eXtreme Programming concepts (all the *DDs out there), DevOps and Infrastructure/SRE stuff and also product-related topics, making theme all-around professional software craftsmen.</p>
<p>His talk was really interesting and showed that I still have A LOT to learn in order to be a real  professional 😅</p>
<h3 id="in-between-talks">In between talks…</h3>
<p>While taking a break, I decided to not follow any talk and just roam around the conference.</p>
<p>While wandering around my old university halls, I stumbled upon some people from <a href="https://qmates.tech/"  target="_blank" >QMates</a> (<a href="https://www.linkedin.com/company/qmates/"  target="_blank" >linkedin</a>) who just took an empty lecture room as hostage and started doing the <a href="https://github.com/sandromancuso/Bank-kata"  target="_blank" >bank kata</a> on the small desks used by students.</p>
<p>It was a great moment, as I watched a mob discussing the proper way to develop and test REST endpoints for a fake bank account service in a university room… it couldn’t get better 😁</p>
<p>These are exactly the reasons why I prefer in-presence conferences to their online version…</p>
<h3 id="come-funziona-il-cevello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemi---pietro-roversihttpswwwlinkedincominpietro-roversi-61070527-slideshttpswwwslidesharenetpietroroversi3come-funziona-il-cervello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemipdf">Come funziona il cevello di un programmatore quando impara e affronta nuovi problemi? - <a href="https://www.linkedin.com/in/pietro-roversi-61070527/"  target="_blank" >Pietro Roversi</a> (<a href="https://www.slideshare.net/PietroRoversi3/come-funziona-il-cervello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemipdf"  target="_blank" >slides</a>)</h3>
<p>How does our brain work, and how can we exploit it to work with code better?</p>
<p>Pietro introduced us to the magical world of our brain. He talked about memory, cognitive load, knowledge and flow, and how everything impacts our work as developers.</p>
<p>For example, short-term and working memory are essential to keep a flow state, and we can improve our flow by learning the syntax and some of the documentation of our languages and frameworks (which we never do 😂). This also allows to reduce interruptions (google searches which become a rabbit-hole of surfing the web in various ways) .</p>
<p>Another interesting fact is that working memory is involved in a process called chunking (dividing and storing information in chunks), and with more experience comes better chunking… so, reading more code (and having more experience) allows senior developers to remember it better than the juniors 🤯.</p>
<p>Pietro’s talk was full of these insights, and I enjoyed the explanation behind how our brain works!</p>
<h3 id="navigando-nel-mondo-del-software-tra-modelli-e-realtà---ferdinando-santacrocehttpswwwlinkedincominferdinandosantacroce-marco-massarottohttpswwwlinkedincominmassama">Navigando nel mondo del software, tra modelli e realtà - <a href="https://www.linkedin.com/in/ferdinandosantacroce/"  target="_blank" >Ferdinando Santacroce</a>, <a href="https://www.linkedin.com/in/massama/"  target="_blank" >Marco Massarotto</a></h3>
<p>The last talk I attended was given by Marco and Ferdinando. Together, they explored the difference between models and the reality of software development.</p>
<p>In their talk they linked various arguments and topics (from User Stories to technical debt and the definition of Ubiquitous Language in DDD) to highlight that we operate in a world of approximations.</p>
<p>I enjoyed this session (as I did with Ferdinando’s session <a href="https://vimeo.com/768881541"  target="_blank" >last year</a>) because it reached full circle with the first session I attended the day before (given by Alberto Acerbis, see above) in showing the importance of modelling and facing approximations in our job as developers.</p>
<h2 id="conclusions">Conclusions</h2>
<p>The conference was great!</p>
<p>Last year was my first time and I had some trouble meeting people and just enjoying the event.</p>
<p>This time, after participating in the community a bit more, I was able to attend the conference with a different mindset and just enjoy it.</p>
<p>The fact that the conference was held on the Politecnico campus was the cherry on top: I was finally able to visit the campus again after 4 years and sink into the memories (both good…and bad 😅) of my university years.</p>
<p>I can’t wait to see what next year brings in terms of events, and to keep learning!</p>
<p>See you next time!</p>

        ]]></content:encoded></item><item><title>Working Software Conference 2023</title><link>https://marcobacis.com/blog/working-software-2023/</link><pubDate>Sun, 02 Jul 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/working-software-2023/</guid><description>&lt;p>Hi 👋 and welcome to a new post!&lt;/p>
&lt;p>Last Friday I attended the 2023 &lt;a href="https://www.agilemovement.it/workingsoftware/" target="_blank" >Working Software Conference&lt;/a> in Milan. The Working Software Conference is an event organised by the &lt;a href="https://agilemovement.it" target="_blank" >Italian Agile Movement&lt;/a>, focused on the second principle of the &lt;a href="https://agilemanifesto.org" target="_blank" >agile manifesto&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Working software over comprehensive documentation&lt;/em>&lt;/p>&lt;/blockquote></description><media:content url="https://marcobacis.com/blog/working-software-2023/cover_hu_f30add62b490502f.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/working-software-2023/cover_hu_f30add62b490502f.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/working-software-2023/cover_hu_f30add62b490502f.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi 👋 and welcome to a new post!</p>
<p>Last Friday I attended the 2023 <a href="https://www.agilemovement.it/workingsoftware/"  target="_blank" >Working Software Conference</a> in Milan. The Working Software Conference is an event organised by the <a href="https://agilemovement.it"  target="_blank" >Italian Agile Movement</a>, focused on the second principle of the <a href="https://agilemanifesto.org"  target="_blank" >agile manifesto</a>:</p>
<blockquote>
<p><em>Working software over comprehensive documentation</em></p></blockquote>
<p>The meaning of this principle is that we should focus on delivering value (the working software) to the user instead of writing extensive specification documents (a.k.a. “wasting time”, as all the requirements and documentation will need to be adapted to change in a very short time).</p>
<p>The conference contained a mixture of front sessions and workshops.
In particular, I attended two workshops, one in the morning and one in the afternoon. In this post I present a small summary and comment of the two workshops, with some considerations at the end.</p>
<p>Enjoy!</p>
<h3 id="affoghiamo-i-microservizi-nella-birra---christian-de-simone-and-alberto-acerbis">“Affoghiamo i microservizi nella birra” - Christian De Simone and Alberto Acerbis</h3>
<p><em>“Let’s drown microservices in beer”</em></p>
<p>The first workshop I attended was held by <a href="https://www.linkedin.com/in/aacerbis/"  target="_blank" >Alberto Acerbis</a> and <a href="https://www.linkedin.com/in/desimonechristian/"  target="_blank" >Christian De Simone</a>, and was about how a monolith can deliver value to the customer in a fast way, and without compromising its future extension and scalability.</p>
<p>The first part was a small exercise: we had to design and start implementing a couple of services (purchases and warehouse) for a small brewery. We divided in groups, and in my team we immediately started splitting the two domains in separate micro services communicating with an external broker. We hadn’t even started to implement the system (just coded the first purchases endpoint) that it was time for a discussion with the other teams.</p>
<p>Every team used a different approach: serverless, microservices, monolith and so on…. in the end, Alberto and Christian discussed the different pros and cons of our solutions, and then presented a way to deliver value to the customer without creating unneeded complexity and costs: a <strong>Modular Monolith</strong>.</p>
<p>Alberto showed an example <a href="https://github.com/BrewUp/WorkingSoftware-2023"  target="_blank" >solution</a>, with the two different domains implemented as projects inside the same solution. Every domain was separated from the other (and the separation checked with <a href="https://archunitnet.readthedocs.io/en/latest/"  target="_blank" >ArchUnit</a> tests) and communicated with a common broker implemented with the <a href="https://github.com/jbogard/MediatR"  target="_blank" >MediatR</a> library. This kind of architecture has the pros of both monolith (fast iterations for a small team and small product) and modular and event-based applications, allowing further extensibility in the future, <strong>if</strong> and when the business will grow.</p>
<p>After seeing the implementation of a modular monolith, a question remained: how do we deploy it? And how do we keep costs to a minimum doing it? Different solutions exist:</p>
<ul>
<li>Monolith executable deployed on a VM</li>
<li>Docker container deployed using docker compose or k8s</li>
<li>Serverless solutions such as container-as-a-service or function-as-a-service</li>
</ul>
<p>Christian showed us a possible solution: given that the first implementation of the system is a simple monolith, it’s possible to keep costs low by taking advantage of managed serverless solutions, and using docker allows to still be prepared for future extensions to the system (e.g. in a Kubernetes cluster).</p>
<p>Our task for the second half of the workshop was to “dockerize” the simple endpoint we developer earlier and push it to a GitHub repository. He then showed us a way of deploying docker containers in production, by using a managed service offered by <a href="https://www.scaleway.com/en/serverless-containers/"  target="_blank" >scaleway</a>.</p>
<p>Finally, it was time to show off how we could deploy to Kubernetes, in case our brewery would grow a lot!! Christian set up a small Kubernetes cluster (always on scaleway) in which to deploy our services when they were pushed on a GitHub repository. He also explained a useful tool for deploying on Kubernetes, called <a href="https://helm.sh"  target="_blank" >helm</a>, which allows to define “charts” (parametrised templates of k8s resources and deployments) that can be deployed as a single unit. Helm is useful both for our projects and to deploy external dependencies (he deployed a MongoDb instance with a click).</p>
<p>Alberto and Christian explained the Modular monolith concept in a easily understandable way, and we were able to gain some concepts and understand the pros and cons of it. In addition, the live code explanation and live deploy to Kubernetes were amazing 😃. I also discovered some tools (MediatR, ArchUnit and helm) that I didn’t know yet, and will try for sure in my projects!</p>
<h3 id="faccio-prima-il-refactor-o-i-tests---gianni-bombelli">“Faccio prima il refactor o i tests?” - Gianni Bombelli</h3>
<p><em>“Should I do refactoring or tests first?”</em></p>
<p>In the afternoon, I participated in a workshop held by <a href="https://www.linkedin.com/in/gianni-bombelli/"  target="_blank" >Gianni Bombelli</a> and focused on testing and refactoring a (small) piece of legacy code.</p>
<p>We started the workshop with a great ice breaker: Gianni gave us a roll of toilet paper and asked each participant to draw as much paper as we usually use…. then, for each square of paper, each one had to say something about him/herself. Even before coding, I learned something 😂 to use less paper…</p>
<p>The workshop exercise was to work in pairs, testing and refactoring a small piece of code (you can find it already solved by Gianni in his <a href="https://github.com/bombo82/workshop-ws-2023"  target="_blank" >repository</a>) themed around the “Another brick in the wall” song by Pink Floyd (obviously, Gianni was wearing a “The Wall” t-shirt 😃). I paired with Christian (from the morning workshop, see above) we started to write a small test for the already implemented method we found in the repo, and….. it threw a “NotTestableCallException”!</p>
<p>Some quick notes about the exercise:</p>
<ul>
<li>We couldn’t use external dependencies and libraries</li>
<li>No Mocks</li>
<li>The code worked in production, even if we encountered difficulties in testing it! So, we should have touched it with care</li>
</ul>
<p>The exception we found was a simple example of what we could find in real production code: a static method to get the logged in user (e.g. taken from spring or from .NET authentication modules), which would work when deployed but not on our local setup.</p>
<p>To continue testing this code we should have removed the exception. But how to remove it without changing the production code and without testing it first? How could we test without refactoring first, and refactor without tests?</p>
<p>Gianni solved this dilemma for us: we could leverage some minimal and automated refactoring (available in most IDEs) to “clean” the code enough to write some tests. In our case, this meant extracting the untestable method in a separate method, and extending the class under test to override the extracted method!</p>
<p>Using an overridden method in a class used only for testing is similar to mocks and stubs, but in this case the “trick” (and the smell) was quite visible (in the tested and the test classes) as a remainder for us to clean this code afterwards.</p>
<p>We used this method for most of the workshop, extracting problematic code from the tested method and using this for our purposes. In particular, we focused on:</p>
<ul>
<li>Static/Singleton objects and methods out of our control</li>
<li>System calls (e.g. the use of DateTime.Now for equality)</li>
<li>Possibile side effects given by external dependencies</li>
</ul>
<p>After covering all the code with tests, we were finally able to refactor it easily. We tried by ping-ponging refactoring pieces of code between me and Christian, and finished in no time!</p>
<p>A last issue we encountered was how to refactor a possible side effect given by the use of a DAO (Data Access Object). Gianni helped us by explaining that in these cases, the issue can be solved with an in-memory structure to mimic the underlying object without using the real dependency.</p>
<p>In the end, we finally refactored the code to our liking, and ended up the workshop with a discussion on what we had learned.</p>
<p>So, what comes first, refactoring or testing? Here&rsquo;s the solution: first, apply the minimum set of “safe” refactoring to make the code testable. Then, cover the code with tests. Only after that you can refactor the code “properly”! In most cases it will be an iterative process of refactor → test → refactor.</p>
<p>Gianni was a great instructor. He let us bang our heads against the code, and only after he showed us how to work with it. His explanations were on point and, most of all, he encouraged us to discuss with him and the other pairs. I learned some neat tricks to work with untested (and untestable) code and it was great!</p>
<h2 id="the-end">The End!</h2>
<p>The Working Software Conference was a great event to meet new people and learn new technologies and ways to work as a software developer. I only attended two workshops, but I would have wanted it to go on for way more than a single day! All the instructors were prepared and engaging, and I learned a lot during the day. I hope to attend other events like this in the near future!</p>
<p>That&rsquo;s all for today. Thanks, and see you next time! 👋</p>
        ]]></content:encoded></item><item><title>My Experience at the Italian Agile Days 2022: Talks and Reflections</title><link>https://marcobacis.com/blog/2022-italian-agile-days/</link><pubDate>Tue, 17 Jan 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-italian-agile-days/</guid><description>&lt;p>Hi 👋&lt;/p>
&lt;p>Today’s post is about my experience at the &lt;a href="https://www.agileday.it/" target="_blank" >Italian Agile Days 2022&lt;/a>, which I attended in October 2022. I know, it’s way too late to write this, but I still think that remembering the talks I watched will be useful for others 😃.&lt;/p>
&lt;p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.&lt;/p></description><content:encoded><![CDATA[
          <p>Hi 👋</p>
<p>Today’s post is about my experience at the <a href="https://www.agileday.it/"  target="_blank" >Italian Agile Days 2022</a>, which I attended in October 2022. I know, it’s way too late to write this, but I still think that remembering the talks I watched will be useful for others 😃.</p>
<p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.</p>
<p>This year, the conference was held on the Brescia University campus. It was my first in-person conference in 3 years, and seeing live talks and talking with people with the same interests was refreshing and inspiring!</p>
<p>I mostly watched technical talks about programming, but some of the ones you’ll find below drift from pure programming into the realm of philosophy (and psychology), and they were the most interesting.</p>
<p>Enjoy!</p>
<h2 id="talks">Talks</h2>
<p><em>Disclaimer: most talks were in Italian. The videos are available <a href="https://vimeo.com/showcase/9957525"  target="_blank" >online</a>, here I’ll just post a brief summary and my opinions on the talks.</em></p>
<h3 id="keynote-myth-busting-in-agile-scaling-en---nigel-thurlow">Keynote: Myth busting in agile Scaling (en) - Nigel Thurlow</h3>
<p><a href="https://vimeo.com/767786361"  target="_blank" >Video</a></p>
<p>Nigel has been the first ever Chief of Agile at Toyota, and while there he created “The Flow System”, a flow-based approach to delivering value built on the Toyota system.</p>
<p>In his keynote, he debunks myths and tries to solve the “format war” between agile practices. The talk is packed full of considerations and stories about agile…so full that I cannot summarise it here without writing everything Nigel says. Please go check it out!</p>
<h3 id="event-sourcing--cqrs-a-light-introduction-en---paolo-banfi">Event Sourcing + CQRS: a light introduction (en) - Paolo Banfi</h3>
<p><a href="https://vimeo.com/768885882"  target="_blank" >Video</a></p>
<p>In this talk, the speaker introduces two important concepts that allow to easily change and add functionalities to our systems: event sourcing and CQRS.</p>
<p>To explain them, he presents an example based on a shopping cart, showing that by just saving the current state of the system (as we usually do with databases) we lose information that could be useful to the business. By using event sourcing and CQRS strategies, we employ a more generic model that allows using these pieces of information without making the system much more complex than before.</p>
<p>Paolo does a great introduction to both arguments. Even if I never used event sourcing and CQRS before, I now feel like I should use them in all my future projects!</p>
<h3 id="diamo-una-chance-a-una-codebase-legacy-it---nicola-mincuzzi">Diamo una chance a una codebase legacy? (it) - Nicola Mincuzzi</h3>
<p>“Let’s give a legacy codebase a chance”</p>
<p><a href="https://vimeo.com/768879474"  target="_blank" >Video</a></p>
<p>Working with legacy codebases is a dread. Legacy systems are unstable, and every change to their code or structure leads to bugs and unknown issues, given their lack of tests.</p>
<p>In his talk, Nicola shows a project on which he worked, and describes how he “attacked” the legacy monster by using harnesses and a lot of testing. He basically followed the advice in Michael Feather’s “Working Effectively With Legacy Code&quot; which was effective for real!</p>
<p>Given that this was his first talk, it was great. I’m also working on a nasty legacy project, and seeing other people&rsquo;s (successful) experiences is inspiring and comforting at the same time.</p>
<h3 id="ive-done-tdd-wrong-all-the-time-it---luca-giuberti">I’ve done TDD wrong all the time (it) - Luca Giuberti</h3>
<p><a href="https://vimeo.com/768875860"  target="_blank" >Video</a></p>
<p>In this talk, Luca expresses a common concern that we all think about while writing tests - Am I testing too much the implementation? Do the tests reflect the <strong>what</strong> (the business need), or do they represent the <strong>how</strong> (implementation)?</p>
<p>Luca shows a more sustainable way to test, in a <strong>coarse-grained</strong> fashion. I find this more in line with how I usually test, by testing the behaviour of multiple/larger modules and not of the single classes and methods (with a lot of mocking).</p>
<p>The definition of “unit” is quite confusing. Some of us end up testing single classes or methods in isolation, by mocking every external dependency. Luca’s talk advocates for a coarser grain, like testing multiple (cohesive) classes for their external behaviour. It might seem like integration testing, but it’s not, and I think is a more sound approach.</p>
<h3 id="larte-dello-sviluppatore-it---marco-fracassi">L’arte dello sviluppatore (it) - Marco Fracassi</h3>
<p>“The software developer art”</p>
<p><a href="https://vimeo.com/768873513"  target="_blank" >Video</a></p>
<p>In this philosophical (and humorous) talk, Marco talks about the role of creativity (and how to get creative) in software development.</p>
<p>Software developers are a creative species, despite the stereotypes that others associate with the role (and we get a huge list in the talk). Practices such as pair programming, TDD and DDD are indeed quite creative and, at the time of their definition, were revolutionary.</p>
<p>Software development is a social activity in addition to technical practices, and in this regard, creativity can help us solve problems better. Marco presents a lot of ways to increase creativity personally and in the workplace (by increasing psychological safety) and what tends to stop it (ignorance, hyper-specialization, fear, vanity etc..).</p>
<p>In the end, the talk was very inspiring and showed that there’s a lot of “art” in our practice as software developers.</p>
<h3 id="dal-carbone-al-software-i-sistemi-socio-tecnici-it---ferdinando-santacroce">Dal carbone al software: i sistemi socio-tecnici (it) - Ferdinando Santacroce</h3>
<p>“From coal to software: socio-technical systems”</p>
<p><a href="https://vimeo.com/768881541"  target="_blank" >Video</a></p>
<p>Agile is not just for programmers, and Ferdinando shows us why in his talk. He tells a story set in post-war England, when a technological innovation (the “longwall”) was introduced but didn’t improve productivity, all because of social issues.</p>
<p>The researchers found out that this innovation disrupted (in a bad way) the current social organisation of the mines. From autonomous, cross-functional and trusted teams, the longwall brought hyper-specialisation, control and loss of autonomy and ownership, leading to lower productivity.</p>
<p>This story serves as a reminder that all techniques and practices we see today in agile (such as lean, kanban, XP etc..) didn’t start with programming, but are way older. In addition, we cannot only think about the technical aspects of the organisation, because the social ones are way more important!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed attending this conference!</p>
<p>Each talk explored an argument which I didn’t know and wanted to know more about. I also got to meet new people in a community near me (Brescia is right next to Bergamo and Milan) and I also got gadgets 🤩. In addition, I bought two books from Avanscoperta: “Cronache di Domain-Driven Design” (DDD Chronicles) and “Decision-Making for Software Development Teams”. I hope to read them soon!</p>
<p>That’s all for today. I hope you enjoyed this short summary of my experience at IAD2022, and I hope to attend and write about next year’s conference (and some workshops? 😇).</p>

        ]]></content:encoded></item><item><title>XPUGBg December meetup: “Mars Rover Kata, an outside-in approach”</title><link>https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</link><pubDate>Wed, 28 Dec 2022 08:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</guid><description>&lt;p>Hi! 👋&lt;/p>
&lt;p>Today I will write about a meetup I attended this December, hosted by XPUGBg (Extreme Programming User Group Bergamo). The &lt;a href="https://www.meetup.com/it-IT/xpugbg/" target="_blank" >XPUGBg&lt;/a> is an association promoting and organizing events related to extreme programming in the Bergamo region.&lt;/p>
&lt;p>In this meetup, the guests (Marco Consolaro and Alessandro Di Gioia from &lt;a href="https://alcor.academy/" target="_blank" >Alcor Academy&lt;/a>) performed a live mob programming session with the audience, to solve the &lt;a href="https://github.com/makomweb/mars-rover" target="_blank" >mars rover kata&lt;/a>. We learned how to do mob programming, and how the Outside-In TDD approach works.&lt;/p></description><media:content url="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/cover_hu_d17bd992ac29dbb5.jpg" width="480" height="320" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/cover_hu_d17bd992ac29dbb5.jpg" width="480" height="320"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/cover_hu_d17bd992ac29dbb5.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi! 👋</p>
<p>Today I will write about a meetup I attended this December, hosted by XPUGBg (Extreme Programming User Group Bergamo). The <a href="https://www.meetup.com/it-IT/xpugbg/"  target="_blank" >XPUGBg</a> is an association promoting and organizing events related to extreme programming in the Bergamo region.</p>
<p>In this meetup, the guests (Marco Consolaro and Alessandro Di Gioia from <a href="https://alcor.academy/"  target="_blank" >Alcor Academy</a>) performed a live mob programming session with the audience, to solve the <a href="https://github.com/makomweb/mars-rover"  target="_blank" >mars rover kata</a>. We learned how to do mob programming, and how the Outside-In TDD approach works.</p>
<h2 id="what-is-extreme-programming">What is Extreme Programming?</h2>
<p>Extreme programming (XP) is a set of values, principles and practices introduced by Kent Beck at the end of the 1990s. Its goals are to improve the software quality and the team&rsquo;s responsiveness to requirements changing during development. I might write my opinions on this methodology in a new blog post, but for now, I’ll redirect you to the <a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658"  target="_blank" >book</a>, which definitely explains it better than I do 😉.</p>
<p>I discovered extreme programming later this year while attending the XPUG meetups. I also read Kent Beck’s book and I’m actively trying to introduce some practices (like TDD and pair programming) into my current team, but I’m still far from a full XP practitioner. Still, the argument is really interesting.</p>
<p>How does it apply to this meetup? We followed a practice called <strong>mob programming</strong>, in which there are:</p>
<ul>
<li>a <strong>driver</strong> (Alessandro), the developer actually writing code on the editor</li>
<li>the <strong>navigator</strong>, which instructs the driver on what to write (and sometimes also how)</li>
<li>the <strong>mob</strong>, other members of the team which can discuss with the navigator to improve the code, find possible issues and so on</li>
</ul>
<p>during the meetup, Marco and Alessandro proposed an extended approach (called <strong>fish bowl</strong>), in which the mob is composed of 5 members of the audience, which rotate after some time. So, in addition to the standard mob, we have:</p>
<ul>
<li>the <strong>facilitator</strong> (Marco) guiding the mob and the navigator and deciding when to rotate roles and members</li>
<li>the <strong>audience</strong>, watching it all. Anyone can then enter the fish bowl when he thinks he can give something to the discussion</li>
</ul>
<h2 id="what-is-a-kata">What is a Kata?</h2>
<p>“Kata” is a term borrowed from martial arts. It is “a detailed choreographed
 pattern of movements made to be practised alone. It can also be reviewed within groups and in unison when training” (<a href="https://en.wikipedia.org/wiki/Kata"  target="_blank" >Wikipedia</a>).
Developers have taken this term and applied it to their set of movements, which are coding, testing and designing. A kata is a short problem/exercise meant to be practised a lot of times. The same kata can be practised with different languages, approaches and methodologies, giving each time a new perspective.</p>
<p>In our case, in this meetup, we practised the mars rover kata, and the twists were to practice it with <strong>mob programming</strong> and <strong>outside-in TDD</strong>. Double trouble!</p>
<p>In the mars rover kata, you have to implement a rover moving on the surface of mars. You are given the initial coordinates of the rover (x, y) and the initial orientation (N, S, E, W). Then, you are given the commands:</p>
<ul>
<li>L → rotate left by 90°</li>
<li>R → rotate right by 90°</li>
<li>M → move forward one grid point, maintaining the same position</li>
</ul>
<p>Your program should output the position of the rover after applying the commands (X, Y coordinates and direction).</p>
<p>During the meetup (because of lack of time and a lot of discussions) we were able to implement only the simplest version, with the rotate left and move forward commands, and without the I/O translation code (from a text file to actual commands and positions). This doesn&rsquo;t mean that the kata was a failure. On the contrary, it was very useful to see different opinions and approaches to the problem at hand.</p>
<h2 id="outside-in-approach">Outside-In approach</h2>
<p><strong>Outside-in</strong> is an approach to develop software in tandem with TDD. It works by starting from the outer layer (”outside”) and, guided by tests, creating the underlying layers (”in”) of the software.</p>
<p>In practice, the mob started (guided by marco) with the acceptance tests, the outermost layer of testing. These tests should be in a language understandable by the business, as they indicate whether the problem is solved from the business perspective. The first consideration is that the acceptance tests used the actual input and output strings to test the behaviour of the system (see <a href="https://github.com/makomweb/mars-rover"  target="_blank" >here</a> for the example). This meant that the code needed a sort of “translator” to translate the inputs to domain objects, and the domain objects to outputs.</p>
<p>The outside-in approach turned out to be difficult to assimilate because it turned my perception of the design upside-down. Starting from the acceptance tests, it was difficult to turn the tests green, and we had to dive deeper and create a lot of code (first the rover controller, then the rover, then the position with coordinates and direction, and so on) before passing our first test.</p>
<p>In addition, we had to use mocks immediately to avoid writing the translator. Marco presented this to us as a challenge: most of the business value and complexity actually resides in the rover code, not the I/O, so it was a good way to concentrate on the core features of the kata.</p>
<p>In the end, we were able to turn our first test green, and it was already time to head to the pub, so… the rest was left as an exercise for the viewers 😇.</p>
<h2 id="conclusions">Conclusions</h2>
<p>The meetup was really interesting, and it helped me learn new concepts. Even if I didn’t participate in the mob but just watched, I exercised my “design muscles” during the session and my brain was always comparing alternatives and thinking about the code.</p>
<p>Marco and Alessandro are great teachers: Marco was a great facilitator and guided the mob to the right solution, while Alessandro was a thoughtful driver with opinions, also helping the mob to cooperate.</p>
<p>The outside-in approach was new for most of the audience, and even experienced developers discussed how to design the solution and how to proceed. They created a lot of classes seemingly “doing nothing” at the moment, but later it all made sense. This is quite different from standard TDD, in which you just write the code needed to pass the tests and then refactor. Outside-In helps to reduce the refactoring stage, which always leads to rewriting big chunks of the code.</p>
<p>Finally, I never tried practising a kata. I think it is a really useful technique to learn new concepts with a known problem, and I’ll use it more in the future.</p>
<p>That&rsquo;s all for now 🎉. Thank you for reading and see you next time!.</p>

        ]]></content:encoded></item></channel></rss>