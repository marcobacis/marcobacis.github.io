<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.net on Marco Bacis</title><link>https://marcobacis.com/tags/.net/</link><description>Recent content in .net on Marco Bacis</description><language>en-uk</language><copyright>© Copyright Marco Bacis 2018-2023</copyright><lastBuildDate>Sun, 03 Sep 2023 08:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Documentation-as-Code with Doxygen (Awesome)</title><link>https://marcobacis.com/blog/docs-as-code-doxygen-awesome/</link><pubDate>Sun, 03 Sep 2023 08:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/docs-as-code-doxygen-awesome/</guid><description>&lt;p>Hi 👋 and welcome to a new post.&lt;/p>
&lt;p>I recently had to improve the documentation for a project, and collected some ideas and tools along the way, so I&amp;rsquo;ll share here what I learned 😃.&lt;/p>
&lt;h2 id="we-dont-talk-enough-about-documentation">We don’t talk enough about documentation&lt;/h2>
&lt;p>Documentation is one of the most important elements of software. It allows to collect all the tribal knowledge about a product/project into a shared space. It also avoids the creation of “knowledge silos”, of “tribal knowledge” and in general allows to share the knowledge among the team members, avoiding the so called “bus factor” of a team (if a team member leaves or cannot work on the project anymore, who are going to remember all the nooks and crannies?).&lt;/p>
&lt;p>Unfortunately, documentation is also the most dreaded task for us developers…. we hate writing it! For many developers the code should be “self-documenting”, meaning that clean abstractions and names should allow to understand the code and the product at a glance. Unfortunately, the reality is quite different: architectural choices and business decisions cannot be embedded easily in the code, and it&amp;rsquo;s necessary to keep a separate place to document them.&lt;/p>
&lt;p>In addition, we must not forget about &lt;em>external&lt;/em> documentation for the interfaces that our product serves, both in terms of UI and features, and in terms of external API. In general, we owe the documentation to our team and to our users.&lt;/p>
&lt;p>In the last months, I worked for a startup in which the product was in need of documentation. The product includes a central application, and some related SDKs to communicate with the application and a hardware device. With an incoming release date, the last thing needed was the software documentation, which until now was kept in word documents…. so I started researching for alternatives. I wanted an easy to use technology that would allow us to ship the documentation easily and without messing up with tools (word, latex, slides 🤢 or other stuff like this..). I remembered watching a talk at &lt;a href="https://fosdem.org/" target="_blank" >FOSDEM&lt;/a> about documentation-as-code, and delved deeper into the topic. Here is what I found.&lt;/p>
&lt;p>&lt;em>Disclaimer: all the opinions expressed in this post are mine and not of my employer, and this post is not a tutorial or a guide… just me listing some tools and describing what I chose for the project!&lt;/em>&lt;/p>
&lt;h2 id="documentation-as-code">Documentation-as-Code&lt;/h2>
&lt;p>Documentation-as-Code is a simple concept, which can be summarised as “keep and manage your documentation like your code”.&lt;/p>
&lt;p>Basically, documentation should be treated like code, and as such should be kept near it, ideally in the same repository. This brings multiple advantages:&lt;/p>
&lt;ul>
&lt;li>Makes it easier to keep the documentation updated while the software evolves&lt;/li>
&lt;li>Provides a centralised space to keep the documentation, without the fragmentation given by other solutions (e.g. word documents on dropbox 😏)&lt;/li>
&lt;li>Allows to automate the documentation release along with the software (CI/CD for docs 😍)&lt;/li>
&lt;/ul>
&lt;p>These are just some of the advantages of treating documentation as code. This methodology is also a better fit with modern software development, as it employs the same versioning and release tools we usually use to develop software.&lt;/p>
&lt;p>Another advantage of docs-as-code is that, by keeping the documentation alongside the code, we can improve the documentation itself by generating parts of it directly from the code! This is the approach we took with the SDKs for example.&lt;/p>
&lt;h2 id="documentation-as-code-tools">Documentation-as-Code Tools&lt;/h2>
&lt;p>When choosing a tool to manage and generate the documentation for our project, I looked for 3 main characteristics:&lt;/p>
&lt;ul>
&lt;li>Is it a SaaS (Software-as-a-Service) or a SSG (Static Site Generator) tool?&lt;/li>
&lt;li>Can it generate the documentation from code comments? In particular, for our project we were targeting a C# and C++ codebase, so the tool should have supported both&lt;/li>
&lt;li>Does it allow to export the documentation (e.g. as pdf?). This might be useful for offline browsing&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s a short list of the tools I considered. First, the SaaS products:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.gitbook.com/" target="_blank" >GitBook&lt;/a> - Allows to manage your documentation online, with support for authorisation, public and private pages and custom domains&lt;/li>
&lt;li>&lt;a href="https://about.readthedocs.com/" target="_blank" >ReadTheDocs&lt;/a> - Based on sphinx, allows to host projects documentation (free for open source projects)&lt;/li>
&lt;/ul>
&lt;p>Then, some static site generators:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://retype.com/" target="_blank" >ReType&lt;/a> - Fast and easy to use, with export to pdf features, but with paid license over a certain number of pages&lt;/li>
&lt;li>&lt;a href="https://docusaurus.io/" target="_blank" >Docusaurus&lt;/a> - Generates a website using MDX and React components. Beautiful, but without generation from code comments and native export to pdf features&lt;/li>
&lt;li>&lt;a href="https://www.sphinx-doc.org/en/master/" target="_blank" >Sphinx&lt;/a> - Great tool with export features (html, latex, pdf and so on), extensible with community plugins and themes&lt;/li>
&lt;li>&lt;a href="https://dotnet.github.io/docfx/" target="_blank" >DocFx&lt;/a> - Generates a documentation websites from .NET Code, assemblies and XML comments. Supports only .NET/C#&lt;/li>
&lt;li>&lt;a href="https://www.doxygen.nl/" target="_blank" >Doxygen&lt;/a> - Old but gold! Generate documentation from code comments and markdown files. Support for a lot of languages&lt;/li>
&lt;/ul>
&lt;p>Most of the tools I looked for can be used create or host a website for the documentation, but only two of them (doxygen and docfx) allowed to generate most of the documentation from the code itself. Maybe this feature has gone out of fashion (code should be self-describing!! no comments!!), but I find it quite relevant, and more so if I need to document a public library distributed to customers.&lt;/p>
&lt;h2 id="solution-with-doxygen--markdown">Solution with Doxygen + Markdown&lt;/h2>
&lt;p>In the end, given the requirements I listed above, I chose to generate the documentation using doxygen, and to integrate it with markdown files and a nice css template.&lt;/p>
&lt;p>Doxygen is an open source tool to generate a (pretty ugly) static website entirely from the project code, using special annotations and comments. In addition to that, it allows to add markdown pages for more prosaic documentation. I used this last feature for the user manual of the application, while the SDK documentation was mainly generated directly from the comments in the code.&lt;/p>
&lt;p>The only disadvantage of doxygen is its “old-style” output, for which I found a great solution called “Doxygen Awesome”.&lt;/p>
&lt;p>&lt;a href="https://jothepro.github.io/doxygen-awesome-css/" target="_blank" >Doxygen Awesome&lt;/a> is a custom css and javascript template which gives doxygen a more “modern” look. It has some nice features, like light/dark theme, mobile usability, code blocks with a copy button and many others. You can refer to the &lt;a href="https://jothepro.github.io/doxygen-awesome-css/" target="_blank" >website&lt;/a> to see it in action, and the &lt;a href="https://github.com/jothepro/doxygen-awesome-css" target="_blank" >github repo&lt;/a> for the code.&lt;/p>
&lt;p>The basic theme and repo was almost perfect for the project. I started adding code comments and markdown files to it and tweaking the Doxyfile for my purposes.&lt;/p>
&lt;p>In the end I even tweaked the template code a bit. Here you can find some of the changes I made to the template (I might publish them somewhere to be reused some day…).&lt;/p>
&lt;h3 id="video-embedding-and-dark-mode">Video embedding and dark mode&lt;/h3>
&lt;p>The first change I made was to add a class to embed videos, as the basic template inverted all colours whenever the dark theme was toggled. This basically rendered the embedded videos in negative!&lt;/p>
&lt;p>Very cool, but not very effective when reading documentation.&lt;/p>
&lt;p>To fix this issue, I added this class to the doxygen-awesome css:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Manage responsive video */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">rwd-video&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">filter&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>; &lt;span style="color:#75715e">/* Remove dark mode issues */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">overflow&lt;/span>: &lt;span style="color:#66d9ef">hidden&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aspect-ratio: &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">rwd-video&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">rwd-video&lt;/span> &lt;span style="color:#f92672">object&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">rwd-video&lt;/span> &lt;span style="color:#f92672">embed&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While adding a video to a markdown file can be done with this snippet (which can also be added as alias to the doxyfile):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>\htmlonly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rwd-video&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">iframe&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/embed/aqz-KE-bpKQ&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Big Buck Bunny&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">frameborder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">allow&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">allowfullscreen&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">iframe&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>\endhtmlonly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are still issues with this approach. For example, videos can only be shown in the html output and not in others (e.g. latex/pdf). In the future I might create a command/alias to show the video or an alternate picture/thumbnail for non-interactive outputs.&lt;/p>
&lt;h3 id="lightdark-mode-logo">Light/Dark mode logo&lt;/h3>
&lt;p>Doxygen allows to set a logo for the project, which will be shown in the top-left/right corner of the page. This presented an issue with doxygen awesome: while the standard css shipped with doxygen-awesome inverts every component’s hue when dark mode is toggled, we wanted the logo to look good in both modes (and not just to look as a negative of the original). To do it, I just changed the content of the logo image based on the dark/light mode class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Manage logo in dark and light mode */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">html&lt;/span>.&lt;span style="color:#a6e22e">dark-mode&lt;/span> #projectlogo &lt;span style="color:#f92672">img&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">content&lt;/span>: url(&lt;span style="color:#e6db74">&amp;#34;./logo_light.png&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">html&lt;/span>.&lt;span style="color:#a6e22e">light-mode&lt;/span> #projectlogo &lt;span style="color:#f92672">img&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">content&lt;/span>: url(&lt;span style="color:#e6db74">&amp;#34;./logo_dark.png&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both logo pictures are added in the &lt;em>&lt;strong>img&lt;/strong>&lt;/em> directory and to the Doxyfile.&lt;/p>
&lt;h3 id="content-pictures-zoom-on-click">Content Pictures zoom on click&lt;/h3>
&lt;p>The final touch I gave to the documentation website was a modal to zoom on images when they are clicked. This allows to keep the pictures small when inside the documentation, but also to show them at full resolution when the user needs it.&lt;/p>
&lt;p>I won’t show here the code (I basically copied code from stack overflow 😅 not a clean solution). In short: after loading the page, a js snippet looks for all pictures and adds a &lt;em>onClick&lt;/em> to each, which shows the clicked picture in a modal window.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>That’s all!&lt;/p>
&lt;p>In this post I showed how writing and managing documentation as code leads to a better documentation and improved processes. I also described the latest Docs-as-Code solution I found for a project and small tweaks and improvements I made to make it more effective.&lt;/p>
&lt;p>Even if I didn’t show any of the results (you can watch a sample directly on &lt;a href="https://jothepro.github.io/doxygen-awesome-css/" target="_blank" >doxygen awesome documentation&lt;/a>, no need to see my project code 😛), I hope this post inspired you to get into the world of documentation-as-code (you can find some links in the “Resources” section below and scattered inside the post).&lt;/p>
&lt;p>Thanks, and see you next time! 👋&lt;/p>
&lt;p>PS. If you want to see the final results, &lt;a href="https://weart.it/docs/sdkcpp/" target="_blank" >here&lt;/a> is the documentation for the startup&amp;rsquo;s C++ SDK, while &lt;a href="https://weart.it/developer-guide/" target="_blank" >here&lt;/a> are all the other resources and documentation outputs&lt;/p>
&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.doxygen.nl/" target="_blank" >Doxygen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jothepro.github.io/doxygen-awesome-css/" target="_blank" >Doxygen Awesome documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.docslikecode.com/about/" target="_blank" >Docs like Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://fosdem.org/2023/schedule/event/how_to_automate_documentation_workflow_for_developers/" target="_blank" >How To Automate Documentation Workflow For Developers&lt;/a> - Talk by Portia Burton @ FOSDEM 2023&lt;/li>
&lt;li>&lt;a href="https://members.vadimkravcenko.com/proper-documentation/?ref=cto-newsletter" target="_blank" >Proper Documentation&lt;/a> - Vadim Kravcenko&lt;/li>
&lt;/ul></description></item><item><title>Working Software Conference 2023</title><link>https://marcobacis.com/blog/working-software-2023/</link><pubDate>Sun, 02 Jul 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/working-software-2023/</guid><description>&lt;p>Hi 👋 and welcome to a new post!&lt;/p>
&lt;p>Last Friday I attended the 2023 &lt;a href="https://www.agilemovement.it/workingsoftware/" target="_blank" >Working Software Conference&lt;/a> in Milan. The Working Software Conference is an event organised by the &lt;a href="https://agilemovement.it" target="_blank" >Italian Agile Movement&lt;/a>, focused on the second principle of the &lt;a href="https://agilemanifesto.org" target="_blank" >agile manifesto&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Working software over comprehensive documentation&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>The meaning of this principle is that we should focus on delivering value (the working software) to the user instead of writing extensive specification documents (a.k.a. “wasting time”, as all the requirements and documentation will need to be adapted to change in a very short time).&lt;/p>
&lt;p>The conference contained a mixture of front sessions and workshops.
In particular, I attended two workshops, one in the morning and one in the afternoon. In this post I present a small summary and comment of the two workshops, with some considerations at the end.&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;h3 id="affoghiamo-i-microservizi-nella-birra---christian-de-simone-and-alberto-acerbis">“Affoghiamo i microservizi nella birra” - Christian De Simone and Alberto Acerbis&lt;/h3>
&lt;p>&lt;em>“Let’s drown microservices in beer”&lt;/em>&lt;/p>
&lt;p>The first workshop I attended was held by &lt;a href="https://www.linkedin.com/in/aacerbis/" target="_blank" >Alberto Acerbis&lt;/a> and &lt;a href="https://www.linkedin.com/in/desimonechristian/" target="_blank" >Christian De Simone&lt;/a>, and was about how a monolith can deliver value to the customer in a fast way, and without compromising its future extension and scalability.&lt;/p>
&lt;p>The first part was a small exercise: we had to design and start implementing a couple of services (purchases and warehouse) for a small brewery. We divided in groups, and in my team we immediately started splitting the two domains in separate micro services communicating with an external broker. We hadn’t even started to implement the system (just coded the first purchases endpoint) that it was time for a discussion with the other teams.&lt;/p>
&lt;p>Every team used a different approach: serverless, microservices, monolith and so on…. in the end, Alberto and Christian discussed the different pros and cons of our solutions, and then presented a way to deliver value to the customer without creating unneeded complexity and costs: a &lt;strong>Modular Monolith&lt;/strong>.&lt;/p>
&lt;p>Alberto showed an example &lt;a href="https://github.com/BrewUp/WorkingSoftware-2023" target="_blank" >solution&lt;/a>, with the two different domains implemented as projects inside the same solution. Every domain was separated from the other (and the separation checked with &lt;a href="https://archunitnet.readthedocs.io/en/latest/" target="_blank" >ArchUnit&lt;/a> tests) and communicated with a common broker implemented with the &lt;a href="https://github.com/jbogard/MediatR" target="_blank" >MediatR&lt;/a> library. This kind of architecture has the pros of both monolith (fast iterations for a small team and small product) and modular and event-based applications, allowing further extensibility in the future, &lt;strong>if&lt;/strong> and when the business will grow.&lt;/p>
&lt;p>After seeing the implementation of a modular monolith, a question remained: how do we deploy it? And how do we keep costs to a minimum doing it? Different solutions exist:&lt;/p>
&lt;ul>
&lt;li>Monolith executable deployed on a VM&lt;/li>
&lt;li>Docker container deployed using docker compose or k8s&lt;/li>
&lt;li>Serverless solutions such as container-as-a-service or function-as-a-service&lt;/li>
&lt;/ul>
&lt;p>Christian showed us a possible solution: given that the first implementation of the system is a simple monolith, it’s possible to keep costs low by taking advantage of managed serverless solutions, and using docker allows to still be prepared for future extensions to the system (e.g. in a Kubernetes cluster).&lt;/p>
&lt;p>Our task for the second half of the workshop was to “dockerize” the simple endpoint we developer earlier and push it to a GitHub repository. He then showed us a way of deploying docker containers in production, by using a managed service offered by &lt;a href="https://www.scaleway.com/en/serverless-containers/" target="_blank" >scaleway&lt;/a>.&lt;/p>
&lt;p>Finally, it was time to show off how we could deploy to Kubernetes, in case our brewery would grow a lot!! Christian set up a small Kubernetes cluster (always on scaleway) in which to deploy our services when they were pushed on a GitHub repository. He also explained a useful tool for deploying on Kubernetes, called &lt;a href="https://helm.sh" target="_blank" >helm&lt;/a>, which allows to define “charts” (parametrised templates of k8s resources and deployments) that can be deployed as a single unit. Helm is useful both for our projects and to deploy external dependencies (he deployed a MongoDb instance with a click).&lt;/p>
&lt;p>Alberto and Christian explained the Modular monolith concept in a easily understandable way, and we were able to gain some concepts and understand the pros and cons of it. In addition, the live code explanation and live deploy to Kubernetes were amazing 😃. I also discovered some tools (MediatR, ArchUnit and helm) that I didn’t know yet, and will try for sure in my projects!&lt;/p>
&lt;h3 id="faccio-prima-il-refactor-o-i-tests---gianni-bombelli">“Faccio prima il refactor o i tests?” - Gianni Bombelli&lt;/h3>
&lt;p>&lt;em>“Should I do refactoring or tests first?”&lt;/em>&lt;/p>
&lt;p>In the afternoon, I participated in a workshop held by &lt;a href="https://www.linkedin.com/in/gianni-bombelli/" target="_blank" >Gianni Bombelli&lt;/a> and focused on testing and refactoring a (small) piece of legacy code.&lt;/p>
&lt;p>We started the workshop with a great ice breaker: Gianni gave us a roll of toilet paper and asked each participant to draw as much paper as we usually use…. then, for each square of paper, each one had to say something about him/herself. Even before coding, I learned something 😂 to use less paper…&lt;/p>
&lt;p>The workshop exercise was to work in pairs, testing and refactoring a small piece of code (you can find it already solved by Gianni in his &lt;a href="https://github.com/bombo82/workshop-ws-2023" target="_blank" >repository&lt;/a>) themed around the “Another brick in the wall” song by Pink Floyd (obviously, Gianni was wearing a “The Wall” t-shirt 😃). I paired with Christian (from the morning workshop, see above) we started to write a small test for the already implemented method we found in the repo, and….. it threw a “NotTestableCallException”!&lt;/p>
&lt;p>Some quick notes about the exercise:&lt;/p>
&lt;ul>
&lt;li>We couldn’t use external dependencies and libraries&lt;/li>
&lt;li>No Mocks&lt;/li>
&lt;li>The code worked in production, even if we encountered difficulties in testing it! So, we should have touched it with care&lt;/li>
&lt;/ul>
&lt;p>The exception we found was a simple example of what we could find in real production code: a static method to get the logged in user (e.g. taken from spring or from .NET authentication modules), which would work when deployed but not on our local setup.&lt;/p>
&lt;p>To continue testing this code we should have removed the exception. But how to remove it without changing the production code and without testing it first? How could we test without refactoring first, and refactor without tests?&lt;/p>
&lt;p>Gianni solved this dilemma for us: we could leverage some minimal and automated refactoring (available in most IDEs) to “clean” the code enough to write some tests. In our case, this meant extracting the untestable method in a separate method, and extending the class under test to override the extracted method!&lt;/p>
&lt;p>Using an overridden method in a class used only for testing is similar to mocks and stubs, but in this case the “trick” (and the smell) was quite visible (in the tested and the test classes) as a remainder for us to clean this code afterwards.&lt;/p>
&lt;p>We used this method for most of the workshop, extracting problematic code from the tested method and using this for our purposes. In particular, we focused on:&lt;/p>
&lt;ul>
&lt;li>Static/Singleton objects and methods out of our control&lt;/li>
&lt;li>System calls (e.g. the use of DateTime.Now for equality)&lt;/li>
&lt;li>Possibile side effects given by external dependencies&lt;/li>
&lt;/ul>
&lt;p>After covering all the code with tests, we were finally able to refactor it easily. We tried by ping-ponging refactoring pieces of code between me and Christian, and finished in no time!&lt;/p>
&lt;p>A last issue we encountered was how to refactor a possible side effect given by the use of a DAO (Data Access Object). Gianni helped us by explaining that in these cases, the issue can be solved with an in-memory structure to mimic the underlying object without using the real dependency.&lt;/p>
&lt;p>In the end, we finally refactored the code to our liking, and ended up the workshop with a discussion on what we had learned.&lt;/p>
&lt;p>So, what comes first, refactoring or testing? Here&amp;rsquo;s the solution: first, apply the minimum set of “safe” refactoring to make the code testable. Then, cover the code with tests. Only after that you can refactor the code “properly”! In most cases it will be an iterative process of refactor → test → refactor.&lt;/p>
&lt;p>Gianni was a great instructor. He let us bang our heads against the code, and only after he showed us how to work with it. His explanations were on point and, most of all, he encouraged us to discuss with him and the other pairs. I learned some neat tricks to work with untested (and untestable) code and it was great!&lt;/p>
&lt;h2 id="the-end">The End!&lt;/h2>
&lt;p>The Working Software Conference was a great event to meet new people and learn new technologies and ways to work as a software developer. I only attended two workshops, but I would have wanted it to go on for way more than a single day! All the instructors were prepared and engaging, and I learned a lot during the day. I hope to attend other events like this in the near future!&lt;/p>
&lt;p>That&amp;rsquo;s all for today. Thanks, and see you next time! 👋&lt;/p></description></item><item><title>XPUGBg December meetup: “Mars Rover Kata, an outside-in approach”</title><link>https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</link><pubDate>Wed, 28 Dec 2022 08:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/</guid><description>&lt;p>Hi! 👋&lt;/p>
&lt;p>Today I will write about a meetup I attended this December, hosted by XPUGBg (Extreme Programming User Group Bergamo). The &lt;a href="https://www.meetup.com/it-IT/xpugbg/" target="_blank" >XPUGBg&lt;/a> is an association promoting and organizing events related to extreme programming in the Bergamo region.&lt;/p>
&lt;p>In this meetup, the guests (Marco Consolaro and Alessandro Di Gioia from &lt;a href="https://alcor.academy/" target="_blank" >Alcor Academy&lt;/a>) performed a live mob programming session with the audience, to solve the &lt;a href="https://github.com/makomweb/mars-rover" target="_blank" >mars rover kata&lt;/a>. We learned how to do mob programming, and how the Outside-In TDD approach works.&lt;/p>
&lt;h2 id="what-is-extreme-programming">What is Extreme Programming?&lt;/h2>
&lt;p>Extreme programming (XP) is a set of values, principles and practices introduced by Kent Beck at the end of the 1990s. Its goals are to improve the software quality and the team&amp;rsquo;s responsiveness to requirements changing during development. I might write my opinions on this methodology in a new blog post, but for now, I’ll redirect you to the &lt;a href="https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658" target="_blank" >book&lt;/a>, which definitely explains it better than I do 😉.&lt;/p>
&lt;p>I discovered extreme programming later this year while attending the XPUG meetups. I also read Kent Beck’s book and I’m actively trying to introduce some practices (like TDD and pair programming) into my current team, but I’m still far from a full XP practitioner. Still, the argument is really interesting.&lt;/p>
&lt;p>How does it apply to this meetup? We followed a practice called &lt;strong>mob programming&lt;/strong>, in which there are:&lt;/p>
&lt;ul>
&lt;li>a &lt;strong>driver&lt;/strong> (Alessandro), the developer actually writing code on the editor&lt;/li>
&lt;li>the &lt;strong>navigator&lt;/strong>, which instructs the driver on what to write (and sometimes also how)&lt;/li>
&lt;li>the &lt;strong>mob&lt;/strong>, other members of the team which can discuss with the navigator to improve the code, find possible issues and so on&lt;/li>
&lt;/ul>
&lt;p>during the meetup, Marco and Alessandro proposed an extended approach (called &lt;strong>fish bowl&lt;/strong>), in which the mob is composed of 5 members of the audience, which rotate after some time. So, in addition to the standard mob, we have:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>facilitator&lt;/strong> (Marco) guiding the mob and the navigator and deciding when to rotate roles and members&lt;/li>
&lt;li>the &lt;strong>audience&lt;/strong>, watching it all. Anyone can then enter the fish bowl when he thinks he can give something to the discussion&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-a-kata">What is a Kata?&lt;/h2>
&lt;p>“Kata” is a term borrowed from martial arts. It is “a detailed choreographed
 pattern of movements made to be practised alone. It can also be reviewed within groups and in unison when training” (&lt;a href="https://en.wikipedia.org/wiki/Kata" target="_blank" >Wikipedia&lt;/a>).
Developers have taken this term and applied it to their set of movements, which are coding, testing and designing. A kata is a short problem/exercise meant to be practised a lot of times. The same kata can be practised with different languages, approaches and methodologies, giving each time a new perspective.&lt;/p>
&lt;p>In our case, in this meetup, we practised the mars rover kata, and the twists were to practice it with &lt;strong>mob programming&lt;/strong> and &lt;strong>outside-in TDD&lt;/strong>. Double trouble!&lt;/p>
&lt;p>In the mars rover kata, you have to implement a rover moving on the surface of mars. You are given the initial coordinates of the rover (x, y) and the initial orientation (N, S, E, W). Then, you are given the commands:&lt;/p>
&lt;ul>
&lt;li>L → rotate left by 90°&lt;/li>
&lt;li>R → rotate right by 90°&lt;/li>
&lt;li>M → move forward one grid point, maintaining the same position&lt;/li>
&lt;/ul>
&lt;p>Your program should output the position of the rover after applying the commands (X, Y coordinates and direction).&lt;/p>
&lt;p>During the meetup (because of lack of time and a lot of discussions) we were able to implement only the simplest version, with the rotate left and move forward commands, and without the I/O translation code (from a text file to actual commands and positions). This doesn&amp;rsquo;t mean that the kata was a failure. On the contrary, it was very useful to see different opinions and approaches to the problem at hand.&lt;/p>
&lt;h2 id="outside-in-approach">Outside-In approach&lt;/h2>
&lt;p>&lt;strong>Outside-in&lt;/strong> is an approach to develop software in tandem with TDD. It works by starting from the outer layer (”outside”) and, guided by tests, creating the underlying layers (”in”) of the software.&lt;/p>
&lt;p>In practice, the mob started (guided by marco) with the acceptance tests, the outermost layer of testing. These tests should be in a language understandable by the business, as they indicate whether the problem is solved from the business perspective. The first consideration is that the acceptance tests used the actual input and output strings to test the behaviour of the system (see &lt;a href="https://github.com/makomweb/mars-rover" target="_blank" >here&lt;/a> for the example). This meant that the code needed a sort of “translator” to translate the inputs to domain objects, and the domain objects to outputs.&lt;/p>
&lt;p>The outside-in approach turned out to be difficult to assimilate because it turned my perception of the design upside-down. Starting from the acceptance tests, it was difficult to turn the tests green, and we had to dive deeper and create a lot of code (first the rover controller, then the rover, then the position with coordinates and direction, and so on) before passing our first test.&lt;/p>
&lt;p>In addition, we had to use mocks immediately to avoid writing the translator. Marco presented this to us as a challenge: most of the business value and complexity actually resides in the rover code, not the I/O, so it was a good way to concentrate on the core features of the kata.&lt;/p>
&lt;p>In the end, we were able to turn our first test green, and it was already time to head to the pub, so… the rest was left as an exercise for the viewers 😇.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The meetup was really interesting, and it helped me learn new concepts. Even if I didn’t participate in the mob but just watched, I exercised my “design muscles” during the session and my brain was always comparing alternatives and thinking about the code.&lt;/p>
&lt;p>Marco and Alessandro are great teachers: Marco was a great facilitator and guided the mob to the right solution, while Alessandro was a thoughtful driver with opinions, also helping the mob to cooperate.&lt;/p>
&lt;p>The outside-in approach was new for most of the audience, and even experienced developers discussed how to design the solution and how to proceed. They created a lot of classes seemingly “doing nothing” at the moment, but later it all made sense. This is quite different from standard TDD, in which you just write the code needed to pass the tests and then refactor. Outside-In helps to reduce the refactoring stage, which always leads to rewriting big chunks of the code.&lt;/p>
&lt;p>Finally, I never tried practising a kata. I think it is a really useful technique to learn new concepts with a known problem, and I’ll use it more in the future.&lt;/p>
&lt;p>That&amp;rsquo;s all for now 🎉. Thank you for reading and see you next time!.&lt;/p></description></item></channel></rss>