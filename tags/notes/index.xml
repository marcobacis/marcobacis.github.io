<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Notes on Marco Bacis</title><link>https://marcobacis.com/tags/notes/</link><description>Recent content in Notes on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis 2018-2024</copyright><lastBuildDate>Sat, 10 Jun 2023 07:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Book Summary: A Philosophy of Software Design</title><link>https://marcobacis.com/blog/philosophy-of-software-design/</link><pubDate>Sat, 10 Jun 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/philosophy-of-software-design/</guid><description><p>Hi üëã¬† and welcome to a new post!</p><p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú<em>A Philosophy of Software Design</em>‚Äù, by<em>John Ousterhout</em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.</p><p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.</p></description><media:content url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi üëã¬† and welcome to a new post!</p>
<p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú<em>A Philosophy of Software Design</em>‚Äù, by <em>John Ousterhout</em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.</p>
<p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.</p>
<p>I wrote this summary mainly for myself, to remember the concepts expressed in the book. There might be missing information and inconsistent levels of detail üòÖ¬†just a disclaimer.</p>
<p>Let‚Äôs start!</p>
<h2 id="its-all-about-complexity">It‚Äôs All About Complexity</h2>
<p>Writing Software is one of the purest creative activities done by humans. It allows to create entire systems and world only constrained by the developers‚Äô imagination.</p>
<p>However, the greatest limitation of creating software is our ability to <em>understand</em> it. Over time, complexity will inevitably increase, so we must find ways to minimise its impact. But <strong>what</strong> is complexity, and how can we <strong>reduce</strong> it? These are the goals of the book.</p>
<blockquote>
<p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.</p>
</blockquote>
<p>Complexity manifests itself with symptoms:</p>
<ul>
<li><strong>Change Amplification</strong>: simple changes require to modify code in many different places</li>
<li><strong>Cognitive Load</strong>: how much a developer needs to know to complete a task
(e.g. shorter but difficult to understand is worse than longer but easier to understand code)</li>
<li><strong>Unknown Unknowns</strong> (the worst): it‚Äôs not obvious which code to modify/add to complete a task</li>
</ul>
<p>But what are the causes of complexity? The book highlights two, <em>dependencies</em> and <em>obscurity</em>, which can be reduced by making code obvious and easy to read, by encapsulating the complexity in separate modules and in general by designing the system better (easy right? üòÖ).</p>
<h2 id="tactical-vs-strategic-programming">Tactical vs Strategic Programming</h2>
<p>To improve the quality of software, we must change out <em>mindset,</em> from <strong>tactical</strong> to <strong>strategic</strong>.</p>
<p>Tactical programming focuses only on working software. ‚ÄúIf it works it‚Äôs ok, let‚Äôs go on the next task‚Äù. Thinking in terms of working code, and not quality and design, leads to incremental complexity in the long term. Code becomes more complex because every small complexity adds up. Refactoring is seen as a cost because it will slow down developers, so the design is never modified from the starting one.</p>
<p>Strategic programming is the solution to increasing complexity. The primary goal of strategic programming is to <em>produce a great design, which also happens to work</em>. It can be seen as an investment in the quality of software, which over time will avoid complexity and allow to ship features fast and lower development costs.</p>
<p>Some modern software trends (such as Agile and TDD) expose to the risk of tactical programming, by proposing an iterative approach and focusing on features instead of abstractions. When working in an iterative approach it is then important to focus on <strong>abstractions</strong> instead of single features/modules/methods, and outside-in design might be a possible solution (my take on the argument at least, read more <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >here</a>).</p>
<h2 id="modular-design">Modular Design</h2>
<h3 id="deep-modules">Deep Modules</h3>
<p>The center of the book is dedicated to modular design and its main benefits. In modular design, a software system is decomposed in a set of (relatively) independent modules. The goal while designing a modular system is to minimise the dependencies between modules.</p>
<p>A dependency can be formal, based on the public <em>interface</em> of a module, or informal, based on the module‚Äôs <em>behaviour</em> and side-effects. The book advocates for <strong>deep</strong> modules, meaning modules that have a simple interface hiding powerful functionalities. This is in contrast to <strong>shallow</strong> modules, with complex interfaces and simple implementations.</p>
<p>An example of deep module is the Unix I/O api, which exposes simple methods (open, read, write, close) to manage a really complex underlying system (filesystems, buffers, disks and so on). Examples of shallow modules are instead pass-through methods, linked lists and in general all the classes we create which don‚Äôt hide the underlying implementation.</p>
<h3 id="information-hiding">Information Hiding</h3>
<p>Information hiding is the fist technique that can be used to create deep modules. It consists in encapsulating design decisions and information behind an interface which doesn‚Äôt expose it, thus hiding the underlying complexity (examples of underlying information: networking, data structures, multithreading, parsing and serialization, system and physical stuff like protocols and disks, etc..).</p>
<p>The opposite of information hiding is information leakage, in which the underlying design choices and implementation  ‚Äúleak‚Äù from the interface. One of the causes of information leakage is <strong>temporal decomposition</strong>, in which the execution order of the operation is reflected in the code structure (e.g. class to read, then to modify and finally a class to write the result‚Ä¶ they pass the underlying structure among them, leaking it outside the actual interface). The solution is actually contrary to the current best practices, which proposed to create a lot of small classes with shallow interfaces: create slightly larger classes which encapsulate more operations (still keeping levels of abstraction separated). The same thing can be done inside classes, by using information hiding and deep (private) methods to hide implementation details.</p>
<h3 id="general-purpose-modules-are-deeper">General-Purpose Modules are Deeper</h3>
<p>Another consideration is to think about <strong>general-purpose</strong> classes instead of special-purpose interfaces. A general-purpose interface is by definition deeper, as it must present a common (we hope simpler) interface to the users to deal with different cases. A special purpose interface is instead designed around the special case it is handling. The goal should be to design <em>somewhat general-purpose</em> interfaces without over-engineering the code too early (it‚Äôs an investment, but it shouldn‚Äôt block the development and risk to be useless in the future). The book proposes three questions (‚ÄùWhat is the simplest interface for the current use?‚Äù, ‚ÄúIn how many situations will this method be used?‚Äù, and ‚ÄúIs this API easy to use for my current needs?‚Äù) to discern if the class is general purpose or just over-engineered.</p>
<h3 id="different-layer-different-abstraction">Different Layer, Different Abstraction</h3>
<p>Systems are usually designed as <strong>layers</strong>, each with a different level of abstraction offered. When two adjacent layers offer similar abstractions, this is a red flag. Most of the times this leads to shallow modules, which don‚Äôt hide complexity and just bloat the system.</p>
<p>The biggest example are pass-through methods, which just call the same method of the underlying layer. This approach doesn‚Äôt hide anything and adds complexity to the system, as it adds a similar interface without adding functionality! The book proposes three solutions:</p>
<ul>
<li>Expose the lower layer directly to the higher-level modules</li>
<li>Redistribute functionality between classes</li>
<li>Merge the two layers</li>
</ul>
<p>In some cases, having duplicated interfaces is ok, such as in <strong>dispatcher</strong> and interfaces with multiple implementations (such as disk drivers). In most cases it is instead harmful.</p>
<p>One kind of API duplication is given by <strong>decorators</strong>. A decorator has always the same interface, but different implementations which are used to extend the functionality. This might lead to an explosion in the number of decorators, each for a single operation. This represents a case of <em>shallow</em> modules.</p>
<p>Another form of duplication is given by <strong>pass-through variables</strong>, which must be passed between multiple layers and it‚Äôs basically a leaked information. Think about configuration parameters and arguments that are used by lower level classes, but not by the higher levels. Pass-through variables add complexity because they force all the intermediate layers to be aware of their existence. The solutions for this problem are mostly ugly, so a compromise must be reached and it‚Äôs a design decision:</p>
<ul>
<li>Store the information in a global variable</li>
<li>Use an already existing object related to the lower-level module in which to put the variable</li>
<li>Introduce a <em>context</em> object, which presents some of the disadvantages of global variables, but allows to have multiple instances in the same process and it‚Äôs more test-friendly</li>
</ul>
<h3 id="pull-complexity-downwards">Pull Complexity Downwards</h3>
<p>The goal of software design is to minimise complexity, thus it‚Äôs important to hide the complexity whenever it is possible. This is also valid for interfaces. It is better to make a more complex implementations, if that means a simpler interface for the users. This relates to the ‚Äúinvestment mindset‚Äù explained at the beginning of the book.</p>
<p>The most important lessons is to avoid exposing configuration parameters as much as possible, and if necessary, to compute reasonable defaults if that‚Äôs the case.</p>
<p>Don‚Äôt take it too far however, by putting all of the code into a class or merging too many classes. Pulling down complexity:</p>
<ul>
<li>should simplify the interface</li>
<li>should be done on functionality related to the existing one</li>
<li>should result in many simplifications elsewhere in the application</li>
</ul>
<h3 id="together-or-apart">Together or Apart?</h3>
<p>Deciding to merge or divide functionality is a fundamental question developers face. In general, the rule is to <strong>simplify</strong> the interfaces and to create <em><strong>deep</strong></em> modules and methods. Splitting or putting together code can help, but it‚Äôs full of compromises and choices.</p>
<p>Subdividing may increase complexity (it creates a higher <strong>number</strong> of components, additional code to manage, might lead to more dependencies and separation or duplication of cohesive functionalities. Bringing pieces of code together might help in reducing the complexity, and good indicators are:</p>
<ul>
<li>Shared information</li>
<li>Simpler interface when merged</li>
<li>Duplication of functionality</li>
</ul>
<p>Splitting is instead indicated when there is a mixture of general and special purpose code in the same module (it might be better to separate the two) and when the functionalities inside the module are not related. In general, a method/module should <strong>do one thing and do it completely</strong>.</p>
<p>When splitting is important to still keep modules deep, while us developers have a tendency to split too much (I‚Äôm actually torn on this, given the advice from uncle bob and countless people saying to divide in minuscule, but <strong>shallow</strong>, methods).</p>
<p>Splitting can be done by:</p>
<ul>
<li>Extracting a subtask into a separate method (keeping the methods deep, remember!)</li>
<li>Splitting in two separate methods ‚Üí avoid conjoined methods, in which you cannot understand the methods/modules independently. also, avoid shallow methods</li>
</ul>
<p>Examples of the chapter:</p>
<ul>
<li>Merge http reading and parsing method because they shared the http request informations</li>
<li>Bring together to simplify the interface (what should be done with stream and buffers in java)</li>
<li>Separate a class for logging</li>
<li>Separate text-related stuff and ui operations in the editor example (general text handling vs special operations such as selection and undo)</li>
</ul>
<h2 id="error-handling">Error Handling</h2>
<p>Exception handling is a huge source of complexity in software systems. An exception alters the flow of the program, and must be either handled or reported to the upper layer. In addition, code that handles exceptions tends to be verbose, complex and an additional source of exceptions itself!</p>
<p>Programmers tend to throw exceptions at every suspicious behaviour, but a class with a lot of exceptions is <em><strong>shallow</strong></em> and leads to further complexity. The book list 4 ways to reduce exceptions in our code.</p>
<ul>
<li><strong>Define errors out of existence</strong>: change the code in order to handle special cases (or avoid them) without raising exceptions</li>
<li><em>Masking</em>: detecting and handling the exception at a lower level (e.g. with retries)</li>
<li><em><strong>Aggregation:</strong></em> handle many exceptions with a single piece of code at a higher level and in a more generic way</li>
<li><strong>Crash/Abort</strong>: to be used only for exceptions for which there is no recovery (e.g. most out-of-memory and I/O errors)</li>
</ul>
<p>The same principles can be used to handle special cases, and not just errors, in our code. Defining special cases out of existence with general-purpose code, or handling special cases in separate internal methods and classes can help create deep modules, thus reducing complexity.</p>
<h2 id="commenting-code">Commenting Code</h2>
<p>Comments are the most important form of documentation that developers can write: they help improve the design (if written before writing code), reduce cognitive load and remove unknown unknowns by capturing both high and low-level details that are not present in the code.</p>
<p>However, programmers tends to not write (or delay writing) comments, with main excuses being that ‚Äúcode should be self-documenting‚Äù (leading to smaller methods and shallow modules), that they don‚Äôt have time (it doesn‚Äôt take much), that they have seen only worthless comments (that‚Äôs why it‚Äôs important to write them correctly) and that they require constant update (that‚Äôs because they are coupled to the implementation, and they shouldn‚Äôt).</p>
<p>In general, comments should describe the <em><strong>what</strong></em> and <strong>why</strong> of the underlying code, and not the how (implementation). They shouldn‚Äôt just repeat the code, and instead <strong>add precision</strong> or provide the underlying <strong>intuition</strong> and <strong>reasons</strong> why the code was written in the first place (e.g. design decision, fixed bug reference, adherence to protocols and standards etc..) . An example are interface comments, which allows the user of an interface to see what it does without reading the underlying code. Implementation comments describe complex details inside the code, but they should be kept <em><strong>near</strong></em> the code they describe (e.g. not at the beginning of a method or in the interface definition). <em><strong>Cross-Module</strong></em> comments should be kept in a easily discoverable place for the developer (e.g. in a common class/file, or in extreme cases in an external doc file, even if less desirable).</p>
<p>Comments can also be used as a <strong>design</strong> <strong>tool</strong>, by writing them before the code. In this way, the comments will reflect the high-level overview of the implementation, will be written better and force the developer to think about the design before coding. If comments are complex or describe the implementation in too much detail, then the final design will be complex and/or shallow.</p>
<h2 id="consistency-and-clarity">Consistency and Clarity</h2>
<p>The final advice of the book is that code should be <strong>obvious</strong>, meaning that the reader should have all the information needed to understand the code and modify it. Being obvious means having a low complexity and clear interface. This can be done by working both the design and the <em>consistency</em> of the code.</p>
<p>Regarding consistency, it can be enforced by:</p>
<ul>
<li>Following conventions and enforcing a coding style (e.g. with tools such as linters and with code review)</li>
<li>Giving the right <strong>names</strong> (they must be precise, with a clear definition and purpose, and consistent in the entire codebase)</li>
<li>Documentation (both in form of <strong>comments</strong> and external documentation for conventions and overall design)</li>
</ul>
<p>In general, the code shouldn‚Äôt violate the reader‚Äôs expectation, in order to work as a cognitive leverage: if the design is consistent and obvious, once the developer learns how something is done in one place, he can use that knowledge to understand other places of the codebase which use the same approach.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed this book. It was short (just 170 pages!), but full of insights, opinions and a ton of advice!</p>
<p>Some advice contained in the book made me think about current practices. For example, short methods are a cornerstone of clean coding, but the author goes against them when they make the code ‚Äúshallower‚Äù. Another controversy are the chapters on commenting code, in which the author goes against the myth of ‚Äúself-documenting code‚Äù.</p>
<p>I must admit that I don‚Äôt always follow the advice given by the author (for example I don‚Äôt comment the code much, and sometimes consistency is not my first concern), but from now on I‚Äôll watch out on many of the ‚Äúred flags‚Äù contained in the book.</p>
<p>That‚Äôs it for today! I hope you enjoyed this summary. I might have skipped some concepts and chapters (e.g. the last one about ‚Äúdesigning for performance‚Äù). I recommend this book for anyone interested in improving his development and design skills.</p>
<h3 id="bonus">Bonus</h3>
<p>PS. The book contains a list of ‚Äúred flags‚Äù to keep in mind while writing or reviewing code. Each of the red flags might represent the symptom of design issues in the system.</p>
<p>Here it is:</p>
<ul>
<li><strong>Shallow Module:</strong> the interface of a class or method isn‚Äôt much simpler than its implementation</li>
<li><strong>Information Leakage</strong>: a design decision is reflected in multiple modules</li>
<li><strong>Temporal Decomposition</strong>: the code structure is based on the order in which operations are executed, not on information hiding</li>
<li><strong>Overexposure</strong>: an API forces callers to be aware of rarely used features in order to use commonly used features</li>
<li><strong>Pass-Through Method</strong>: a method does almost nothing except pass its arguments to another method with a similar signature</li>
<li><strong>Repetition</strong>: a nontrivial piece of code is repeated over and over</li>
<li><strong>Special-General Mixture</strong>: special-purpose code is not cleanly separated from general-purpose code</li>
<li><strong>Conjoined Methods</strong>: two methods have so many dependencies that it‚Äôs hard to understand the implementation of one without understanding the implementation of the other</li>
<li><strong>Comment Repeats Code:</strong> all of the information in a comment is immediately
obvious from the code next to the comment</li>
<li><strong>Implementation Documentation Contaminates Interface:</strong> an interface
comment describes implementation details not needed by users of the thing
being documented</li>
<li><strong>Vague Name:</strong> the name of a variable or method is so imprecise that it doesn‚Äôt
convey much useful information</li>
<li><strong>Hard to Pick Name:</strong> it is difficult to come up with a precise and intuitive name
for an entity</li>
<li><strong>Hard to Describe:</strong> in order to be complete, the documentation for a variable or
method must be long</li>
<li><strong>Non-obvious Code:</strong> the behaviour or meaning of a piece of code cannot be
understood easily</li>
</ul>
        ]]></content:encoded></item><item><title>Book Summary: Atomic Habits</title><link>https://marcobacis.com/blog/atomic-habits-book/</link><pubDate>Tue, 14 Mar 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/atomic-habits-book/</guid><description>Hi üëã¬†and welcome to a new post!
Today I‚Äôm publishing the (raw) notes I took while reading ‚ÄúAtomic Habits: An Easy and proven way to build good habits and break bad ones‚Äù, by James Clear.
Even though I read this book two years ago, I stumbled across this notes and they were helpful in remembering its main ideas and concepts. I know there are many summaries and reviews of this book.</description><media:content url="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="333" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="333"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi üëã¬† and welcome to a new post!</p>
<p>Today I‚Äôm publishing the (raw) notes I took while reading ‚ÄúAtomic Habits: <em>An Easy and proven way to build good habits and break bad ones‚Äù,</em> by James Clear.</p>
<p>Even though I read this book two years ago, I stumbled across this notes and they were helpful in remembering its main ideas and  concepts. I know there are many summaries and reviews of this book. Still, I&rsquo;ll keep this notes on the blog as a personal learning reference.</p>
<p>If you want to see how I personally understood the concepts explained in the book, keep reading, and enjoy!</p>
<h2 id="intro">Intro</h2>
<p>In the introduction, James writes about his teen accident with baseball and his recovery. He then talks about his college years, in which he experimented with his habits to improve, learn and become a better person and how that brought to him writing his blog and the book.</p>
<h2 id="fundamentals">Fundamentals</h2>
<p>The first thing to learn about habits is that the are the <strong>compound</strong> <strong>interest of personal improvement</strong>. By harnessing small habits and improving by 1% every day, one can make exponential progress in the long term.</p>
<p>I don&rsquo;t agree entirely with the expression &ldquo;1% better every day&rdquo; because in the long run i think that improvement decreases as one become better at something. We first start by improving a lot, but with time progress becomes exponentially more difficult. Still, the advice to improve by a bit every day it‚Äôs still valid.</p>
<p>Another reminder of this chapter is that also bad habits follow the same principle: getting a little bit worse everyday means getting <strong>a lot worse</strong> in the long run.</p>
<p>To close the first chapter, the author recommends to think about <strong>systems</strong> instead of <strong>goals</strong>, because goals are not sustainable in the long period. Also, a system is more methodic and doesn&rsquo;t change once you reach a goal.</p>
<p>The second chapter talks about reverting the way in which we set habits, from <strong>outcome-based</strong> to <strong>identity-based</strong>.</p>
<p>When thinking through outcomes, each habit serves a single goal, and after that is reached we face a sense of void and don&rsquo;t continue with the habit anymore. This happened to me while at university, as I made the habit of studying just for the exams and not for the long term goal of remembering the concepts studied.</p>
<p>James advocates instead for an internal change to drive habit-forming (identity ‚Üí process ‚Üí outcomes). By <em><strong>identifying</strong></em> with the new person one wants to become, it&rsquo;s easier to create and stick to habits. For example, I made the choice to <em>become</em> a healthier person, so I decided to start working out during the week and eating better. If the only goal was only to lose a certain amount of weight, I don&rsquo;t think I would have stuck to it for a long time.</p>
<p>The third chapter finally gives an high level overview on how to build better habits. Each habit (good or bad) follows the <strong>cue ‚Üí craving ‚Üí response ‚Üí reward</strong> step. Following this steps it&rsquo;s possible to create good habits and eliminate bad ones. James then lists the four laws of behavioural change, which he will explain throughout the book. To create a good habit, you should:</p>
<ol>
<li>Make it obvious</li>
<li>Make it attractive</li>
<li>Make it easy</li>
<li>Make it satisfying</li>
</ol>
<p>To remove bad habit, you should follow the same steps, but reversed, so:</p>
<ol>
<li>Make it invisible</li>
<li>Make it unattractive</li>
<li>Make if difficult</li>
<li>Make it unsatisfying</li>
</ol>
<h2 id="first-law-make-it-obvious">First Law: Make it obvious</h2>
<p>The first law is about creating the right environment and the right <strong>clues</strong> to attach to the habits you want to make. In particular, the first thing to do is to increase your <strong>awareness</strong> and list the different habits  that you have (both good and bad ones) ‚Üí Habits Scorecard. The scorecard allows you to be more aware of your behaviours, in order to keep or change them after.</p>
<p>After rising the awareness on the behaviours to change or add, it&rsquo;s time to make a plan! Without a simple direction on the new habit, it&rsquo;s way more difficult to stick to it. The second technique discussed related to the first law is <strong>implementation intentions</strong> ‚Üí &ldquo;I will [behaviour] at [time] in [location]&rdquo;. In addition to this, you can use <strong>habit stacking</strong>, which means identifying an existing habit you already have and attach the new habit to that (&ldquo;After I [current habit], I will [new habit]). These two methods create obvious <strong>cues</strong> for the new habit, and design a clear plan for when and where to take action.</p>
<p>After taking care of which habits to create/keep and how to plan them, it&rsquo;s time to make the cues <strong>obvious</strong>. For this, the most important factor is the environment. The author says &ldquo;Behaviour is a function of the Person in their environment&rdquo;, and this means that motivation is not enough, and most of the times is irrelevant. Architecting the right environment is then the best way to boost our habit progress. The book shows some examples, I&rsquo;ll show some which I personally use:</p>
<ul>
<li>I put a book right next to my bed to read before sleeping</li>
<li>I have my pills in the kitchen, so that I remember to take them at breakfast and dinner every day</li>
<li>I create a new journal page (on notion) for the next day in the evening and keep it open in the app, so that whenever I open it I remember to journal</li>
</ul>
<p>The same thing can be applied to our digital environment. For example, moving some apps on the first screen, and apps we still need to keep but don&rsquo;t want to use in other screens. In this way, we encourage useful apps for our habits (e.g. I keep podcasts, medium and notion on my home screen, and hide all video and social apps in a subfolder in the other screen on my phone). This also work with notifications (disabling unwanted notifications and so on).</p>
<p>The final summary of this law is explained in chapter 7. We&rsquo;ve all been said that we lack self control and need more discipline, but the fact is, we need to <strong>design</strong> our environment and behaviour to not need self-control! <strong>Resisting temptations is an ineffective strategy</strong> in the long term. To remove bad habits we need then to reduce exposure to the cue that cause them (good habit ‚Üí make it obvious, bad habit ‚Üí <strong>make it invisible</strong>).</p>
<h2 id="second-law-make-it-attractive">Second Law: Make it attractive</h2>
<p>The second law of behaviour change is <em>make it attractive</em>. We should make our good habits tempting, &ldquo;inviting&rdquo; with different strategies. Habits are a <em>dopamine-driven feedback loop</em>, meaning that we usually have different dopamine levels (dopamine isn&rsquo;t the only factor, but it&rsquo;s used to give an idea) in different habit phases (remember cue, craving, response and reward).</p>
<p>At first, dopamine is high only after the reward. While creating a habit (and always after that) dopamine tends to rise in <em>anticipation</em> of the reward (craving), then becomes lower during the response phase (if we don&rsquo;t receive the reward later) and it should rise at the reward phase.</p>
<p>We can use this insight to make a habit attractive, by using <em><strong>temptation bundling</strong></em> (basically, stacking a habit together with another more attractive habit/activity used as a reward). It can also be used with habit stacking to make a powerful strategy:</p>
<ol>
<li>After [current habit], I will [habit I need] ‚Üí stacking</li>
<li>After [habit I need], I will [habit I want]  ‚Üí temptation bundling</li>
</ol>
<p>it relies on transitiveness to associate the habit I need with what I want to do after, and relates it to the initial cue/habit.</p>
<p>Another way to make a habit more attractive is to use social pressure and imitation, which are innate in our instincts. We tend to imitate 3 groups:</p>
<ol>
<li>The <strong>close</strong> ‚Üí Surround yourself with people/culture where the behaviour you desire is the normal behaviour, and with which you already have something in common</li>
<li>The <strong>many</strong> ‚Üí We tend to follow the herd, so when changing habits means going against the group, the habit will be unattractive, while it will be attractive if it means fitting in the group</li>
<li>The <strong>powerful</strong> ‚Üí We imitate people we envy and see as powerful/better, so try to get approval and praise for your habit and it will be more attractive</li>
</ol>
<p>Finally, we associate emotions and feeling to our habits. They are the way in which our brain processes cues, and we can leverage them to control our habits. In particular, we can associate good feelings and emotions, or reduce bad emotions, associated with a good habit we want to continue, or associate bad emotions and drawbacks to bad habits we want to stop. The book does the example of changing &ldquo;have to&rdquo; with &ldquo;get to&rdquo; to make a positive impact on habits we want to take. Some personal examples:</p>
<ul>
<li>I <em>get to</em> walk and listen to programming podcasts</li>
<li>I <em>get to</em> practice guitar</li>
<li>I <em>get to</em> write about what I read and learn</li>
<li>I <em>get to</em> journal about my day</li>
</ul>
<p>In the same way, I could say &ldquo;I walk in the morning to get healthier and get more energy for the day&rdquo;, &ldquo;I get to write about what I read so that I can learn and grow&rdquo; etc..</p>
<h2 id="third-law-make-it-easy">Third Law: Make it easy</h2>
<p>The third law is <em>make it easy</em>. It means to reduce friction, imagine the minimum action needed to start the habit, and automate optimising choices to make the habit really easy to follow (or really difficult if that&rsquo;s the case).</p>
<p>The first concept to understand is that of ‚Äú<em>preparation</em> vs <em>action‚Äù</em>: preparing is useful, but can become just another form of procrastination. It feels like progress but it isn&rsquo;t. So, preparation needs to be kept at a minimum. The important thing is to act and repeat the habit, as getting the reps is the only way to make it stick (habits form based on <strong>frequency</strong>, not time!) ‚Üí How many, not how long</p>
<p>Another thing to consider is the <em>effort</em>, the energy spent on the habit. Humans act based on the <em>law of least effort. W</em>e will naturally follow the option which leads to the least amount of effort required. This can be used to our advantage in our habit making process, as we can change the environment to reduce the friction associated with a habit:</p>
<ul>
<li>Putting workout clothes in the most visible or the most useful place</li>
<li>Preparing healthy food ahead of time to have it ready when needed</li>
<li>Placing the object required to perform the habit on the table/desk, readily accessible</li>
</ul>
<p>I do the last thing (placing a book near my bed) to give my brain the right clue, and to make it easy to do (just grab the book and read it!).</p>
<p>Another technique is the <strong>two-minutes rule</strong>. There are a handful of <em>decisive moments</em> which decide what impact we&rsquo;ll deliver in a given day. In these moments we take decisions on what to do next, and we can leverage these to improve in our habit process. The two-minute rule says</p>
<blockquote>
<p>&ldquo;When you start a new habit, it should take less than two minutes&rdquo;.</p>
</blockquote>
<p>If the habits takes more, reduce the effort to the minimum viable action (e.g. exercise ‚Üí put on workout clothes, writing ‚Üí write one paragraph/sentence). This allows to master the act of <strong>showing up</strong>. After doing the first action, we can decide to continue or not, and it&rsquo;s difficult that we&rsquo;ll stop there&hellip;</p>
<p>Finally, we have <strong>automation</strong>. I&rsquo;m a big fan of automation, because that&rsquo;s what I do for a living as a software engineer. Automation is an example of <em>commitment device</em>, which is a choice made in the present which controls our actions in the future. There are a lot of one time actions which will lock in new habits (detailed in the book, e.g. buying a good mattress, reducing mails and notifications, changing environment, reduce some automatic expenses and so on). Finally, technology can come to our aid in automating stuff (e.g. automatic telematic prescriptions, automatic wage reduction for retirement, meal-delivery services, website blockers).</p>
<p>In a nutshell, the 3rd law can be summarised as:</p>
<ul>
<li>Reduce friction by defining the least-effort action for each habit</li>
<li>Tune the environment to make future actions easier</li>
<li>Automate and make good one-time decisions to boost or block habits</li>
</ul>
<h2 id="fourth-law-make-it-satisfying">Fourth Law: Make it satisfying</h2>
<p>The fourth rule is <em>make it satisfying</em>.</p>
<p>Humans have developed a lot of stuff in the last millennia. Think about breeding, farming, machines and the latest technology. Most of this developments brought a us new concept, unknown to our primate brain: that of <em>delayed reward</em>. We experience delayed reward while waiting for crops to harvest to animals growing, and in the latest 500 years we added a lot of delayed rewards of any kind.</p>
<p>However, our brain still rely on <em>instant gratification</em> to work, and we need to leverage that hardwired path in our brain, or we won&rsquo;t stick to a habit. We evaluate rewards differently through time (<em><strong>now</strong></em> is better than later).</p>
<blockquote>
<p>What is immediately rewarded gets repeated, and what is immediately punished is avoided.</p>
</blockquote>
<p>The final step to stick to a habit is then to <em>feel successful</em> after doing it. In fact, the first three laws (obvious, attractive and easy) allow us to start the new habit, while this last law allows us to repeat and stick to it!</p>
<p>In a nutshell, these are the tactics to use to obey the 4th law:</p>
<ul>
<li>Reward or punish the habit <strong>immediately after</strong> the behaviour</li>
<li><strong>Track</strong> the habit (it&rsquo;s obvious, satisfying and attractive, and can be used together with habit stacking and automation!). Also, <strong>never miss twice</strong></li>
<li>Create a <strong>habit contract</strong> and find an <strong>accountability partner</strong> (make it <em><strong>unsatisfying</strong></em>)</li>
</ul>
<h2 id="advanced-tactics">Advanced tactics</h2>
<p>Also called &ldquo;three random chapters which did not fit in the rest of the book&rdquo;.</p>
<h3 id="exploration-vs-exploitation">Exploration vs Exploitation</h3>
<p>The first &ldquo;secret&rdquo; to maximise your chances of success is to choose the right field of competition, to find a game in which the odds are in your favour. Everyone keeps saying that genetics don&rsquo;t matter, and they are right. However, they define your <em>areas of opportunity</em>.</p>
<p>In short, you should create habits aligned with your ambition and your personality, as in this way it will be easier to reach a state of <em>flow</em>.</p>
<p>Another thing to consider is that even when you don&rsquo;t have mastery over a single thing, you can <em>specialise</em> in multiple contexts and overcome the &ldquo;accident&rdquo; of bad genetics.</p>
<p>Questions to ask yourself to find a niche in which you can gain much more with a habit:</p>
<ul>
<li>What feels like fun to me, but work to others? ‚Üí not passion, but handling the <strong>pain</strong> of a task/habit</li>
<li>What makes me lose track of time? ‚Üí <strong>Flow state</strong></li>
<li>Where do I get greater returns than the average person?</li>
<li>What comes naturally to me?</li>
</ul>
<p>TL;DR; Work hard on things that come easy (<em><strong>exploit</strong>)</em>, and <em><strong>explore</strong></em> new opportunities sometimes.</p>
<h3 id="flow">Flow</h3>
<p>Regarding flow, the author explains what is called the &ldquo;Goldilocks Rule&rdquo;:</p>
<blockquote>
<p>Humans experience peak motivation when they work on tasks that are right on the edge of their current abilities.</p>
</blockquote>
<p>Neither too difficult (otherwise you&rsquo;ll quit) nor too easy (or you end up in boredom and quit too).</p>
<p>The road to mastery is full of boring moments, but you can try to create manageable challenges to grow without complacency, without making life too difficult to quit the habit. Keeping the repetition even when bored is the difference between amateur and professional!</p>
<p>I actually experience this rule in my life: when I play guitar (amateur level) I usually get bored and stop playing for long periods of time. Instead, I keep pushing while programming for work because it is my profession, and this gives me an edge over others who just try to do it without enduring it.</p>
<h3 id="review-and-feedback">Review and Feedback</h3>
<p>The last &ldquo;advanced tactics&rdquo; chapter is about review and feedback about your habits. The entire book covered creating, starting and keeping a habit. However, once a habit is fully formed our performance might decrease (a bit or much more) as we reach a plateau and don&rsquo;t improve upon it, letting small errors appear. This is ok for trivial habits, but not so much for important stuff (think getting healthy, learning and in general mastering a field).</p>
<p>We need to <strong>reflect</strong> and <strong>review</strong> to enable long-term improvements of our habits. Some techniques include <em>decision journals</em> and  <em>annual review + integrity report.</em></p>
<p>A final bit of advice is to avoid making any single aspect of your identity an overwhelming portion of who you are, and not identifying in the particular habits and things you do. A better way is to redefine yourself in a way which keeps important aspects of your identity even if your role and actions change, e.g:</p>
<ul>
<li>I&rsquo;m an athlete ‚Üí I&rsquo;m the type of person who&rsquo;s mentally tough and loves a physical challenge</li>
<li>I&rsquo;m the CEO ‚Üí I&rsquo;m the type of person who builds and creates things</li>
</ul>
<blockquote>
<p>&ldquo;The hard and stiff will be broken, the soft and supple will prevail&rdquo; cit. Lao Tzu</p>
</blockquote>
<h2 id="conclusions">Conclusions</h2>
<p><strong><strong>Atomic Habits</strong></strong> does a great job in explaining how to create and keep small habits, and why it is so important to do this. The secret to obtain results is to never stop making improvements.</p>
<p>The book was a great inspiration in how to improve through the power of habits. I really liked the part about changing the environment and automating decisions to reduce my reliance on discipline alone. I also try to make use of the book‚Äôs advice to create good habits, while I‚Äôm definitely less successful when it comes to removing bad habits üòÖ.</p>
<p>Hope you enjoyed this summary/notes post üéâ, see you next time!</p>

        ]]></content:encoded></item><item><title>A Case for Outside-In Design: Sandro Mancuso @ Tech Talks by eDreams ODIGEO</title><link>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</link><pubDate>Wed, 25 Jan 2023 22:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</guid><description>Hi üëã and welcome to a new post!
In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (here) on January 24th.
For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk ‚ÄúA Case for Outside-In Design‚Äù, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</description><media:content url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi üëã and welcome to a new post!</p>
<p>In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (<a href="https://www.eventbrite.com/e/tech-talks-by-edreams-odigeo-milan-hub-inauguration-special-edition-tickets-493515075877"  target="_blank" >here</a>) on January 24th.</p>
<p>For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk ‚ÄúA Case for Outside-In Design‚Äù, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</p>
<p>You may already have heard of ‚ÄúOutside-In Design‚Äù on this blog <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >before</a>. Sandro‚Äôs talk follows the same philosophy and extends it not only to code but to the entire business and product decisions made before coding even begin.</p>
<p><em>Disclaimer: I will share some notes/brief recap of the talk given by Sandro. It‚Äôs by no means a complete transcription and may contain my own interpretation of what was said. Go watch his past talks (e.g. <a href="https://www.youtube.com/watch?v=VSkDu5YgAh4"  target="_blank" >here</a>) for the real deal!</em></p>
<h3 id="developer-biases-and-the-insideoutside-perspective">Developer Biases and The Inside/Outside perspective</h3>
<p>The talk started with a list of biases (most of the time we call them ‚Äúpractices‚Äù) that affect software developers. They include:</p>
<ul>
<li>Structural biases (procedural, oop, functional, services, event-based)</li>
<li>Design biases (all architectural design patterns such as SOA, Actor model, Hexagonal arch, Microservices and so on..)</li>
<li>Design Direction biases (starting from the persistence, domain, UI, and lastly <strong>incremental outside-in</strong>, the topic of this talk)</li>
</ul>
<p>Most of the time we tend to work led by our biases: a backend developer will start working on the domain model and then implement the details (infrastructure, application); frontend will start working from the design of the UI down to the actual implementation. However, in this way, we end up with a discrepancy between the systems, and this leads to ugly adapter layers to adapt the API exposed by the backend and the data the frontend needs to work.</p>
<p>This behaviour extends also at a higher level, that of business and product design. Technology and product work in parallel tracks, and then need to somewhat meet at the intersection: the top of the backlog. At that moment, it‚Äôs more difficult to align the product decisions needed to create value for the company and the system design.</p>
<p>Software design should <strong>serve</strong> the business, and its value should be measured by how much it impacts the business value. Thus, we need to align the two perspectives, inside (technology) and outside (business).</p>
<p>To solve this issue, Sandro proposes a different approach, in which we start from the product and then define lower and lower level abstractions of the system, contrary to the standard inside-out design approach.</p>
<h3 id="outside-in-design">Outside-In Design</h3>
<p>The first thing to do when designing a new system or a set of features for the business is to create a birds-eye view (<strong>product box</strong>) in which we put the main features that bring value, and the main functional areas involved.</p>
<p>Then, we proceed to do <strong>Impact Mapping</strong>, in which we identify the high-level bounded contexts and architecture. Starting from the main goals of the system, we identify its actors and the different impacts they have, on the deliverables (features). Sandro showed an example using mind maps, refining the different levels (actor ‚Üí impact ‚Üí feature) on every iteration.</p>
<p>After impact mapping, with <strong>Functional Mapping,</strong> we identify the business flows, the external (and internal) users and systems and connect them, in a way similar to sequence diagrams but using bounded contexts instead of classes. It allows to decide which systems are external and which are internal, and which should become public APIs or internal services. Sandro gave some examples, one in which only one service (the catalogue) was public-facing, and another (checkout) in which all services were public and called by the frontend.</p>
<p><strong>User Interaction via Mockups</strong> is the step in which we see some UI (finally!!). Sandro does the mockups with Balsamiq, as it allows the creation of dynamic wireframes. It‚Äôs better to do them with UX experts, in order to have a basic wireframe both for the UX/UI team and the development team (by designing the APIs and the data needed by the frontend).</p>
<p>Finally, we get into the actual software design and implementation with the method we prefer (Inside-Out or Outside-In TDD for example üòè).</p>
<p>All these steps might seem long, but Sandro explained that they are actually short (e.g. product box can be done in an afternoon!) and need to be performed at different intervals (6/12 months for the highest level, then 3/4 months, monthly, 1/2 weeks and finally daily for the actual coding practices).</p>
<h3 id="thats-it">That‚Äôs it!</h3>
<p>As you can see, I just wrote a quick summary of Sandro‚Äôs talk. The meetup also included a panel with Sandro and three people from eDreams ODIGEO (the CTO Carsten Bernhard, Milan‚Äôs Hub Director Luca Pivotto and Agile Director Brett Ansley), in which they continued the argument brought by the talk and expanded with other content (e.g. how to tackle and measure technical debt, what is value and much more). I didn‚Äôt include it in this post as I didn‚Äôt take notes üòÖ.</p>
<p>Overall, the meetup was really interesting. The outside-in perspective is (as in the last meetup I attended) a great way to meet the tech side of the business (working on the nitty-gritty details and implementation) and the product side (concerned with value, customers and overall functionality of the system).</p>
<p>I think that this could be really useful in both big companies (to iterate on new features) and in startups (to design the first system in an extensible and ‚Äúgrowable‚Äù way). During the talk, Sandro mentioned a book that is on my ‚Äúto read‚Äù bookshelf, ‚Äú<a href="https://teamtopologies.com/book"  target="_blank" >Team Topologies</a>‚Äù. Employing an outside-in perspective allows in the end to define these topologies in advance, allowing the system to grow organically and without breaking everything on each iteration.</p>
<p>That‚Äôs all for today‚Äôs post! Thank you for reading (if anyone is reading this ü§î) and see you next time!</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Some other places to find Sandro‚Äôs talk:</p>
<ul>
<li><a href="https://www.codurance.com/publications/2017/10/23/outside-in-design"  target="_blank" >Blog Post</a></li>
<li>2019 <a href="https://www.youtube.com/watch?v=bvie9vl7X6A"  target="_blank" >Talk</a></li>
<li>2018 <a href="https://www.youtube.com/watch?v=rbSDGr-_UwY"  target="_blank" >Talk</a> and <a href="https://www.slideshare.net/sandromancuso/a-case-for-outsidein-design"  target="_blank" >Slides</a> (don‚Äôt know if they are the same exact version)</li>
</ul>

        ]]></content:encoded></item></channel></rss>