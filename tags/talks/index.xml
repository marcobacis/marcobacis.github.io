<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>talks on Marco Bacis</title><link>https://marcobacis.com/tags/talks/</link><description>Recent content in talks on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis 2018-2023</copyright><lastBuildDate>Fri, 03 Feb 2023 07:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/talks/index.xml" rel="self" type="application/rss+xml"/><item><title>XPUGBg January meetup: ‚ÄúeXtreme Collaborative Codebase‚Äù</title><link>https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/</link><pubDate>Fri, 03 Feb 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/</guid><description>&lt;p>Hi üëã welcome to a new post!&lt;/p>
&lt;p>Today I‚Äôm going to post a little summary of my experience at the &lt;a href="https://www.meetup.com/xpugbg/events/290690004/" target="_blank" >XPUGBg meetup&lt;/a> I attended at the end of January. This time, the talk was ‚ÄúeXtreme Collaborative Codebase‚Äù by Alessio Coser.&lt;/p>
&lt;h2 id="what-is-a-collaborative-codebase">What is a collaborative codebase?&lt;/h2>
&lt;p>Alessio started his talk with a question: what does it mean to collaborate in a codebase for you? What does it take to do it? What are the practices we can use to ‚Äúwork well‚Äù?&lt;/p>
&lt;p>For him, it all comes down to optimising the work flow by accepting continuous change. In order to be more productive it‚Äôs important to reduce the work in progress, make small changes and reduce the feedback loop.&lt;/p>
&lt;p>&lt;div class="image">
&lt;figure>
&lt;img class="img-fluid image" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Extreme_Programming.svg/500px-Extreme_Programming.svg.png" alt="XP feedback cycles" />
&lt;/figure>
&lt;/div>&lt;/p>
&lt;p>Regarding feedback, agile practices tend to work at the highest levels, that of release, iteration, acceptance and so on (as in the above picture). But what about the lower levels of feedback, down to the codebase itself? How do you ‚Äúaccelerate‚Äù the feedback loop on all levels, from code to release?&lt;/p>
&lt;p>In the talk, Alessio explains why doing trunk-based devlopment brings the best collaboration on the codebase, by improving the feedback loop, making WIP evident and allowing to ship faster and with higher quality.&lt;/p>
&lt;h2 id="what-is-trunk-based-development">What is trunk-based development?&lt;/h2>
&lt;p>Trunk-based development is a practice in which developers collaborate on the codebase in a single branch (the main/master/trunk). Instead of opening a feature branch and then do a pull/merge request to master (with the corresponding code review I hope), the developer commits directly to the main branch.&lt;/p>
&lt;p>Trunk-based development goes hand in hand with &lt;a href="https://martinfowler.com/articles/continuousIntegration.html" target="_blank" >continuous integration&lt;/a> and &lt;a href="https://martinfowler.com/bliki/ContinuousDelivery.html" target="_blank" >continuous delivery&lt;/a>. In fact, by committing to the main branch and keeping it always &lt;strong>releasable&lt;/strong>, it‚Äôs possible to deliver value to the business continuously.&lt;/p>
&lt;p>There are variations to trunk-based development. A notable one is &lt;strong>scaled&lt;/strong> trunk-based, used when the team size increases. In scaled trunk-based development, the developers work with &lt;strong>short-lived&lt;/strong> (less than 1 day) feature branches. The same practices (pair programming, TDD and XP in general) are still valid, together with the constraint to keep the main branch always releasable and deployable at any time.&lt;/p>
&lt;h2 id="advantages-of-trunk-based-development">Advantages of trunk-based development&lt;/h2>
&lt;p>In the talk, Alessio highlighted the &lt;strong>impact&lt;/strong> that trunk-based development has on the codebase and on the team/business itself.&lt;/p>
&lt;p>The first ‚Äúadvantage‚Äù is that it allows to have &lt;strong>frequent integration&lt;/strong> (better yet, &lt;strong>continuous&lt;/strong>) of all the changes in the codebase. In this way, conflicts that arise during development are immediately identified (and corrected), without waiting until the code is reviewed in a pull request.&lt;/p>
&lt;p>By making all changes on the same branch (main), there is a unique source of truth. As every change is immediately integrated and tested, the codebase is always updated, and there‚Äôs no conflict over which version of the code is the correct one (the answer is: the one on the main branch!).&lt;/p>
&lt;p>Given that the team is working on the same branch, everyone can see all the current work in progress. In addition, by not using long feature branches, and being forced to integrate with main frequently, it‚Äôs more difficult to keep multiple features in progress.&lt;/p>
&lt;p>The possibility to make small, deliverable changes forces us to &lt;strong>refactor&lt;/strong> into small steps, and not create too many changes and conflicts. Also, by doing this with a continuous review (e.g. by pairing), we have the freedom to refactor into small steps with confidence.&lt;/p>
&lt;p>Finally, trunk-based increase the &lt;strong>collaboration&lt;/strong> between team members. If what I‚Äôm working on at the moment conflicts with another developer, I‚Äôm more eager to work together to merge it, and this is done (again) immediately, and not at merge time.&lt;/p>
&lt;h2 id="a-change-of-mentality">A change of mentality&lt;/h2>
&lt;p>To work with trunk-based development properly, we need to embrace a (sometimes radical) change of mentality. The change reflects both in social and technical practices.&lt;/p>
&lt;p>From the social side, trunk-based development requires:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Teamwork&lt;/strong>, as everyone is working on the same codebase at the same time&lt;/li>
&lt;li>Constructive and frequent &lt;strong>feedback&lt;/strong>, and being open to it&lt;/li>
&lt;li>&lt;strong>Trust&lt;/strong>, in the team members and in the code itself. This can be helped with XP practices such as TDD and pairing&lt;/li>
&lt;/ul>
&lt;p>From a technical standpoint, the most important practices are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Small&lt;/strong>, incremental changes (in contrast to big, breaking changes and long parallel branches)&lt;/li>
&lt;li>Attention to &lt;strong>quality&lt;/strong> (because the main branch must always be releasable, and every commit we push could be directly deployed in production!)&lt;/li>
&lt;li>Separation between &lt;strong>build, deploy and release&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>A strong rule is that the code should always be deployable! This is the basis for frequent releases, which allows getting faster feedback from the business and the customers.&lt;/p>
&lt;h4 id="how-to-deploy-while-the-work-is-in-progress">How to deploy while the work is in progress?&lt;/h4>
&lt;p>While talking about technical practices and their impact, Alessio explained how keeping build, release and deploy separate is fundamental to a collaborative codebase. But how do we keep the code ‚Äúdeployable‚Äù even while we are currently implementing new features?&lt;/p>
&lt;p>The first way is to do &lt;strong>dark launching:&lt;/strong> release the new feature, but without exposing the new/changed API (or expose it only to a subset of users, e.g. developers and internal users).&lt;/p>
&lt;p>A second way is to use &lt;strong>branch by abstraction&lt;/strong>: put the current api under an abstraction layer, then start to implement the new functionality in another compatible class/module. While implementing the new feature, migrate the old feature clients to the new (compatible, remember!) one, and finally remove the old module. All of this should keep the system working even when the feature is not finished yet.&lt;/p>
&lt;p>The last way to not release in-progress work is to put the new feature behind feature toggles/flags. The toggles can be static or dynamic, but they should be short-lived (if used while developing and not for mere configuration) and removed when the feature has been released and is stable. Feature flags are also a way to decouple deploy and release of the features. In addition, they make WIP evident (as any feature toggle of that type represents a work-in-progress feature).&lt;/p>
&lt;h2 id="considerationsdiscussions">Considerations/Discussions&lt;/h2>
&lt;p>The characteristic I like the most in meetups is the discussion with all the participants. Alessio encouraged the audience to ask questions and express their opinions, and here are some considerations of what came out of the discussion after the talk.&lt;/p>
&lt;p>The first thing to take care of before and while doing trunk-based development is that of &lt;strong>ownership&lt;/strong>: who is the owner of the code? Trunk-based development works best with &lt;strong>cohesive&lt;/strong> teams working on a &lt;strong>product&lt;/strong>, as the code is owned by the entire team (which makes the decisions). If the code is not owned by the developer, as in some consultancy projects or in open source, then it might be better to work with other branching models (such as feature-based, git flow or github flow).&lt;/p>
&lt;p>Another consideration is that of software &lt;strong>versioning&lt;/strong>. Trunk-based development expects a continuous integration of the code, and this means that there is only one version of the code (the current one). If the product needs multiple versions, and separate maintenance of the versions (e.g. because some customers don‚Äôt want to pay for the newer version, but still expect bugfixes on the version they own), then there should be release branches in addition to the main branch.&lt;/p>
&lt;p>During the discussion, someone complained that with trunk based development changes are not evident. I agree in part with this, as using a separate branch would show the entire diff, while splitting the change in multiple commits would not show the entire feature at once. However, the point of trunk-based development is to make small changes, so the features should be separated in small stories, each with its own commit (or short lived branch). This improves the reliability of the team, allowing it to ship faster and estimate better.&lt;/p>
&lt;p>A final consideration is about &lt;strong>conflicts&lt;/strong>. While in feature branching conflicts are identified only when merging, in trunk-based all the conflicts arise during development. To keep the build releasable and stable the conflict needs to be fixed immediately, and this might seem to slow down the development of new features.&lt;/p>
&lt;p>To avoid integration headaches, it‚Äôs important to communicate with the team and avoid conflicts in the first place. Also, it&amp;rsquo;s better to catch conflicts and fix them immediately than to wait for a big bang merge. In my opinion, if there is a lot of churn/conflicts in some modules, it means that the architecture should be improved (by splitting the functionality into smaller modules with clear responsibilities).&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The conclusion of the talk was ‚Äú&lt;em>embrace change&lt;/em>‚Äù, which is the fundamental principle of eXtreme Programming. I agree with this quote, as change is inevitable in software development (and in life in general).&lt;/p>
&lt;p>I never had a collaborative codebase in the way described by Alessio (with trunk based, tdd, pairing and all the other practices), but I think that every team should strive to follow the same principles and practices.&lt;/p>
&lt;p>That‚Äôs it for today! I hope you liked this short summary. If you want to go deeper into the topic, I left down here some resources (will be updated while I discover more of them). Also, reach out &lt;a href="https://www.linkedin.com/in/alessiocoser" target="_blank" >Alessio&lt;/a> and the &lt;a href="https://meetu.ps/c/4s0GZ/zWszn/a" target="_blank" >XPUGBG&lt;/a>!&lt;/p>
&lt;h2 id="other-resources">Other Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://trunkbaseddevelopment.com/" target="_blank" >Trunk-based development&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@mattia.battiston/why-i-love-trunk-based-development-641fcf0b94a0" target="_blank" >Why I love trunk-based development&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/articles/feature-toggles.html" target="_blank" >Feature Toggles&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>A Case for Outside-In Design: Sandro Mancuso @ Tech Talks by eDreams ODIGEO</title><link>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</link><pubDate>Wed, 25 Jan 2023 22:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</guid><description>&lt;p>Hi üëã and welcome to a new post!&lt;/p>
&lt;p>In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (&lt;a href="https://www.eventbrite.com/e/tech-talks-by-edreams-odigeo-milan-hub-inauguration-special-edition-tickets-493515075877" target="_blank" >here&lt;/a>) on January 24th.&lt;/p>
&lt;p>For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk ‚ÄúA Case for Outside-In Design‚Äù, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.&lt;/p>
&lt;p>You may already have heard of ‚ÄúOutside-In Design‚Äù on this blog &lt;a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/" target="_blank" >before&lt;/a>. Sandro‚Äôs talk follows the same philosophy and extends it not only to code but to the entire business and product decisions made before coding even begin.&lt;/p>
&lt;p>&lt;em>Disclaimer: I will share some notes/brief recap of the talk given by Sandro. It‚Äôs by no means a complete transcription and may contain my own interpretation of what was said. Go watch his past talks (e.g. &lt;a href="https://www.youtube.com/watch?v=VSkDu5YgAh4" target="_blank" >here&lt;/a>) for the real deal!&lt;/em>&lt;/p>
&lt;h3 id="developer-biases-and-the-insideoutside-perspective">Developer Biases and The Inside/Outside perspective&lt;/h3>
&lt;p>The talk started with a list of biases (most of the time we call them ‚Äúpractices‚Äù) that affect software developers. They include:&lt;/p>
&lt;ul>
&lt;li>Structural biases (procedural, oop, functional, services, event-based)&lt;/li>
&lt;li>Design biases (all architectural design patterns such as SOA, Actor model, Hexagonal arch, Microservices and so on..)&lt;/li>
&lt;li>Design Direction biases (starting from the persistence, domain, UI, and lastly &lt;strong>incremental outside-in&lt;/strong>, the topic of this talk)&lt;/li>
&lt;/ul>
&lt;p>Most of the time we tend to work led by our biases: a backend developer will start working on the domain model and then implement the details (infrastructure, application); frontend will start working from the design of the UI down to the actual implementation. However, in this way, we end up with a discrepancy between the systems, and this leads to ugly adapter layers to adapt the API exposed by the backend and the data the frontend needs to work.&lt;/p>
&lt;p>This behaviour extends also at a higher level, that of business and product design. Technology and product work in parallel tracks, and then need to somewhat meet at the intersection: the top of the backlog. At that moment, it‚Äôs more difficult to align the product decisions needed to create value for the company and the system design.&lt;/p>
&lt;p>Software design should &lt;strong>serve&lt;/strong> the business, and its value should be measured by how much it impacts the business value. Thus, we need to align the two perspectives, inside (technology) and outside (business).&lt;/p>
&lt;p>To solve this issue, Sandro proposes a different approach, in which we start from the product and then define lower and lower level abstractions of the system, contrary to the standard inside-out design approach.&lt;/p>
&lt;h3 id="outside-in-design">Outside-In Design&lt;/h3>
&lt;p>The first thing to do when designing a new system or a set of features for the business is to create a birds-eye view (&lt;strong>product box&lt;/strong>) in which we put the main features that bring value, and the main functional areas involved.&lt;/p>
&lt;p>Then, we proceed to do &lt;strong>Impact Mapping&lt;/strong>, in which we identify the high-level bounded contexts and architecture. Starting from the main goals of the system, we identify its actors and the different impacts they have, on the deliverables (features). Sandro showed an example using mind maps, refining the different levels (actor ‚Üí impact ‚Üí feature) on every iteration.&lt;/p>
&lt;p>After impact mapping, with &lt;strong>Functional Mapping,&lt;/strong> we identify the business flows, the external (and internal) users and systems and connect them, in a way similar to sequence diagrams but using bounded contexts instead of classes. It allows to decide which systems are external and which are internal, and which should become public APIs or internal services. Sandro gave some examples, one in which only one service (the catalogue) was public-facing, and another (checkout) in which all services were public and called by the frontend.&lt;/p>
&lt;p>&lt;strong>User Interaction via Mockups&lt;/strong> is the step in which we see some UI (finally!!). Sandro does the mockups with Balsamiq, as it allows the creation of dynamic wireframes. It‚Äôs better to do them with UX experts, in order to have a basic wireframe both for the UX/UI team and the development team (by designing the APIs and the data needed by the frontend).&lt;/p>
&lt;p>Finally, we get into the actual software design and implementation with the method we prefer (Inside-Out or Outside-In TDD for example üòè).&lt;/p>
&lt;p>All these steps might seem long, but Sandro explained that they are actually short (e.g. product box can be done in an afternoon!) and need to be performed at different intervals (6/12 months for the highest level, then 3/4 months, monthly, 1/2 weeks and finally daily for the actual coding practices).&lt;/p>
&lt;h3 id="thats-it">That‚Äôs it!&lt;/h3>
&lt;p>As you can see, I just wrote a quick summary of Sandro‚Äôs talk. The meetup also included a panel with Sandro and three people from eDreams ODIGEO (the CTO Carsten Bernhard, Milan‚Äôs Hub Director Luca Pivotto and Agile Director Brett Ansley), in which they continued the argument brought by the talk and expanded with other content (e.g. how to tackle and measure technical debt, what is value and much more). I didn‚Äôt include it in this post as I didn‚Äôt take notes üòÖ.&lt;/p>
&lt;p>Overall, the meetup was really interesting. The outside-in perspective is (as in the last meetup I attended) a great way to meet the tech side of the business (working on the nitty-gritty details and implementation) and the product side (concerned with value, customers and overall functionality of the system).&lt;/p>
&lt;p>I think that this could be really useful in both big companies (to iterate on new features) and in startups (to design the first system in an extensible and ‚Äúgrowable‚Äù way). During the talk, Sandro mentioned a book that is on my ‚Äúto read‚Äù bookshelf, ‚Äú&lt;a href="https://teamtopologies.com/book" target="_blank" >Team Topologies&lt;/a>‚Äù. Employing an outside-in perspective allows in the end to define these topologies in advance, allowing the system to grow organically and without breaking everything on each iteration.&lt;/p>
&lt;p>That‚Äôs all for today‚Äôs post! Thank you for reading (if anyone is reading this ü§î) and see you next time!&lt;/p>
&lt;h3 id="additional-resources">Additional Resources&lt;/h3>
&lt;p>Some other places to find Sandro‚Äôs talk:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.codurance.com/publications/2017/10/23/outside-in-design" target="_blank" >Blog Post&lt;/a>&lt;/li>
&lt;li>2019 &lt;a href="https://www.youtube.com/watch?v=bvie9vl7X6A" target="_blank" >Talk&lt;/a>&lt;/li>
&lt;li>2018 &lt;a href="https://www.youtube.com/watch?v=rbSDGr-_UwY" target="_blank" >Talk&lt;/a> and &lt;a href="https://www.slideshare.net/sandromancuso/a-case-for-outsidein-design" target="_blank" >Slides&lt;/a> (don‚Äôt know if they are the same exact version)&lt;/li>
&lt;/ul></description></item><item><title>My Experience at the Italian Agile Days 2022: Talks and Reflections</title><link>https://marcobacis.com/blog/2022-italian-agile-days/</link><pubDate>Tue, 17 Jan 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-italian-agile-days/</guid><description>&lt;p>Hi üëã&lt;/p>
&lt;p>Today‚Äôs post is about my experience at the &lt;a href="https://www.agileday.it/" target="_blank" >Italian Agile Days 2022&lt;/a>, which I attended in October 2022. I know, it‚Äôs way too late to write this, but I still think that remembering the talks I watched will be useful for others üòÉ.&lt;/p>
&lt;p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.&lt;/p>
&lt;p>This year, the conference was held on the Brescia University campus. It was my first in-person conference in 3 years, and seeing live talks and talking with people with the same interests was refreshing and inspiring!&lt;/p>
&lt;p>I mostly watched technical talks about programming, but some of the ones you‚Äôll find below drift from pure programming into the realm of philosophy (and psychology), and they were the most interesting.&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;h2 id="talks">Talks&lt;/h2>
&lt;p>&lt;em>Disclaimer: most talks were in Italian. The videos are available &lt;a href="https://vimeo.com/showcase/9957525" target="_blank" >online&lt;/a>, here I‚Äôll just post a brief summary and my opinions on the talks.&lt;/em>&lt;/p>
&lt;h3 id="keynote-myth-busting-in-agile-scaling-en---nigel-thurlow">Keynote: Myth busting in agile Scaling (en) - Nigel Thurlow&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/767786361" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>Nigel has been the first ever Chief of Agile at Toyota, and while there he created ‚ÄúThe Flow System‚Äù, a flow-based approach to delivering value built on the Toyota system.&lt;/p>
&lt;p>In his keynote, he debunks myths and tries to solve the ‚Äúformat war‚Äù between agile practices. The talk is packed full of considerations and stories about agile‚Ä¶so full that I cannot summarise it here without writing everything Nigel says. Please go check it out!&lt;/p>
&lt;h3 id="event-sourcing--cqrs-a-light-introduction-en---paolo-banfi">Event Sourcing + CQRS: a light introduction (en) - Paolo Banfi&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/768885882" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>In this talk, the speaker introduces two important concepts that allow to easily change and add functionalities to our systems: event sourcing and CQRS.&lt;/p>
&lt;p>To explain them, he presents an example based on a shopping cart, showing that by just saving the current state of the system (as we usually do with databases) we lose information that could be useful to the business. By using event sourcing and CQRS strategies, we employ a more generic model that allows using these pieces of information without making the system much more complex than before.&lt;/p>
&lt;p>Paolo does a great introduction to both arguments. Even if I never used event sourcing and CQRS before, I now feel like I should use them in all my future projects!&lt;/p>
&lt;h3 id="diamo-una-chance-a-una-codebase-legacy-it---nicola-mincuzzi">Diamo una chance a una codebase legacy? (it) - Nicola Mincuzzi&lt;/h3>
&lt;p>‚ÄúLet‚Äôs give a legacy codebase a chance‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768879474" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>Working with legacy codebases is a dread. Legacy systems are unstable, and every change to their code or structure leads to bugs and unknown issues, given their lack of tests.&lt;/p>
&lt;p>In his talk, Nicola shows a project on which he worked, and describes how he ‚Äúattacked‚Äù the legacy monster by using harnesses and a lot of testing. He basically followed the advice in Michael Feather‚Äôs ‚ÄúWorking Effectively With Legacy Code&amp;quot; which was effective for real!&lt;/p>
&lt;p>Given that this was his first talk, it was great. I‚Äôm also working on a nasty legacy project, and seeing other people&amp;rsquo;s (successful) experiences is inspiring and comforting at the same time.&lt;/p>
&lt;h3 id="ive-done-tdd-wrong-all-the-time-it---luca-giuberti">I‚Äôve done TDD wrong all the time (it) - Luca Giuberti&lt;/h3>
&lt;p>&lt;a href="https://vimeo.com/768875860" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>In this talk, Luca expresses a common concern that we all think about while writing tests - Am I testing too much the implementation? Do the tests reflect the &lt;strong>what&lt;/strong> (the business need), or do they represent the &lt;strong>how&lt;/strong> (implementation)?&lt;/p>
&lt;p>Luca shows a more sustainable way to test, in a &lt;strong>coarse-grained&lt;/strong> fashion. I find this more in line with how I usually test, by testing the behaviour of multiple/larger modules and not of the single classes and methods (with a lot of mocking).&lt;/p>
&lt;p>The definition of ‚Äúunit‚Äù is quite confusing. Some of us end up testing single classes or methods in isolation, by mocking every external dependency. Luca‚Äôs talk advocates for a coarser grain, like testing multiple (cohesive) classes for their external behaviour. It might seem like integration testing, but it‚Äôs not, and I think is a more sound approach.&lt;/p>
&lt;h3 id="larte-dello-sviluppatore-it---marco-fracassi">L‚Äôarte dello sviluppatore (it) - Marco Fracassi&lt;/h3>
&lt;p>‚ÄúThe software developer art‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768873513" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>In this philosophical (and humorous) talk, Marco talks about the role of creativity (and how to get creative) in software development.&lt;/p>
&lt;p>Software developers are a creative species, despite the stereotypes that others associate with the role (and we get a huge list in the talk). Practices such as pair programming, TDD and DDD are indeed quite creative and, at the time of their definition, were revolutionary.&lt;/p>
&lt;p>Software development is a social activity in addition to technical practices, and in this regard, creativity can help us solve problems better. Marco presents a lot of ways to increase creativity personally and in the workplace (by increasing psychological safety) and what tends to stop it (ignorance, hyper-specialization, fear, vanity etc..).&lt;/p>
&lt;p>In the end, the talk was very inspiring and showed that there‚Äôs a lot of ‚Äúart‚Äù in our practice as software developers.&lt;/p>
&lt;h3 id="dal-carbone-al-software-i-sistemi-socio-tecnici-it---ferdinando-santacroce">Dal carbone al software: i sistemi socio-tecnici (it) - Ferdinando Santacroce&lt;/h3>
&lt;p>‚ÄúFrom coal to software: socio-technical systems‚Äù&lt;/p>
&lt;p>&lt;a href="https://vimeo.com/768881541" target="_blank" >Video&lt;/a>&lt;/p>
&lt;p>Agile is not just for programmers, and Ferdinando shows us why in his talk. He tells a story set in post-war England, when a technological innovation (the ‚Äúlongwall‚Äù) was introduced but didn‚Äôt improve productivity, all because of social issues.&lt;/p>
&lt;p>The researchers found out that this innovation disrupted (in a bad way) the current social organisation of the mines. From autonomous, cross-functional and trusted teams, the longwall brought hyper-specialisation, control and loss of autonomy and ownership, leading to lower productivity.&lt;/p>
&lt;p>This story serves as a reminder that all techniques and practices we see today in agile (such as lean, kanban, XP etc..) didn‚Äôt start with programming, but are way older. In addition, we cannot only think about the technical aspects of the organisation, because the social ones are way more important!&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I really enjoyed attending this conference!&lt;/p>
&lt;p>Each talk explored an argument which I didn‚Äôt know and wanted to know more about. I also got to meet new people in a community near me (Brescia is right next to Bergamo and Milan) and I also got gadgets ü§©. In addition, I bought two books from Avanscoperta: ‚ÄúCronache di Domain-Driven Design‚Äù (DDD Chronicles) and ‚ÄúDecision-Making for Software Development Teams‚Äù. I hope to read them soon!&lt;/p>
&lt;p>That‚Äôs all for today. I hope you enjoyed this short summary of my experience at IAD2022, and I hope to attend and write about next year‚Äôs conference (and some workshops? üòá).&lt;/p></description></item></channel></rss>