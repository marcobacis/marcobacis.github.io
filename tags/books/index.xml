<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>books on Marco Bacis</title><link>https://marcobacis.com/tags/books/</link><description>Recent content in books on Marco Bacis</description><language>en-uk</language><copyright>© Copyright Marco Bacis 2018-2023</copyright><lastBuildDate>Thu, 05 Oct 2023 16:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/books/index.xml" rel="self" type="application/rss+xml"/><item><title>Book Summary: Indistractable</title><link>https://marcobacis.com/blog/indistractable-book-summary/</link><pubDate>Thu, 05 Oct 2023 16:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/indistractable-book-summary/</guid><description>&lt;p>Hi 👋 welcome to a new post!&lt;/p>
&lt;p>I&amp;rsquo;m starting to enjoy writing short summaries about books I read, so here&amp;rsquo;s a new one 😛&lt;/p>
&lt;p>&lt;strong>Indistractable&lt;/strong> is a book by &lt;a href="https://www.nirandfar.com/" target="_blank" >Nir Eyal&lt;/a>, a &lt;em>behavioural engineer&lt;/em> who worked and studied the psychology of our attention and applied it to digital product and advertisements. In fact, his first book (”Hooked”) is about the design of habit-forming products (such as games, ads, apps and so on).&lt;/p>
&lt;p>I didn&amp;rsquo;t read this first book, but it&amp;rsquo;s right next on my reading list!&lt;/p>
&lt;p>If in his fist book he unveiled how products make us “distractable” and easily influenced (looking at you, Facebook and TikTok!). This book is instead the complete opposite, as Nir explains all the strategies and behaviours we can adopt to &lt;em>regain our attention&lt;/em>.&lt;/p>
&lt;h2 id="why-should-we-be-indistractable">Why should we be “indistractable”?&lt;/h2>
&lt;p>Nowadays, distractions are everywhere: TV, smartphones and social networks are just the tip of the iceberg in the ways our mind tries to distract herself. But the issue is not only technological, and it has deeper roots in our psyche.&lt;/p>
&lt;p>Distraction brings us away from what&amp;rsquo;s important: it can be studying and working, but also having meaningful relationships (do you remember the last time you “really” talked with someone, without turning your smartphone screen on?).&lt;/p>
&lt;p>We want to do the right things, but we should also learn how to avoid the &lt;em>wrong&lt;/em> ones, and distraction is one of the bad things pulling us away from our actions.&lt;/p>
&lt;p>So, being &lt;strong>indistractable&lt;/strong> can be considered a superpower, which allows us to be present and more productive, and in general better people.&lt;/p>
&lt;h2 id="how-to-become-indistractable">How to become indistractable?&lt;/h2>
&lt;p>Our actions can be pulled by two forces: distraction (moving away from what we want) and traction (moving towards our goals). To become indistractable means to follow traction! Traction and distraction are the &lt;strong>outcomes&lt;/strong>, while at the input of we have &lt;strong>triggers&lt;/strong>, either internal or external. Let&amp;rsquo;s see how to control these four elements.&lt;/p>
&lt;p>&lt;div class="image">
&lt;figure>
&lt;img class="img-fluid image" src="indistractable_model.png" alt="The “indistractable” model" />
&lt;figcaption class="caption">The “indistractable” model, ©Nir Eyal&lt;/figcaption>
&lt;/figure>
&lt;/div>&lt;/p>
&lt;h3 id="1-master-internal-triggers">1. Master internal triggers&lt;/h3>
&lt;p>This is the most important part in my opinion, and also the most difficult. We always blame people, tools, the weather, anything for our actions, but in reality the most important triggers are inside our mind. The other causes we blame instead of ourselves are called &lt;em>proximate causes&lt;/em>, as they help us deflect the responsibility to someone/something else.&lt;/p>
&lt;p>The reality is that humans do not get distracted to follow pleasure (social media, food, drugs and so on), but to &lt;strong>escape&lt;/strong> discomfort.&lt;/p>
&lt;p>For example, when I&amp;rsquo;m bored I try to avoid it by going on YouTube, or by eating. When I&amp;rsquo;m writing (right now!) I try to do anything else rather than staying calm and &lt;em>thinking&lt;/em> about what I should write. The ones I described are just superficial issues, but there can be more serious ones (depression, going through a difficult period with our family or work, etc..).&lt;/p>
&lt;p>Mastering our internal triggers means understanding and knowing the root causes of our distraction, in order to overcome them. The book spends 6 chapters on this argument, but I think it can be reduced to these steps:&lt;/p>
&lt;ul>
&lt;li>Find the root cause of your distraction (hint: it&amp;rsquo;s usually something uncomfortable you are doing or experiencing!)&lt;/li>
&lt;li>Practice mindfulness: observe and let the negative emotionand the discomfort dissolve, without judging. Write it down and pay attention to it&lt;/li>
&lt;li>Reimagine both the &lt;em>task&lt;/em> (make it fun, as explained in &lt;em>&lt;a href="https://marcobacis.com/blog/atomic-habits-book/" target="_blank" >Atomic Habits&lt;/a>&lt;/em>) and &lt;em>yourself&lt;/em> (willpower does not go away, and you can practice self-compassion when pulled away by distractions)&lt;/li>
&lt;/ul>
&lt;h3 id="2-make-time-for-traction">2. Make time for traction&lt;/h3>
&lt;p>Traction is given by the actions that draw us to what we want in our life, our &lt;em>values&lt;/em>. Distraction is instead when we are pulled away from our goals. There&amp;rsquo;s a catch: how can we say we’re distracted without knowing from &lt;em>what&lt;/em> we are pulled away from, what are our goals?&lt;/p>
&lt;p>&lt;strong>Knowing our values&lt;/strong> and goals is the first step in gaining traction.&lt;/p>
&lt;p>The second step is to actually &lt;strong>make time for it&lt;/strong>, with time-boxing. It&amp;rsquo;s simple (at least that’s how Nir explains it): take a calendar and fill the white spaces with what you want to do… This includes also actions we would think of as distractions! Remember: if I planned to watch an anime or to daydream at work, it’s expected 😇.&lt;/p>
&lt;p>I don&amp;rsquo;t really like the idea of planning every moment in my life, and it&amp;rsquo;s a very difficult thing to do. Anyway, this surely helps fighting distraction better than long-revisited todo lists.&lt;/p>
&lt;p>Values and actions can be put in three categories: “&lt;em>You&lt;/em>”, ”&lt;em>Relationships&lt;/em>” and “&lt;em>Work&lt;/em>” (which also includes other things that are not work, such as studying&lt;/p>
&lt;p>The first time to schedule is “&lt;strong>You&lt;/strong>” time. This means time for sleeping, get healthy and also mundane things like cleaning yourself 😃. Remember that planning and actually taking the time is the important thing. You do not control the outcomes of your actions, only the inputs. For example, if you want to write or learn something, start by showing up and starting, then the outcome will either come or not by itself, and not entirely in your control.&lt;/p>
&lt;p>After planning “You” time, it&amp;rsquo;s important to give time to &lt;strong>relationships&lt;/strong>, both with friends and family, and not give them the &lt;em>residual&lt;/em> time. It can be going out for dinner, see friends or make time for children.&lt;/p>
&lt;p>Finally, schedule also time for &lt;strong>work and study&lt;/strong>. Notice that work is the last priority in this plan, while in our life it’s usually the first. We work long hours and without much focus, thinking we should work even more. Instead, create a schedule (with your manager/colleagues/stakeholders) and revisit it periodically (like an agile sprint) to choose which activities have priority and require your attention. Don&amp;rsquo;t work hard, work smart (yes, it’s a cliché, but a very useful one)&lt;/p>
&lt;h3 id="3-hack-back-external-triggers">3. Hack back external triggers&lt;/h3>
&lt;p>Until now we&amp;rsquo;ve worked with with out internal triggers, and tried to regain our time and link it with our values. It&amp;rsquo;s now time to regain that time effectively, by hacking the external triggers that draw us to distraction.&lt;/p>
&lt;p>The book spends 9 chapters on the argument, but the most important question we need to ask ourselves every time we encounter a trigger is: “is the trigger serving us, or &lt;em>are we serving the trigger”&lt;/em>?&lt;/p>
&lt;p>From this we can hack &lt;em>back&lt;/em> the triggers, making them serve us. The chapters can be summarised as:&lt;/p>
&lt;ul>
&lt;li>Defend your &lt;strong>focus&lt;/strong>, and signal when you are busy and should not be disturbed (the book provides a paper red light to attach to your monitor to do it)&lt;/li>
&lt;li>Reduce your time checking (and re-checking) &lt;strong>emails&lt;/strong> by sending less emails (less people will respond), delaying your answers, timeboxing your email processing time and finally scheduling office hours to avoid long email threads&lt;/li>
&lt;li>Use &lt;strong>chats&lt;/strong> sparingly and selectively (be picky). Important communication should be slow!&lt;/li>
&lt;li>&lt;strong>Meetings&lt;/strong> should be for making decisions (not problem-solving and brainstorming), should be hard to call (ask for an agenda and a brief document before) and the people involved should be present (not in “phisically present”, but mentally) and active (no devices used to “escape” or do other work!)&lt;/li>
&lt;li>Hack back your devices
&lt;ul>
&lt;li>Remove distracting apps from your smartphone. Use the OS settings to reduce notifications to a minimum, schedule “Do Not Disturb” time and rearrange apps to make is more difficult to use the distracting (but needed) ones. You can also delete apps and use the web version (or use it just on the pc!)&lt;/li>
&lt;li>Clean your desktop and disable all notifications on your pc&lt;/li>
&lt;li>Save online articles for later and timebox your online reading time. Also, you can listen to articles while you do some less demanding task (chores, walking etc..)&lt;/li>
&lt;li>If you really cannot stop using social media, at least stop the infinite scroll of the feed with some desktop extensions. Use social media only as a tool and not an escape&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="4-prevent-distraction-with-pacts">4. Prevent distraction with pacts&lt;/h3>
&lt;p>After mastering internal and external triggers, and making time for traction, we are still missing something. The final piece of the puzzle to become indistractable is represented by &lt;strong>pacts&lt;/strong>.&lt;/p>
&lt;p>A pact is a pre-commitment, a choice done before doing the actual work, which helps in “staying in” the action, in staying indistractable. An example is that of &lt;em>Ulysses&lt;/em>, who made a pact with himself and his crew to avoid falling into the Sirens trap.&lt;/p>
&lt;p>We can make the same type of pact for our distractions!&lt;/p>
&lt;p>A note on this: pacts should be done only after managing the previous 3 indistractable strategies: internal triggers, external triggers and time for traction. Doing it before is almost useless, because we haven&amp;rsquo;t treated the causes of our distraction yet.&lt;/p>
&lt;p>Example of pacts that can be done with ourselves include:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Effort&lt;/em> pacts: increase the difficulty of unwanted behaviours (distraction). For example, blocking social networks or asking friends for accountability&lt;/li>
&lt;li>&lt;em>Price&lt;/em> pacts: put money on the line! If you don&amp;rsquo;t commit, pay for it. Price pacts are scary, and should be done only in contexts where external triggers can be managed (and without beating ourselves up if we don&amp;rsquo;t succeed)&lt;/li>
&lt;li>&lt;em>Identity&lt;/em> pacts: identify yourself as what you want to be (e.g. &lt;em>indistractable&lt;/em>) and act accordingly. Share your identity with others (social pressure!) and align behaviour with values and identity&lt;/li>
&lt;/ul>
&lt;p>I find pacts to be a perfect corollary to the other strategies. They are included in my view of “design instead of fight”. If we design ourselves and our environment to follow our goals, it&amp;rsquo;s way easier to succeed.&lt;/p>
&lt;h2 id="have-i-become-indistractable">Have I become indistractable?&lt;/h2>
&lt;p>I found this book extremely interesting. It is full of strategies and advice on how to fight our distraction and design an environment in which we can work and live with focus and concentration. It&amp;rsquo;s a great companion for other similar books (”Deep Work” by Cal Newport and “Atomic Habits” by James Clear) about productivity and attention, without falling into common stereotypes.&lt;/p>
&lt;p>In the end, I think it helped me in getting (just a little bit for now) less distractible, even if I already knew some of the strategies described. The most important thing for me is to know that most of the times, my distraction comes from within (my emotions, mood and so on) and that by finding my real goals and values I be more focused.&lt;/p>
&lt;p>This was my short summary and comment on &lt;em>Indistractable&lt;/em>. What do you think? Did you read it? If so, share your opinion and insights in the comments or on my social (or in private 😛).&lt;/p>
&lt;p>See you next time!&lt;/p></description></item><item><title>Book Summary: A Philosophy of Software Design</title><link>https://marcobacis.com/blog/philosophy-of-software-design/</link><pubDate>Sat, 10 Jun 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/philosophy-of-software-design/</guid><description>&lt;p>Hi 👋  and welcome to a new post!&lt;/p>
&lt;p>Today I’ll post a summary of a book I read at the beginning of 2023, titled “&lt;em>A Philosophy of Software Design&lt;/em>”, by &lt;em>John Ousterhout&lt;/em>. John is a professor at Stanford, where he teaches “Operating System Principles” and “Software Design Studio”.&lt;/p>
&lt;p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.&lt;/p>
&lt;p>I wrote this summary mainly for myself, to remember the concepts expressed in the book. There might be missing information and inconsistent levels of detail 😅 just a disclaimer.&lt;/p>
&lt;p>Let’s start!&lt;/p>
&lt;h2 id="its-all-about-complexity">It’s All About Complexity&lt;/h2>
&lt;p>Writing Software is one of the purest creative activities done by humans. It allows to create entire systems and world only constrained by the developers’ imagination.&lt;/p>
&lt;p>However, the greatest limitation of creating software is our ability to &lt;em>understand&lt;/em> it. Over time, complexity will inevitably increase, so we must find ways to minimise its impact. But &lt;strong>what&lt;/strong> is complexity, and how can we &lt;strong>reduce&lt;/strong> it? These are the goals of the book.&lt;/p>
&lt;blockquote>
&lt;p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.&lt;/p>
&lt;/blockquote>
&lt;p>Complexity manifests itself with symptoms:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Change Amplification&lt;/strong>: simple changes require to modify code in many different places&lt;/li>
&lt;li>&lt;strong>Cognitive Load&lt;/strong>: how much a developer needs to know to complete a task
(e.g. shorter but difficult to understand is worse than longer but easier to understand code)&lt;/li>
&lt;li>&lt;strong>Unknown Unknowns&lt;/strong> (the worst): it’s not obvious which code to modify/add to complete a task&lt;/li>
&lt;/ul>
&lt;p>But what are the causes of complexity? The book highlights two, &lt;em>dependencies&lt;/em> and &lt;em>obscurity&lt;/em>, which can be reduced by making code obvious and easy to read, by encapsulating the complexity in separate modules and in general by designing the system better (easy right? 😅).&lt;/p>
&lt;h2 id="tactical-vs-strategic-programming">Tactical vs Strategic Programming&lt;/h2>
&lt;p>To improve the quality of software, we must change out &lt;em>mindset,&lt;/em> from &lt;strong>tactical&lt;/strong> to &lt;strong>strategic&lt;/strong>.&lt;/p>
&lt;p>Tactical programming focuses only on working software. “If it works it’s ok, let’s go on the next task”. Thinking in terms of working code, and not quality and design, leads to incremental complexity in the long term. Code becomes more complex because every small complexity adds up. Refactoring is seen as a cost because it will slow down developers, so the design is never modified from the starting one.&lt;/p>
&lt;p>Strategic programming is the solution to increasing complexity. The primary goal of strategic programming is to &lt;em>produce a great design, which also happens to work&lt;/em>. It can be seen as an investment in the quality of software, which over time will avoid complexity and allow to ship features fast and lower development costs.&lt;/p>
&lt;p>Some modern software trends (such as Agile and TDD) expose to the risk of tactical programming, by proposing an iterative approach and focusing on features instead of abstractions. When working in an iterative approach it is then important to focus on &lt;strong>abstractions&lt;/strong> instead of single features/modules/methods, and outside-in design might be a possible solution (my take on the argument at least, read more &lt;a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/" target="_blank" >here&lt;/a>).&lt;/p>
&lt;h2 id="modular-design">Modular Design&lt;/h2>
&lt;h3 id="deep-modules">Deep Modules&lt;/h3>
&lt;p>The center of the book is dedicated to modular design and its main benefits. In modular design, a software system is decomposed in a set of (relatively) independent modules. The goal while designing a modular system is to minimise the dependencies between modules.&lt;/p>
&lt;p>A dependency can be formal, based on the public &lt;em>interface&lt;/em> of a module, or informal, based on the module’s &lt;em>behaviour&lt;/em> and side-effects. The book advocates for &lt;strong>deep&lt;/strong> modules, meaning modules that have a simple interface hiding powerful functionalities. This is in contrast to &lt;strong>shallow&lt;/strong> modules, with complex interfaces and simple implementations.&lt;/p>
&lt;p>An example of deep module is the Unix I/O api, which exposes simple methods (open, read, write, close) to manage a really complex underlying system (filesystems, buffers, disks and so on). Examples of shallow modules are instead pass-through methods, linked lists and in general all the classes we create which don’t hide the underlying implementation.&lt;/p>
&lt;h3 id="information-hiding">Information Hiding&lt;/h3>
&lt;p>Information hiding is the fist technique that can be used to create deep modules. It consists in encapsulating design decisions and information behind an interface which doesn’t expose it, thus hiding the underlying complexity (examples of underlying information: networking, data structures, multithreading, parsing and serialization, system and physical stuff like protocols and disks, etc..).&lt;/p>
&lt;p>The opposite of information hiding is information leakage, in which the underlying design choices and implementation “leak” from the interface. One of the causes of information leakage is &lt;strong>temporal decomposition&lt;/strong>, in which the execution order of the operation is reflected in the code structure (e.g. class to read, then to modify and finally a class to write the result… they pass the underlying structure among them, leaking it outside the actual interface). The solution is actually contrary to the current best practices, which proposed to create a lot of small classes with shallow interfaces: create slightly larger classes which encapsulate more operations (still keeping levels of abstraction separated). The same thing can be done inside classes, by using information hiding and deep (private) methods to hide implementation details.&lt;/p>
&lt;h3 id="general-purpose-modules-are-deeper">General-Purpose Modules are Deeper&lt;/h3>
&lt;p>Another consideration is to think about &lt;strong>general-purpose&lt;/strong> classes instead of special-purpose interfaces. A general-purpose interface is by definition deeper, as it must present a common (we hope simpler) interface to the users to deal with different cases. A special purpose interface is instead designed around the special case it is handling. The goal should be to design &lt;em>somewhat general-purpose&lt;/em> interfaces without over-engineering the code too early (it’s an investment, but it shouldn’t block the development and risk to be useless in the future). The book proposes three questions (”What is the simplest interface for the current use?”, “In how many situations will this method be used?”, and “Is this API easy to use for my current needs?”) to discern if the class is general purpose or just over-engineered.&lt;/p>
&lt;h3 id="different-layer-different-abstraction">Different Layer, Different Abstraction&lt;/h3>
&lt;p>Systems are usually designed as &lt;strong>layers&lt;/strong>, each with a different level of abstraction offered. When two adjacent layers offer similar abstractions, this is a red flag. Most of the times this leads to shallow modules, which don’t hide complexity and just bloat the system.&lt;/p>
&lt;p>The biggest example are pass-through methods, which just call the same method of the underlying layer. This approach doesn’t hide anything and adds complexity to the system, as it adds a similar interface without adding functionality! The book proposes three solutions:&lt;/p>
&lt;ul>
&lt;li>Expose the lower layer directly to the higher-level modules&lt;/li>
&lt;li>Redistribute functionality between classes&lt;/li>
&lt;li>Merge the two layers&lt;/li>
&lt;/ul>
&lt;p>In some cases, having duplicated interfaces is ok, such as in &lt;strong>dispatcher&lt;/strong> and interfaces with multiple implementations (such as disk drivers). In most cases it is instead harmful.&lt;/p>
&lt;p>One kind of API duplication is given by &lt;strong>decorators&lt;/strong>. A decorator has always the same interface, but different implementations which are used to extend the functionality. This might lead to an explosion in the number of decorators, each for a single operation. This represents a case of &lt;em>shallow&lt;/em> modules.&lt;/p>
&lt;p>Another form of duplication is given by &lt;strong>pass-through variables&lt;/strong>, which must be passed between multiple layers and it’s basically a leaked information. Think about configuration parameters and arguments that are used by lower level classes, but not by the higher levels. Pass-through variables add complexity because they force all the intermediate layers to be aware of their existence. The solutions for this problem are mostly ugly, so a compromise must be reached and it’s a design decision:&lt;/p>
&lt;ul>
&lt;li>Store the information in a global variable&lt;/li>
&lt;li>Use an already existing object related to the lower-level module in which to put the variable&lt;/li>
&lt;li>Introduce a &lt;em>context&lt;/em> object, which presents some of the disadvantages of global variables, but allows to have multiple instances in the same process and it’s more test-friendly&lt;/li>
&lt;/ul>
&lt;h3 id="pull-complexity-downwards">Pull Complexity Downwards&lt;/h3>
&lt;p>The goal of software design is to minimise complexity, thus it’s important to hide the complexity whenever it is possible. This is also valid for interfaces. It is better to make a more complex implementations, if that means a simpler interface for the users. This relates to the “investment mindset” explained at the beginning of the book.&lt;/p>
&lt;p>The most important lessons is to avoid exposing configuration parameters as much as possible, and if necessary, to compute reasonable defaults if that’s the case.&lt;/p>
&lt;p>Don’t take it too far however, by putting all of the code into a class or merging too many classes. Pulling down complexity:&lt;/p>
&lt;ul>
&lt;li>should simplify the interface&lt;/li>
&lt;li>should be done on functionality related to the existing one&lt;/li>
&lt;li>should result in many simplifications elsewhere in the application&lt;/li>
&lt;/ul>
&lt;h3 id="together-or-apart">Together or Apart?&lt;/h3>
&lt;p>Deciding to merge or divide functionality is a fundamental question developers face. In general, the rule is to &lt;strong>simplify&lt;/strong> the interfaces and to create &lt;em>&lt;strong>deep&lt;/strong>&lt;/em> modules and methods. Splitting or putting together code can help, but it’s full of compromises and choices.&lt;/p>
&lt;p>Subdividing may increase complexity (it creates a higher &lt;strong>number&lt;/strong> of components, additional code to manage, might lead to more dependencies and separation or duplication of cohesive functionalities. Bringing pieces of code together might help in reducing the complexity, and good indicators are:&lt;/p>
&lt;ul>
&lt;li>Shared information&lt;/li>
&lt;li>Simpler interface when merged&lt;/li>
&lt;li>Duplication of functionality&lt;/li>
&lt;/ul>
&lt;p>Splitting is instead indicated when there is a mixture of general and special purpose code in the same module (it might be better to separate the two) and when the functionalities inside the module are not related. In general, a method/module should &lt;strong>do one thing and do it completely&lt;/strong>.&lt;/p>
&lt;p>When splitting is important to still keep modules deep, while us developers have a tendency to split too much (I’m actually torn on this, given the advice from uncle bob and countless people saying to divide in minuscule, but &lt;strong>shallow&lt;/strong>, methods).&lt;/p>
&lt;p>Splitting can be done by:&lt;/p>
&lt;ul>
&lt;li>Extracting a subtask into a separate method (keeping the methods deep, remember!)&lt;/li>
&lt;li>Splitting in two separate methods → avoid conjoined methods, in which you cannot understand the methods/modules independently. also, avoid shallow methods&lt;/li>
&lt;/ul>
&lt;p>Examples of the chapter:&lt;/p>
&lt;ul>
&lt;li>Merge http reading and parsing method because they shared the http request informations&lt;/li>
&lt;li>Bring together to simplify the interface (what should be done with stream and buffers in java)&lt;/li>
&lt;li>Separate a class for logging&lt;/li>
&lt;li>Separate text-related stuff and ui operations in the editor example (general text handling vs special operations such as selection and undo)&lt;/li>
&lt;/ul>
&lt;h2 id="error-handling">Error Handling&lt;/h2>
&lt;p>Exception handling is a huge source of complexity in software systems. An exception alters the flow of the program, and must be either handled or reported to the upper layer. In addition, code that handles exceptions tends to be verbose, complex and an additional source of exceptions itself!&lt;/p>
&lt;p>Programmers tend to throw exceptions at every suspicious behaviour, but a class with a lot of exceptions is &lt;em>&lt;strong>shallow&lt;/strong>&lt;/em> and leads to further complexity. The book list 4 ways to reduce exceptions in our code.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Define errors out of existence&lt;/strong>: change the code in order to handle special cases (or avoid them) without raising exceptions&lt;/li>
&lt;li>&lt;em>Masking&lt;/em>: detecting and handling the exception at a lower level (e.g. with retries)&lt;/li>
&lt;li>&lt;em>&lt;strong>Aggregation:&lt;/strong>&lt;/em> handle many exceptions with a single piece of code at a higher level and in a more generic way&lt;/li>
&lt;li>&lt;strong>Crash/Abort&lt;/strong>: to be used only for exceptions for which there is no recovery (e.g. most out-of-memory and I/O errors)&lt;/li>
&lt;/ul>
&lt;p>The same principles can be used to handle special cases, and not just errors, in our code. Defining special cases out of existence with general-purpose code, or handling special cases in separate internal methods and classes can help create deep modules, thus reducing complexity.&lt;/p>
&lt;h2 id="commenting-code">Commenting Code&lt;/h2>
&lt;p>Comments are the most important form of documentation that developers can write: they help improve the design (if written before writing code), reduce cognitive load and remove unknown unknowns by capturing both high and low-level details that are not present in the code.&lt;/p>
&lt;p>However, programmers tends to not write (or delay writing) comments, with main excuses being that “code should be self-documenting” (leading to smaller methods and shallow modules), that they don’t have time (it doesn’t take much), that they have seen only worthless comments (that’s why it’s important to write them correctly) and that they require constant update (that’s because they are coupled to the implementation, and they shouldn’t).&lt;/p>
&lt;p>In general, comments should describe the &lt;em>&lt;strong>what&lt;/strong>&lt;/em> and &lt;strong>why&lt;/strong> of the underlying code, and not the how (implementation). They shouldn’t just repeat the code, and instead &lt;strong>add precision&lt;/strong> or provide the underlying &lt;strong>intuition&lt;/strong> and &lt;strong>reasons&lt;/strong> why the code was written in the first place (e.g. design decision, fixed bug reference, adherence to protocols and standards etc..) . An example are interface comments, which allows the user of an interface to see what it does without reading the underlying code. Implementation comments describe complex details inside the code, but they should be kept &lt;em>&lt;strong>near&lt;/strong>&lt;/em> the code they describe (e.g. not at the beginning of a method or in the interface definition). &lt;em>&lt;strong>Cross-Module&lt;/strong>&lt;/em> comments should be kept in a easily discoverable place for the developer (e.g. in a common class/file, or in extreme cases in an external doc file, even if less desirable).&lt;/p>
&lt;p>Comments can also be used as a &lt;strong>design&lt;/strong> &lt;strong>tool&lt;/strong>, by writing them before the code. In this way, the comments will reflect the high-level overview of the implementation, will be written better and force the developer to think about the design before coding. If comments are complex or describe the implementation in too much detail, then the final design will be complex and/or shallow.&lt;/p>
&lt;h2 id="consistency-and-clarity">Consistency and Clarity&lt;/h2>
&lt;p>The final advice of the book is that code should be &lt;strong>obvious&lt;/strong>, meaning that the reader should have all the information needed to understand the code and modify it. Being obvious means having a low complexity and clear interface. This can be done by working both the design and the &lt;em>consistency&lt;/em> of the code.&lt;/p>
&lt;p>Regarding consistency, it can be enforced by:&lt;/p>
&lt;ul>
&lt;li>Following conventions and enforcing a coding style (e.g. with tools such as linters and with code review)&lt;/li>
&lt;li>Giving the right &lt;strong>names&lt;/strong> (they must be precise, with a clear definition and purpose, and consistent in the entire codebase)&lt;/li>
&lt;li>Documentation (both in form of &lt;strong>comments&lt;/strong> and external documentation for conventions and overall design)&lt;/li>
&lt;/ul>
&lt;p>In general, the code shouldn’t violate the reader’s expectation, in order to work as a cognitive leverage: if the design is consistent and obvious, once the developer learns how something is done in one place, he can use that knowledge to understand other places of the codebase which use the same approach.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I really enjoyed this book. It was short (just 170 pages!), but full of insights, opinions and a ton of advice!&lt;/p>
&lt;p>Some advice contained in the book made me think about current practices. For example, short methods are a cornerstone of clean coding, but the author goes against them when they make the code “shallower”. Another controversy are the chapters on commenting code, in which the author goes against the myth of “self-documenting code”.&lt;/p>
&lt;p>I must admit that I don’t always follow the advice given by the author (for example I don’t comment the code much, and sometimes consistency is not my first concern), but from now on I’ll watch out on many of the “red flags” contained in the book.&lt;/p>
&lt;p>That’s it for today! I hope you enjoyed this summary. I might have skipped some concepts and chapters (e.g. the last one about “designing for performance”). I recommend this book for anyone interested in improving his development and design skills.&lt;/p>
&lt;h3 id="bonus">Bonus&lt;/h3>
&lt;p>PS. The book contains a list of “red flags” to keep in mind while writing or reviewing code. Each of the red flags might represent the symptom of design issues in the system.&lt;/p>
&lt;p>Here it is:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shallow Module:&lt;/strong> the interface of a class or method isn’t much simpler than its implementation&lt;/li>
&lt;li>&lt;strong>Information Leakage&lt;/strong>: a design decision is reflected in multiple modules&lt;/li>
&lt;li>&lt;strong>Temporal Decomposition&lt;/strong>: the code structure is based on the order in which operations are executed, not on information hiding&lt;/li>
&lt;li>&lt;strong>Overexposure&lt;/strong>: an API forces callers to be aware of rarely used features in order to use commonly used features&lt;/li>
&lt;li>&lt;strong>Pass-Through Method&lt;/strong>: a method does almost nothing except pass its arguments to another method with a similar signature&lt;/li>
&lt;li>&lt;strong>Repetition&lt;/strong>: a nontrivial piece of code is repeated over and over&lt;/li>
&lt;li>&lt;strong>Special-General Mixture&lt;/strong>: special-purpose code is not cleanly separated from general-purpose code&lt;/li>
&lt;li>&lt;strong>Conjoined Methods&lt;/strong>: two methods have so many dependencies that it’s hard to understand the implementation of one without understanding the implementation of the other&lt;/li>
&lt;li>&lt;strong>Comment Repeats Code:&lt;/strong> all of the information in a comment is immediately
obvious from the code next to the comment&lt;/li>
&lt;li>&lt;strong>Implementation Documentation Contaminates Interface:&lt;/strong> an interface
comment describes implementation details not needed by users of the thing
being documented&lt;/li>
&lt;li>&lt;strong>Vague Name:&lt;/strong> the name of a variable or method is so imprecise that it doesn’t
convey much useful information&lt;/li>
&lt;li>&lt;strong>Hard to Pick Name:&lt;/strong> it is difficult to come up with a precise and intuitive name
for an entity&lt;/li>
&lt;li>&lt;strong>Hard to Describe:&lt;/strong> in order to be complete, the documentation for a variable or
method must be long&lt;/li>
&lt;li>&lt;strong>Non-obvious Code:&lt;/strong> the behaviour or meaning of a piece of code cannot be
understood easily&lt;/li>
&lt;/ul></description></item><item><title>2022: A Review</title><link>https://marcobacis.com/blog/2022-a-review/</link><pubDate>Sat, 31 Dec 2022 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-a-review/</guid><description>&lt;p>Hi 👋 and welcome to a new post!&lt;/p>
&lt;p>Like every blogger out there, it’s time to write a “2022 Wrap-Up”! In this (short) post, I’ll give a recap of what happened last year, and write down my goals for 2023.&lt;/p>
&lt;p>So, let’s start!&lt;/p>
&lt;p>&lt;em>Disclaimer: This recap is mostly written by me and &lt;strong>for&lt;/strong> me. I don’t expect it to be a beautifully written and engaging piece for other people. It might get boring, you’ve been warned.&lt;/em>&lt;/p>
&lt;h2 id="work">Work&lt;/h2>
&lt;p>I didn’t do anything exceptional this year.&lt;/p>
&lt;p>What do I mean? Anyone writing on the internet brags about changing companies, getting promoted, creating new businesses and so on.&lt;/p>
&lt;p>I just… worked 😅.&lt;/p>
&lt;p>By this, I don’t mean my job has been boring, indeed! I learned a lot during this year. A few arguments I dabbled myself with include:&lt;/p>
&lt;ul>
&lt;li>REST API development with .NET 6&lt;/li>
&lt;li>A bit of frontend with React&lt;/li>
&lt;li>CI/CD pipelines for .NET and React on Bitbucket (and deploying on Azure services)&lt;/li>
&lt;li>How to manage BLE and ANT+ devices from a Unity application&lt;/li>
&lt;li>IoT C++ development on a yocto board (and how to use the CANOpen protocol to communicate with devices)&lt;/li>
&lt;/ul>
&lt;p>As you can see it’s quite diverse stuff. I didn’t do all at the same time, but given the variety of startups we support, I always need to wear many hats (even while staying an individual contributor).&lt;/p>
&lt;p>The thing I’m most proud of has been introducing CI/CD pipelines in a greenfield project. I was able to enforce testing and pull requests/review in the backend team (even without being team lead or even senior) and I hope that this will increase the project quality and stability over time.&lt;/p>
&lt;p>Also, working both on backend systems and IoT boards is very fun, as I get to see the entire system and all its components working together.&lt;/p>
&lt;h2 id="personal">Personal&lt;/h2>
&lt;h3 id="home-sweet-home">Home sweet home&lt;/h3>
&lt;p>This year I managed to buy a house and move in with my girlfriend 🏠.&lt;/p>
&lt;p>It has been quite an adventure, all because of some bureaucratic issues. The old owners didn’t actually own part of the house, so we ended up doing a three-way act… it was like living a real-life merge conflict in git 😂.&lt;/p>
&lt;p>Other than that, we didn’t have any other issues (e.g. didn’t do any work on the house itself, and already had a furnished bathroom and kitchen). We still need to buy lamps (we are living with lightbulbs hanging from the walls and ceiling) but otherwise, it’s perfect.&lt;/p>
&lt;h3 id="hybrid-work---pros-and-cons">Hybrid work - Pros and Cons&lt;/h3>
&lt;p>This year marked the 3rd year in a row in which I’ve been working remotely (for 2/3 days out of 5 a week). Some considerations (read more &lt;a href="https://marcobacis.com/blog/remote-work-opinions" >here&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pro&lt;/strong>: I was able to start exercising a bit on the work-from-home days&lt;/li>
&lt;li>&lt;strong>Pro&lt;/strong>: I got to enjoy my new house more (also, working with my cat close to me is purrfect!)&lt;/li>
&lt;li>&lt;strong>Con&lt;/strong>: As in past years, I read fewer books (as I was mostly reading them while commuting by train)&lt;/li>
&lt;/ul>
&lt;p>Overall I’m pretty satisfied with working remotely, and wish there could be more flexibility from my company. Otherwise, working in the same place as my colleagues is great most of the time. If it wasn’t for the time and cost (and distance!) of commuting, I’d be eager to work in the office most of the time.&lt;/p>
&lt;h3 id="blogging-reading-and-learning">Blogging, Reading and Learning&lt;/h3>
&lt;h3 id="blog">Blog&lt;/h3>
&lt;p>I finally managed to start blogging! Even if I just wrote two articles (and this one) on the blog and started in December, it’s still an achievement.&lt;/p>
&lt;p>I’ve always looked up to writers and creators, as they are able to channel their thoughts and creativity into something that can be enjoyed by others.&lt;/p>
&lt;p>I hope to keep writing on this blog. Right now I have no idea on how to evolve it (personal articles, book summaries, programming-related stuff etc..), but I’m sure I will find inspiration to write somewhat regularly.&lt;/p>
&lt;h3 id="reading">Reading&lt;/h3>
&lt;p>I love reading. I usually read while commuting (one of the only perks of not working remotely all the time, I just cannot concentrate the same at home) and sometimes in the evening instead of watching TV.&lt;/p>
&lt;p>Reading is a great way to disconnect from the outside world and enter new dimensions. Fiction allows living new experiences (that I could never do myself, as in fantasy stories), while non-fiction allows absorbing an entire life of work and study of the author in our brain. I usually read non-fiction and programming-related books for this reason, but also like to disconnect completely and read fiction sometimes.&lt;/p>
&lt;p>Unfortunately, I’m not used to taking notes and making summaries, so for now I’ll post the list. I hope to write some summaries next year!&lt;/p>
&lt;p>This year I read 32 books, here’s the complete list (in chronological order):&lt;/p>
&lt;ul>
&lt;li>“&lt;em>Designing Data-Intensive Applications&lt;/em>” by Martin Kleppmann&lt;/li>
&lt;li>“&lt;em>Nudge: Improving Decisions about Health, Wealth, and Happiness&lt;/em>” by Richard H. Thaler and Cass R. Sunstein&lt;/li>
&lt;li>“&lt;em>Find Your Why&lt;/em>” by Simon Sinek, David Mead and Peter Docker&lt;/li>
&lt;li>“&lt;em>A Wild Sheep Chase&lt;/em>” by Haruki Murakami&lt;/li>
&lt;li>“&lt;em>ReWork&lt;/em>” by Jason Fried and David Heinemeier Hansson&lt;/li>
&lt;li>“&lt;em>How to avoid a climate disaster&lt;/em>” by Bill Gates&lt;/li>
&lt;li>“&lt;em>The Manager’s Path&lt;/em>” by Camille Fournier&lt;/li>
&lt;li>“&lt;em>Peopleware&lt;/em>” by Tom DeMarco, Timothy Lister&lt;/li>
&lt;li>“&lt;em>The Bells of Old Tokyo&lt;/em>” by Anna Sherman&lt;/li>
&lt;li>“&lt;em>The Block&lt;/em>” by Ben Oliver&lt;/li>
&lt;li>“&lt;em>Clean Craftsmanship&lt;/em>” by Robert C. Martin&lt;/li>
&lt;li>“&lt;em>The Omnivore’s Dilemma&lt;/em>” by Michael Pollan&lt;/li>
&lt;li>“&lt;em>Accelerate&lt;/em>” by Nicole Forsgren, Jez Humble and Gene Kim&lt;/li>
&lt;li>“&lt;em>Positive Intelligence&lt;/em>” by Shirzad Chamine&lt;/li>
&lt;li>“&lt;em>Hear the wind sing&lt;/em>” by Haruki Murakami&lt;/li>
&lt;li>“&lt;em>Pinball&lt;/em>” by Haruki Murakami&lt;/li>
&lt;li>“&lt;em>No Longer Human&lt;/em>” by Osamu Dazai&lt;/li>
&lt;li>“&lt;em>Everything is f*cked: A book about hope&lt;/em>” by Mark Manson&lt;/li>
&lt;li>“&lt;em>Le Città Invisibili&lt;/em>” by Italo Calvino&lt;/li>
&lt;li>“&lt;em>School Blues&lt;/em>” by Daniel Pennac&lt;/li>
&lt;li>“&lt;em>Riconquista il tuo tempo&lt;/em>” by Andrea Giuliodori&lt;/li>
&lt;li>“&lt;em>Guns, Germs and Steel&lt;/em>” by Jared Diamond&lt;/li>
&lt;li>“&lt;em>The Courage to be Disliked&lt;/em>” by Ichiro Kishimi and Fumitake Koga&lt;/li>
&lt;li>“&lt;em>&lt;strong>Entangled Life&lt;/strong>&lt;/em>” by Merlin Sheldrake&lt;/li>
&lt;li>“&lt;em>How not to be Wrong&lt;/em>” by Jordan Ellenberg&lt;/li>
&lt;li>“&lt;em>Lessons in Stoicism&lt;/em>” by John Sellars&lt;/li>
&lt;li>“&lt;em>The Clean Coder&lt;/em>” by Robert C. Martin&lt;/li>
&lt;li>“&lt;em>Voice of the Fire&lt;/em>” by Alan Moore&lt;/li>
&lt;li>“&lt;em>Extreme Programming Explained&lt;/em>” by Kent Beck&lt;/li>
&lt;li>“&lt;em>After Dark&lt;/em>” by Haruki Murakami&lt;/li>
&lt;li>“&lt;em>Immune - A Journey in the Mysterious System That Keeps You Alive&lt;/em>” by Philipp Dettmer&lt;/li>
&lt;li>“&lt;em>A Philosophy of Software Design&lt;/em>” by John Ousterhout&lt;/li>
&lt;/ul>
&lt;p>Here are instead some books I &lt;em>didn’t&lt;/em> finish, either because I was bored reading them or I didn’t think it was the moment to read them. I might try to read them again though:&lt;/p>
&lt;ul>
&lt;li>“&lt;em>On the Road&lt;/em>” by Jack Kerouac&lt;/li>
&lt;li>“&lt;em>Invent &amp;amp; Wander&lt;/em>” by Jeff Bezos&lt;/li>
&lt;li>“&lt;em>The Obstacle is The Way&lt;/em>” by Ryan Holiday&lt;/li>
&lt;li>“&lt;em>Underground&lt;/em>” by Haruki Murakami&lt;/li>
&lt;li>“&lt;em>The 5AM Club&lt;/em>” by Robin Sharma&lt;/li>
&lt;li>“&lt;em>The Courage to be Happy&lt;/em>” by Ichiro Kishimi&lt;/li>
&lt;/ul>
&lt;h3 id="learning">Learning&lt;/h3>
&lt;p>Learning is one of my core values. I think that keeping my brain sharp and filling it with (good) stuff is the best way to improve myself and live a fuller life.&lt;/p>
&lt;p>As you have just seen from the latest section, I also love to read, so most of my learning is done through the written medium.&lt;/p>
&lt;p>In addition to reading, I also participated in a couple of conferences and meetups, mostly in the last months:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://extra.codemotion.com/conference-milan-2022/" target="_blank" >Codemotion Milan 2022&lt;/a> (online, didn’t manage to buy the tickets for the live conference..)&lt;/li>
&lt;li>&lt;a href="https://www.agileday.it/" target="_blank" >Italian Agile Day 2022&lt;/a> (my &lt;a href="https://marcobacis.com/blog/2022-italian-agile-days" >summary&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://www.meetup.com/it-IT/xpugbg/" target="_blank" >XPUG Bergamo Meetups&lt;/a>
&lt;ul>
&lt;li>“Vent’anni dopo”… la prima volta che ho letto XP eXplained&lt;/li>
&lt;li>eXtreme Programming linter: aggiusta XP quando si rompe&lt;/li>
&lt;li>Mars Rover Kata, un approccio outside-in (I wrote a &lt;a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/" >summary&lt;/a> of this)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>There’s no learning without practice. In December I started learning the Rust programming language, by following the &lt;a href="https://doc.rust-lang.org/book/" target="_blank" >book&lt;/a>. To practice using it, I started solving the 2022 Advent of Code with it (&lt;a href="https://github.com/marcobacis/adventofcode" target="_blank" >github&lt;/a>). I haven’t finished all the challenges yet (I’m stuck on the infamous 16th day 😅) but I think AoC is a great way to experiment and learn and I’ll continue with it even after the holidays.&lt;/p>
&lt;h2 id="new-year-resolutions">New year resolutions&lt;/h2>
&lt;p>2022 has been a great year. I wasn’t able to fulfil all my goals (for example, I definitely didn’t lose 10 kg of weight…) but it was a fun and nice adventure.&lt;/p>
&lt;p>I’m not used to making new year&amp;rsquo;s resolutions, as I usually set a goal whenever it comes to my mind. This time I’ll try to list some main topics and goals for next year.&lt;/p>
&lt;h3 id="1-learn-in-public">1. Learn in public&lt;/h3>
&lt;p>I think that “learn in public” summarizes quite well my main goal for next year.&lt;/p>
&lt;p>The term has been created by swix (&lt;a href="https://www.swyx.io/learn-in-public/" target="_blank" >here&lt;/a>) and it basically means to create a habit of learning and creating content out of it. For example, while learning a new programming language, you might write a blog post or tutorial explaining the language features you are learning, or create videos and podcasts about new concepts you just read about. It also means reaching other people interested in the same thing you are learning (making courses, speaking at conferences, reaching people with questions.. and so on).&lt;/p>
&lt;p>So, in 2023 my main goal will be to share what I learn. I might do it by writing here, creating github repos (as I already did with Advent Of Code, but I might do it even with basic Rust stuff) or on other channels. Mostly programming-related stuff, but I may also write some book summaries or conference recaps.&lt;/p>
&lt;h3 id="2-improve-as-a-backend-developer">2. Improve as a Backend developer&lt;/h3>
&lt;p>I’ve been working as a Software Engineer for more than 3 years today. I’m still at the beginning of my career but have tried different technologies and domains (e.g. Industrial Robotics and Computer Vision, IoT platforms, Cloud Services, Desktop applications, Games and so on).&lt;/p>
&lt;p>I now think it’s time to concentrate on a single aspect of software engineering, which is backend and systems programming (with a bit of DevOps).&lt;/p>
&lt;p>Since university I’ve been fascinated by distributed systems and large-scale applications, so 2023 will be dedicated to improving my knowledge and practice on backend technologies and architectures.&lt;/p>
&lt;p>Obviously being a “T-shaped” developer is my final goal, so I won’t disregard other fields (such as frontend, in which I definitely suck).&lt;/p>
&lt;h3 id="3-attend-more-meetups-and-conferences">3. Attend more Meetups and Conferences&lt;/h3>
&lt;p>In the last months, I was able to participate in a couple of conferences and meetups, and I really liked it 😁. It allows me to get an updated overview of entire fields/domains and to meet new people.&lt;/p>
&lt;p>Next year the goal is quite simple: participate in more (live) conferences! I already accepted to go to an “un-conference” in march with some XPUGBg people. As for other conferences, I’ll see which ones are programmed at the beginning of the year (next week) and plan accordingly.&lt;/p>
&lt;p>I don’t plan to propose any talk anywhere as I feel I’m still not experienced enough, but just attending will be ok, it’s still an adventure.&lt;/p>
&lt;h3 id="4-take-care-of-my-body-and-mind">4. Take care of my Body and Mind&lt;/h3>
&lt;p>Even if I put this goal at the end of the list, it surrounds the other three and is actually the basis to improve in all the rest. My goal for this year is to take care of my health and my mind.&lt;/p>
&lt;p>I already started doing a bit of exercise at home, and next year I will continue to do so. In addition, I’ll think more about nutrition and what I put inside my body.&lt;/p>
&lt;p>Finally, improving my “mental” nutrition is essential (and is also covered by the previous goals). Learning new stuff (not only programming-related) is the best way to keep my brain exercised and healthy. Also, I hope to improve my concentration by removing bad habits (such as too much youtube surfing) and introducing new good ones (meditation and deep work).&lt;/p>
&lt;h2 id="see-you-next-year">See you next year!&lt;/h2>
&lt;p>This was a brief recap of what I think about 2022. See you in 2023!! 🎉&lt;/p></description></item></channel></rss>