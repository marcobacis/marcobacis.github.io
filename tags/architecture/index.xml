<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>architecture on Marco Bacis</title><link>https://marcobacis.com/tags/architecture/</link><description>Recent content in architecture on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis 2018-2024</copyright><lastBuildDate>Fri, 03 Nov 2023 21:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>My Experience at SoCraTes 2023</title><link>https://marcobacis.com/blog/socrates-2023/</link><pubDate>Fri, 03 Nov 2023 21:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/socrates-2023/</guid><description>&lt;p>Hi! üëã Welcome to a new post.&lt;/p>
&lt;p>On October 19-21, I attended the SoCraTes (un)conference in Rimini. With over 90 people, we gathered to talk about software crafting, testing, and all related (and unrelated) stuff üòõ.&lt;/p>
&lt;p>The event was fantastic! I met a lot of new people, gained insights into my current and future learning, and had some interesting (and crazy) discussions (such as discovering the niche of custom keyboards and firmware ü§©)!!!&lt;/p>
&lt;p>In this post, I&amp;rsquo;m going to give a brief summary of what an unconference is and the sessions I attended during the event.&lt;/p></description><enclosure url="https://marcobacis.com/blog/socrates-2023/chiara_barbagianni_session_hube17f1ed59bd558c780429d37ae77d65_50982_480x480_fit_q75_bgffffff_box.jpeg" length="25658" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/socrates-2023/chiara_barbagianni_session_hube17f1ed59bd558c780429d37ae77d65_50982_480x480_fit_q75_bgffffff_box.jpeg" width="361" height="480" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/socrates-2023/chiara_barbagianni_session_hube17f1ed59bd558c780429d37ae77d65_50982_480x480_fit_q75_bgffffff_box.jpeg" width="361" height="480"/></media:content><content:encoded><![CDATA[
        <p>Hi! üëã Welcome to a new post.</p>
<p>On October 19-21, I attended the SoCraTes (un)conference in Rimini. With over 90 people, we gathered to talk about software crafting, testing, and all related (and unrelated) stuff üòõ.</p>
<p>The event was fantastic! I met a lot of new people, gained insights into my current and future learning, and had some interesting (and crazy) discussions (such as discovering the niche of custom keyboards and firmware ü§©)!!!</p>
<p>In this post, I&rsquo;m going to give a brief summary of what an unconference is and the sessions I attended during the event.</p>
<p>Enjoy!</p>
<h2 id="what-is-an-open-space">What is an Open Space?</h2>
<p>SoCraTes is a unique event because of its interesting format, called Open Space (or Unconference).</p>
<p>In a standard conference, everything is decided up-front: there is a call-for-papers, speakers and the agenda are decided beforehand, there are frontal sessions and workshops, etc. Basically, the attendees just need to come and watch what&rsquo;s offered by the conference organizing committee.</p>
<p>On the contrary, in an Open Space, the format, agenda, and topics discussed are decided by the participants during the event itself. This choice comes from the observation that, during a conference, the most inspiring and interesting stuff happens during coffee breaks and in the common areas. So why don&rsquo;t we transform the entire event into a big coffee break?</p>
<p>On every day of the Open Space, the participants gather to propose and decide the daily agenda: everyone can propose a talk, workshop, discussion, or any other type of activity (even a walking discussion on the beach üòé or a party game). After the proposals, it&rsquo;s time for the <strong>marketplace</strong>: everyone can ask the session organizer to move the session (to a different time and location) or to change/expand the topic. The important thing is that only the one who proposed the session can change it!</p>
<p>After the marketplace has ended and the agenda is ready, the unconference can start. During the event, there is only one rule to follow, called the &ldquo;rule of two feet&rdquo;:</p>
<blockquote>
<p>If you are not contributing or adding value to the session, you can move elsewhere freely.</p>
</blockquote>
<p>This rule is not confined to the pre-defined sessions. Participants can move between sessions, stay in common areas, or look for other people to start impromptu activities! That&rsquo;s the beauty of the open space format.</p>
<p>Given that they can freely move during the event, participants usually divide into two categories:</p>
<ul>
<li>Butterflies: they like to move a lot and cross-pollinate the discussions.</li>
<li>Bumblebees: they stay in the same room for the entire duration of the session, bringing stability and continuity to the discussions.</li>
</ul>
<p>Also, the rule of two feet generates four principles:</p>
<ul>
<li>Whoever comes is the right people.</li>
<li>Whenever it starts is the right time.</li>
<li>Whatever happens is the only thing that could happen.</li>
<li>When it&rsquo;s over, it&rsquo;s over.</li>
</ul>
<p>The rule of two feet and the four principles above allow the participants to express themselves in many ways and encourage collaboration and open discussions throughout the event. That&rsquo;s what brought me to attend it!</p>
<h2 id="my-experience-at-socrates-it-2023">My experience at SoCraTes-IT 2023</h2>
<p>Here&rsquo;s a brief summary of my experience at SoCraTes 2023. I didn&rsquo;t take many notes and pictures, so most of the descriptions below might be incomplete or plain wrong. This is more of a journaling exercise for me.</p>
<p>Given this disclaimer, if you find any errors, don&rsquo;t hesitate to contact me (or open an issue/PR on my website <a href="https://github.com/marcobacis/marcobacis.github.io"  target="_blank" >repository</a> on GitHub üòõ).</p>
<p>Enjoy!</p>
<h3 id="thursday">Thursday</h3>
<p>The first day was just for networking and getting to know the other participants. I arrived at the hotel in the afternoon, and then we had a happy hour, dinner, and a brief &ldquo;ice-breaker&rdquo; game.</p>
<p>We divided into groups, and each group had to introduce itself with a given description. My group had to decide if &ldquo;casual Friday&rdquo; was still a thing in the 2020s. We named our group &ldquo;Eat My Shorts&rdquo; and gave a short presentation on it. However, there was no interaction or any &ldquo;theatrical&rdquo; performance, and only one of us spoke, while other groups put on a show and moved around a lot. A reminder for next time: have more interaction between group members (try to talk üòÖ) and make the presentation funnier!!</p>
<p>After the ice breaker, I went to my room early because I hadn&rsquo;t been feeling well since the morning and needed to recharge for the next days.</p>
<h3 id="friday">Friday</h3>
<p>Friday was the first day of the Unconference!</p>
<p>We met in the hotel hall to have the first ‚Äúmarketplace‚Äù. Everyone interested/inspired attached a post-it with his/her session proposal. Then, we decided the rooms and time for each session.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><div class="image">
  <figure>
    
    
        <img class="img-fluid image" src="https://marcobacis.com/blog/socrates-2023/day1panel1.jpeg" title="" alt=""/>
    

    
  </figure>
</div></td>
<td><div class="image">
  <figure>
    
    
        <img class="img-fluid image" src="https://marcobacis.com/blog/socrates-2023/day1panel2.jpeg" title="" alt=""/>
    

    
  </figure>
</div></td>
</tr>
</tbody>
</table>
<p>Here‚Äôs a brief description on the sessions I was able to participate (even for a few minutes):</p>
<p><strong>Game AI and Montecarlo Tree Search - <a href="https://www.linkedin.com/in/matteovaccari/"  target="_blank" >Matteo Vaccari</a></strong></p>
<p>In this session, Matteo taught us what a Monte Carlo search is and how it is useful for searching in very large decision trees. A perfect example of this was the game &ldquo;Commands&amp;Colors&rdquo; with some parts of the game having a million branch factor!</p>
<p>This was a preliminary test for his talk, which he gave a few days later at Codemotion. I wasn&rsquo;t able to see his entire session at SoCraTes, but I watched his talk at Codemotion and it was great!</p>
<p>For more information (and slides/code), visit <a href="https://matteo.vaccari.name/"  target="_blank" >Matteo&rsquo;s website</a>.</p>
<p><strong>The Programmer‚Äôs Brain - <a href="https://www.linkedin.com/in/mrctst/"  target="_blank" >Marco Testa</a></strong></p>
<p>In this session, Marco presented what he learned reading the book ‚Äú<a href="https://www.manning.com/books/the-programmers-brain"  target="_blank" >The Programmer‚Äôs Brain</a>‚Äù by Felienne Hermans.</p>
<p>The main concept we discussed was <strong>cognitive load</strong> and ways in which it affects software developers. The book provides many concepts and ways to reduce this cognitive load and make the code we develop easier to understand and remember. Many of the techniques have already been discussed in other books (e.g. clean code), but here they were related to cognitive load and all of its aspects.</p>
<p>The session was really interesting. Having attended a course on memory techniques some years ago I already knew some of the concepts presented, although not applied to software development.</p>
<p><strong>Stop fighting useless battles: automate code style, architecture compliance and refactoring - <a href="https://www.linkedin.com/in/robfrank/"  target="_blank" >Roberto Franchini</a></strong></p>
<p>Roberto gave this talk at the <a href="https://www.agilemovement.it/workingsoftware/"  target="_blank" >Working Software Conference</a> in June. I didn&rsquo;t see it at that time, but fortunately, he gave it again at SoCraTes! His talk was about ways to automate boring tasks that are quite important to keep a codebase clean among team members.</p>
<p>In particular, he presented:</p>
<ul>
<li><a href="https://pre-commit.com/"  target="_blank" >pre-commit</a>: a tool to boost commit hooks and CI pipelines, with various tasks and plugins from the community. He uses it to check certain rules, such as passwords and keys, fixing line endings, and more.</li>
<li><a href="https://www.archunit.org/"  target="_blank" >ArchUnit</a>: a tool to unit-test your architecture. It can be used to enforce separation between modules, check that the code doesn&rsquo;t import certain packages, and generally standardize and test the code architecture.</li>
<li><a href="https://docs.openrewrite.org/"  target="_blank" >OpenRewrite</a>: allows for large-scale code refactoring, such as framework/API migrations, code cleanup, and other community-driven code transformations.</li>
</ul>
<p>I didn&rsquo;t know about any of these tools, so it was a very inspiring talk!</p>
<p><strong>Discussion on Trunk-Based Development - <a href="https://www.linkedin.com/in/fabio-fortini/"  target="_blank" >Fabio Fortini</a></strong></p>
<p>After lunch, while everyone was feeling sleepy, Fabio ignited our fighting spirit by presenting a controversial argument: should we use trunk-based development in our projects?</p>
<p>He showed us a presentation he had given to his team in 2021 to convince them of the pros (without having used it before), and then gave his opinion after having done it for a few months.</p>
<p>The discussion was filled with arguments from both parties, and essentially Fabio stopped talking and (unintentionally) handed the stage over to the group.</p>
<p>It was an interesting discussion nonetheless: in the end, trunk-based development can be used as a teaching tool to help the team learn to work with small releases and continuously integrate into the main branch. Afterward, or if the team is already mature enough, small, frequently integrated branches can also be used (and are actually compatible with the trunk-based definition!).</p>
<p><strong>The Training Crafter - To read or not to read? - <a href="https://www.linkedin.com/in/chiarabarbagianni/"  target="_blank" >Chiara Barbagianni</a></strong></p>
<p>The topic of the session was learning. Should we learn by reading or by doing, and can the two worlds work together?</p>
<p>Chiara gave a free-flowing presentation to our small group, starting with a survey and then writing on a whiteboard (and a lot of post-it notes) to decide how to merge the two opposing views.</p>
<p>She divided the board into 4 quadrants along 2 axes:</p>
<ul>
<li>Practice (doing something practical, or reading about it?)</li>
<li>Taste (developing a taste for what you are learning, or doing it just for the money?)</li>
</ul>
<p>At the end, Chiara presented how she&rsquo;s doing it in the <a href="https://handbook.agilelab.it/BookClub.html"  target="_blank" >Agile Lab Book Club</a>: instead of mandating all members to read a given chapter every time, the format is more generic. Every two weeks, the club curators propose a topic: members can explore it in any way (the recommended book, videos, blogs, anything) and post their learnings on a shared board. At the end of the two-week period, they share what they learned in a short training session.</p>
<p>I loved this session! The way it was kept was fantastic, and we were immersed in Chiara&rsquo;s mind throughout the entire duration of the discussion. That&rsquo;s exactly what I expected from an unconference.</p>
<p><div class="image">
  <figure>
    
    
        <img class="img-fluid image" src="https://marcobacis.com/blog/socrates-2023/chiara_barbagianni_session.jpeg" title="The output of the session" alt="The output of the session"/>
    

    
    <figcaption class="caption">The output of the session</figcaption>
    
  </figure>
</div></p>
<p><strong>Monads for the Rest of us (in C#)  - <a href="https://www.linkedin.com/in/arialdomartini/"  target="_blank" >Arialdo Martini</a></strong></p>
<p>Even after studying it at the university, I still find it difficult to understand most functional programming concepts. But thanks to Arialdo, now I can understand it a bit more.</p>
<p>In his session, he started to implement monads (the most difficult concept in FP to me) in plain C#. Starting from function composition, passing through functors and implementing the IO monad, he tried to explain to the folks that we are how functional programming concepts map to an object oriented language.</p>
<p>His session was based on a series of posts <a href="https://arialdomartini.github.io/monads-for-the-rest-of-us"  target="_blank" >on his website</a>, that I will definitely try to follow to learn all there is about monads!</p>
<p><strong>Friday evening special: Oggetti a Teatro‚Äù (Objects on Stage) - <a href="https://www.linkedin.com/in/mrctst/"  target="_blank" >Marco Testa</a></strong></p>
<p>Unlike many conferences, the party didn‚Äôt finish after dinner. Instead, there were 2 parallel sessions. One was a NIX installation party at the pub, while the other was a high-class evening at the theatre.</p>
<p>Marco wrote and gave life to a set of characters (I still remember the <em>Duke of Client</em>, the <em>Count of Receiver</em>, and <em>Invoker the spy</em>!) that together and with their actions formed the perfect description of the Command Pattern. He basically wrote the script of a design pattern, highlighting the behaviour of the different component and their scope. Also, the story was pretty engaging!</p>
<p>Even if short, the <em>opera</em> was well received by the public, and I think it would be a great way to explain design patterns in a memorable way.</p>
<h3 id="saturday">Saturday</h3>
<p>Second day of Unconference. We started immediately with the session proposals and marketplace, as there was less time than Friday (the event finished at 17).</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><div class="image">
  <figure>
    
    
        <img class="img-fluid image" src="https://marcobacis.com/blog/socrates-2023/day2panel1.jpeg" title="" alt=""/>
    

    
  </figure>
</div></td>
<td><div class="image">
  <figure>
    
    
        <img class="img-fluid image" src="https://marcobacis.com/blog/socrates-2023/day2panel2.jpeg" title="" alt=""/>
    

    
  </figure>
</div></td>
</tr>
</tbody>
</table>
<p><strong><del>Coping</del>/Coding with Product - <a href="https://www.linkedin.com/in/brando/"  target="_blank" >Alberto Brandolini</a></strong></p>
<p>In this session, Alberto continued the discussion started on friday (which unfortunately I didn‚Äôt attend‚Ä¶) on how developers can work together with the product/business side without headaches or creating ‚Äúdirty‚Äù code.</p>
<p>He started by re-defining technical debt (which he deemed a wrong analogy) with its opposite, <strong>Design Integrity</strong>: ‚Äúhow much the current codebase fits its purpose‚Äù or how much the code is ready for the next change.</p>
<p>He went on explaining how product side is based on ‚Äúexperiments‚Äù, as the roadmap is not as clearly defined as we developers would like the code to be. How can we make the two ends meet? Our work as technical people is to work on ‚Äúsafe bets‚Äù from a good design to another good design, without reducing the design integrity.</p>
<p>The group went on a discussion on changes of which I didn‚Äôt take note, so writing it here would be useless.</p>
<p>In the end, the core idea is that developers should work together with product to define different ‚Äúpurposes‚Äù (either core or not to the business) and isolate these choices in distinct bounded contexts and components, to reduce the possible damage given by continuous product experiments.</p>
<p>This is not a set process, but can evolve based on the product (e.g. a context might get split in multiple services, or multiple services merged because they follow the same purpose‚Ä¶).</p>
<p>Fortunately for us, Alberto wrote a <a href="https://medium.com/@ziobrando/from-technical-debt-to-design-integrity-48e7056b6776"  target="_blank" >post</a> in which he explains these concepts in a much cleaner way than me üòÖ</p>
<p><strong>Refactoring with CQRS (without events) - <a href="https://www.linkedin.com/in/lucagiovenzana/"  target="_blank" >Luca Giovenzana</a></strong></p>
<p>Luca showed how they refactored the backend for their startup (<a href="https://golee.it/"  target="_blank" >golee</a>) using CQRS, but without using event sourcing as everyone doing CQRS is doing right now. Basically, the team at golee migrated some functionality to the new, greenfield codebase which was used as <em>write model</em>, while keeping the old (legacy) code as <em>read model</em> and as a backup, by writing to it using a hook.</p>
<p>By keeping the system simple (no events and event sourcing) they were able to keep both systems running, without impacting on their ability to extend it and improving performances.</p>
<p>His session was a nice look at how to take tradeoffs, which are essential when running a startup!</p>
<p><strong>Create a Macropad for fun!! - <a href="https://www.linkedin.com/in/gianni-bombelli/"  target="_blank" >Gianni Bombelli</a></strong></p>
<p>During the breaks and dinners on thursday and friday I was introduced to the world of custom keyboards. It‚Äôs a world full of crazy people talking about layouts, layers and keys. When Gianni put a post-it named ‚ÄúCreate a macropad for FUN!‚Äù I couldn‚Äôt resist.</p>
<p>In his session, he showed us his ‚Äúhobby‚Äù project, a custom mechanical macropad to help him during training sessions, in which he uses a graphics tablet and might need some ready-to-use shortcuts (e.g. to delete the latest line drawn, to open an application, to use git).</p>
<p>His session was a deep-dive in how to build a custom keyboard, from the PCB up to the customisation with QMK and a bit of C programming. Now I really want a custom macropad!! I‚Äôll wait for the ‚ÄúBomboPad‚Äù to enter the market üòõ</p>
<p><strong>Orthogonality of TDD, SOLID, FP - <a href="https://www.linkedin.com/in/matteobaglini/"  target="_blank" >Matteo Baglini</a></strong></p>
<p>In his session, Matteo showed us how TDD, SOLID principles and Functional Programming are related. He implemented the password validator kata, doing small steps by following TDD and doing it in a functional way.</p>
<p>I came into the session while it was already started so I lost most of the context. Fortunately, Matteo shared the <a href="https://github.com/matteobaglini/orthogonality-socrates-it-2023"  target="_blank" >repo</a> containing the kata implementation, with every small step of the red-green-refactor process explained in separate commits! A great way to visualize TDD in action.</p>
<p><strong>PKMS/Note Taking - <a href="https://www.linkedin.com/in/jagasantagostino/"  target="_blank" >Jaga Santagostino</a></strong></p>
<p>The final session I attended was an open discussion about Obsidian and Personal Knowledge Management Systems (PKMS) in general.</p>
<p>Jaga showed us the many features in Obsidian and tried to compare it with another famous PKMS application, Notion.</p>
<p>While presenting, other participants asked questions and gave their opinions. For example I learned about another tool, called logseq, which is quite similar to obsidian.</p>
<p>In the end I gave obsidian a try. I actually used it to take notes during the unconference, and to take notes at the Codemotion conference the week later. I now found out how to share my notes with git, so from now on I‚Äôll try to use it instead of Notion! It‚Äôs local-first paradigm is very useful when working offline, and the backlinks and graph view are really interesting and allow to link ideas together. Also, is definitely faster than notion üòÖ.</p>
<p>Thanks Jaga for this discovery!</p>
<h2 id="the-end">The End!</h2>
<p>SoCraTes was a great event! I met new people, learned a lot and had fun, the perfect combination    for a conference.</p>
<p>I came home with a lot of new concepts, tools and inspiration, and I cannot wait for the next event like this (which will be the <a href="https://www.agileday.it/"  target="_blank" >2023 Agile Day</a> Unconference, on Nov. 17 üòõ).</p>
<p>As always, thanks for all the participants, to the sponsors, organizer and everyone involved. The most meaningful connections happen in a free and creative environment, and that‚Äôs exactly what SoCraTes is.</p>
<p>Thanks for reading this long and boring summary, I hope to have shown (even a bit) all I saw and felt during the event. If you find anything to correct (e.g. about your session, about my grammar, or if I forgot something) just contact me via mail or linkedin, or open an issue on this website repository on github.</p>
<p>As always, see you next time!</p>
      ]]></content:encoded></item><item><title>Book Summary: A Philosophy of Software Design</title><link>https://marcobacis.com/blog/philosophy-of-software-design/</link><pubDate>Sat, 10 Jun 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/philosophy-of-software-design/</guid><description>&lt;p>Hi üëã¬† and welcome to a new post!&lt;/p>
&lt;p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú&lt;em>A Philosophy of Software Design&lt;/em>‚Äù, by &lt;em>John Ousterhout&lt;/em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.&lt;/p>
&lt;p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.&lt;/p></description><enclosure url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" length="53548" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <p>Hi üëã¬† and welcome to a new post!</p>
<p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú<em>A Philosophy of Software Design</em>‚Äù, by <em>John Ousterhout</em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.</p>
<p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.</p>
<p>I wrote this summary mainly for myself, to remember the concepts expressed in the book. There might be missing information and inconsistent levels of detail üòÖ¬†just a disclaimer.</p>
<p>Let‚Äôs start!</p>
<h2 id="its-all-about-complexity">It‚Äôs All About Complexity</h2>
<p>Writing Software is one of the purest creative activities done by humans. It allows to create entire systems and world only constrained by the developers‚Äô imagination.</p>
<p>However, the greatest limitation of creating software is our ability to <em>understand</em> it. Over time, complexity will inevitably increase, so we must find ways to minimise its impact. But <strong>what</strong> is complexity, and how can we <strong>reduce</strong> it? These are the goals of the book.</p>
<blockquote>
<p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.</p>
</blockquote>
<p>Complexity manifests itself with symptoms:</p>
<ul>
<li><strong>Change Amplification</strong>: simple changes require to modify code in many different places</li>
<li><strong>Cognitive Load</strong>: how much a developer needs to know to complete a task
(e.g. shorter but difficult to understand is worse than longer but easier to understand code)</li>
<li><strong>Unknown Unknowns</strong> (the worst): it‚Äôs not obvious which code to modify/add to complete a task</li>
</ul>
<p>But what are the causes of complexity? The book highlights two, <em>dependencies</em> and <em>obscurity</em>, which can be reduced by making code obvious and easy to read, by encapsulating the complexity in separate modules and in general by designing the system better (easy right? üòÖ).</p>
<h2 id="tactical-vs-strategic-programming">Tactical vs Strategic Programming</h2>
<p>To improve the quality of software, we must change out <em>mindset,</em> from <strong>tactical</strong> to <strong>strategic</strong>.</p>
<p>Tactical programming focuses only on working software. ‚ÄúIf it works it‚Äôs ok, let‚Äôs go on the next task‚Äù. Thinking in terms of working code, and not quality and design, leads to incremental complexity in the long term. Code becomes more complex because every small complexity adds up. Refactoring is seen as a cost because it will slow down developers, so the design is never modified from the starting one.</p>
<p>Strategic programming is the solution to increasing complexity. The primary goal of strategic programming is to <em>produce a great design, which also happens to work</em>. It can be seen as an investment in the quality of software, which over time will avoid complexity and allow to ship features fast and lower development costs.</p>
<p>Some modern software trends (such as Agile and TDD) expose to the risk of tactical programming, by proposing an iterative approach and focusing on features instead of abstractions. When working in an iterative approach it is then important to focus on <strong>abstractions</strong> instead of single features/modules/methods, and outside-in design might be a possible solution (my take on the argument at least, read more <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >here</a>).</p>
<h2 id="modular-design">Modular Design</h2>
<h3 id="deep-modules">Deep Modules</h3>
<p>The center of the book is dedicated to modular design and its main benefits. In modular design, a software system is decomposed in a set of (relatively) independent modules. The goal while designing a modular system is to minimise the dependencies between modules.</p>
<p>A dependency can be formal, based on the public <em>interface</em> of a module, or informal, based on the module‚Äôs <em>behaviour</em> and side-effects. The book advocates for <strong>deep</strong> modules, meaning modules that have a simple interface hiding powerful functionalities. This is in contrast to <strong>shallow</strong> modules, with complex interfaces and simple implementations.</p>
<p>An example of deep module is the Unix I/O api, which exposes simple methods (open, read, write, close) to manage a really complex underlying system (filesystems, buffers, disks and so on). Examples of shallow modules are instead pass-through methods, linked lists and in general all the classes we create which don‚Äôt hide the underlying implementation.</p>
<h3 id="information-hiding">Information Hiding</h3>
<p>Information hiding is the fist technique that can be used to create deep modules. It consists in encapsulating design decisions and information behind an interface which doesn‚Äôt expose it, thus hiding the underlying complexity (examples of underlying information: networking, data structures, multithreading, parsing and serialization, system and physical stuff like protocols and disks, etc..).</p>
<p>The opposite of information hiding is information leakage, in which the underlying design choices and implementation  ‚Äúleak‚Äù from the interface. One of the causes of information leakage is <strong>temporal decomposition</strong>, in which the execution order of the operation is reflected in the code structure (e.g. class to read, then to modify and finally a class to write the result‚Ä¶ they pass the underlying structure among them, leaking it outside the actual interface). The solution is actually contrary to the current best practices, which proposed to create a lot of small classes with shallow interfaces: create slightly larger classes which encapsulate more operations (still keeping levels of abstraction separated). The same thing can be done inside classes, by using information hiding and deep (private) methods to hide implementation details.</p>
<h3 id="general-purpose-modules-are-deeper">General-Purpose Modules are Deeper</h3>
<p>Another consideration is to think about <strong>general-purpose</strong> classes instead of special-purpose interfaces. A general-purpose interface is by definition deeper, as it must present a common (we hope simpler) interface to the users to deal with different cases. A special purpose interface is instead designed around the special case it is handling. The goal should be to design <em>somewhat general-purpose</em> interfaces without over-engineering the code too early (it‚Äôs an investment, but it shouldn‚Äôt block the development and risk to be useless in the future). The book proposes three questions (‚ÄùWhat is the simplest interface for the current use?‚Äù, ‚ÄúIn how many situations will this method be used?‚Äù, and ‚ÄúIs this API easy to use for my current needs?‚Äù) to discern if the class is general purpose or just over-engineered.</p>
<h3 id="different-layer-different-abstraction">Different Layer, Different Abstraction</h3>
<p>Systems are usually designed as <strong>layers</strong>, each with a different level of abstraction offered. When two adjacent layers offer similar abstractions, this is a red flag. Most of the times this leads to shallow modules, which don‚Äôt hide complexity and just bloat the system.</p>
<p>The biggest example are pass-through methods, which just call the same method of the underlying layer. This approach doesn‚Äôt hide anything and adds complexity to the system, as it adds a similar interface without adding functionality! The book proposes three solutions:</p>
<ul>
<li>Expose the lower layer directly to the higher-level modules</li>
<li>Redistribute functionality between classes</li>
<li>Merge the two layers</li>
</ul>
<p>In some cases, having duplicated interfaces is ok, such as in <strong>dispatcher</strong> and interfaces with multiple implementations (such as disk drivers). In most cases it is instead harmful.</p>
<p>One kind of API duplication is given by <strong>decorators</strong>. A decorator has always the same interface, but different implementations which are used to extend the functionality. This might lead to an explosion in the number of decorators, each for a single operation. This represents a case of <em>shallow</em> modules.</p>
<p>Another form of duplication is given by <strong>pass-through variables</strong>, which must be passed between multiple layers and it‚Äôs basically a leaked information. Think about configuration parameters and arguments that are used by lower level classes, but not by the higher levels. Pass-through variables add complexity because they force all the intermediate layers to be aware of their existence. The solutions for this problem are mostly ugly, so a compromise must be reached and it‚Äôs a design decision:</p>
<ul>
<li>Store the information in a global variable</li>
<li>Use an already existing object related to the lower-level module in which to put the variable</li>
<li>Introduce a <em>context</em> object, which presents some of the disadvantages of global variables, but allows to have multiple instances in the same process and it‚Äôs more test-friendly</li>
</ul>
<h3 id="pull-complexity-downwards">Pull Complexity Downwards</h3>
<p>The goal of software design is to minimise complexity, thus it‚Äôs important to hide the complexity whenever it is possible. This is also valid for interfaces. It is better to make a more complex implementations, if that means a simpler interface for the users. This relates to the ‚Äúinvestment mindset‚Äù explained at the beginning of the book.</p>
<p>The most important lessons is to avoid exposing configuration parameters as much as possible, and if necessary, to compute reasonable defaults if that‚Äôs the case.</p>
<p>Don‚Äôt take it too far however, by putting all of the code into a class or merging too many classes. Pulling down complexity:</p>
<ul>
<li>should simplify the interface</li>
<li>should be done on functionality related to the existing one</li>
<li>should result in many simplifications elsewhere in the application</li>
</ul>
<h3 id="together-or-apart">Together or Apart?</h3>
<p>Deciding to merge or divide functionality is a fundamental question developers face. In general, the rule is to <strong>simplify</strong> the interfaces and to create <em><strong>deep</strong></em> modules and methods. Splitting or putting together code can help, but it‚Äôs full of compromises and choices.</p>
<p>Subdividing may increase complexity (it creates a higher <strong>number</strong> of components, additional code to manage, might lead to more dependencies and separation or duplication of cohesive functionalities. Bringing pieces of code together might help in reducing the complexity, and good indicators are:</p>
<ul>
<li>Shared information</li>
<li>Simpler interface when merged</li>
<li>Duplication of functionality</li>
</ul>
<p>Splitting is instead indicated when there is a mixture of general and special purpose code in the same module (it might be better to separate the two) and when the functionalities inside the module are not related. In general, a method/module should <strong>do one thing and do it completely</strong>.</p>
<p>When splitting is important to still keep modules deep, while us developers have a tendency to split too much (I‚Äôm actually torn on this, given the advice from uncle bob and countless people saying to divide in minuscule, but <strong>shallow</strong>, methods).</p>
<p>Splitting can be done by:</p>
<ul>
<li>Extracting a subtask into a separate method (keeping the methods deep, remember!)</li>
<li>Splitting in two separate methods ‚Üí avoid conjoined methods, in which you cannot understand the methods/modules independently. also, avoid shallow methods</li>
</ul>
<p>Examples of the chapter:</p>
<ul>
<li>Merge http reading and parsing method because they shared the http request informations</li>
<li>Bring together to simplify the interface (what should be done with stream and buffers in java)</li>
<li>Separate a class for logging</li>
<li>Separate text-related stuff and ui operations in the editor example (general text handling vs special operations such as selection and undo)</li>
</ul>
<h2 id="error-handling">Error Handling</h2>
<p>Exception handling is a huge source of complexity in software systems. An exception alters the flow of the program, and must be either handled or reported to the upper layer. In addition, code that handles exceptions tends to be verbose, complex and an additional source of exceptions itself!</p>
<p>Programmers tend to throw exceptions at every suspicious behaviour, but a class with a lot of exceptions is <em><strong>shallow</strong></em> and leads to further complexity. The book list 4 ways to reduce exceptions in our code.</p>
<ul>
<li><strong>Define errors out of existence</strong>: change the code in order to handle special cases (or avoid them) without raising exceptions</li>
<li><em>Masking</em>: detecting and handling the exception at a lower level (e.g. with retries)</li>
<li><em><strong>Aggregation:</strong></em> handle many exceptions with a single piece of code at a higher level and in a more generic way</li>
<li><strong>Crash/Abort</strong>: to be used only for exceptions for which there is no recovery (e.g. most out-of-memory and I/O errors)</li>
</ul>
<p>The same principles can be used to handle special cases, and not just errors, in our code. Defining special cases out of existence with general-purpose code, or handling special cases in separate internal methods and classes can help create deep modules, thus reducing complexity.</p>
<h2 id="commenting-code">Commenting Code</h2>
<p>Comments are the most important form of documentation that developers can write: they help improve the design (if written before writing code), reduce cognitive load and remove unknown unknowns by capturing both high and low-level details that are not present in the code.</p>
<p>However, programmers tends to not write (or delay writing) comments, with main excuses being that ‚Äúcode should be self-documenting‚Äù (leading to smaller methods and shallow modules), that they don‚Äôt have time (it doesn‚Äôt take much), that they have seen only worthless comments (that‚Äôs why it‚Äôs important to write them correctly) and that they require constant update (that‚Äôs because they are coupled to the implementation, and they shouldn‚Äôt).</p>
<p>In general, comments should describe the <em><strong>what</strong></em> and <strong>why</strong> of the underlying code, and not the how (implementation). They shouldn‚Äôt just repeat the code, and instead <strong>add precision</strong> or provide the underlying <strong>intuition</strong> and <strong>reasons</strong> why the code was written in the first place (e.g. design decision, fixed bug reference, adherence to protocols and standards etc..) . An example are interface comments, which allows the user of an interface to see what it does without reading the underlying code. Implementation comments describe complex details inside the code, but they should be kept <em><strong>near</strong></em> the code they describe (e.g. not at the beginning of a method or in the interface definition). <em><strong>Cross-Module</strong></em> comments should be kept in a easily discoverable place for the developer (e.g. in a common class/file, or in extreme cases in an external doc file, even if less desirable).</p>
<p>Comments can also be used as a <strong>design</strong> <strong>tool</strong>, by writing them before the code. In this way, the comments will reflect the high-level overview of the implementation, will be written better and force the developer to think about the design before coding. If comments are complex or describe the implementation in too much detail, then the final design will be complex and/or shallow.</p>
<h2 id="consistency-and-clarity">Consistency and Clarity</h2>
<p>The final advice of the book is that code should be <strong>obvious</strong>, meaning that the reader should have all the information needed to understand the code and modify it. Being obvious means having a low complexity and clear interface. This can be done by working both the design and the <em>consistency</em> of the code.</p>
<p>Regarding consistency, it can be enforced by:</p>
<ul>
<li>Following conventions and enforcing a coding style (e.g. with tools such as linters and with code review)</li>
<li>Giving the right <strong>names</strong> (they must be precise, with a clear definition and purpose, and consistent in the entire codebase)</li>
<li>Documentation (both in form of <strong>comments</strong> and external documentation for conventions and overall design)</li>
</ul>
<p>In general, the code shouldn‚Äôt violate the reader‚Äôs expectation, in order to work as a cognitive leverage: if the design is consistent and obvious, once the developer learns how something is done in one place, he can use that knowledge to understand other places of the codebase which use the same approach.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed this book. It was short (just 170 pages!), but full of insights, opinions and a ton of advice!</p>
<p>Some advice contained in the book made me think about current practices. For example, short methods are a cornerstone of clean coding, but the author goes against them when they make the code ‚Äúshallower‚Äù. Another controversy are the chapters on commenting code, in which the author goes against the myth of ‚Äúself-documenting code‚Äù.</p>
<p>I must admit that I don‚Äôt always follow the advice given by the author (for example I don‚Äôt comment the code much, and sometimes consistency is not my first concern), but from now on I‚Äôll watch out on many of the ‚Äúred flags‚Äù contained in the book.</p>
<p>That‚Äôs it for today! I hope you enjoyed this summary. I might have skipped some concepts and chapters (e.g. the last one about ‚Äúdesigning for performance‚Äù). I recommend this book for anyone interested in improving his development and design skills.</p>
<h3 id="bonus">Bonus</h3>
<p>PS. The book contains a list of ‚Äúred flags‚Äù to keep in mind while writing or reviewing code. Each of the red flags might represent the symptom of design issues in the system.</p>
<p>Here it is:</p>
<ul>
<li><strong>Shallow Module:</strong> the interface of a class or method isn‚Äôt much simpler than its implementation</li>
<li><strong>Information Leakage</strong>: a design decision is reflected in multiple modules</li>
<li><strong>Temporal Decomposition</strong>: the code structure is based on the order in which operations are executed, not on information hiding</li>
<li><strong>Overexposure</strong>: an API forces callers to be aware of rarely used features in order to use commonly used features</li>
<li><strong>Pass-Through Method</strong>: a method does almost nothing except pass its arguments to another method with a similar signature</li>
<li><strong>Repetition</strong>: a nontrivial piece of code is repeated over and over</li>
<li><strong>Special-General Mixture</strong>: special-purpose code is not cleanly separated from general-purpose code</li>
<li><strong>Conjoined Methods</strong>: two methods have so many dependencies that it‚Äôs hard to understand the implementation of one without understanding the implementation of the other</li>
<li><strong>Comment Repeats Code:</strong> all of the information in a comment is immediately
obvious from the code next to the comment</li>
<li><strong>Implementation Documentation Contaminates Interface:</strong> an interface
comment describes implementation details not needed by users of the thing
being documented</li>
<li><strong>Vague Name:</strong> the name of a variable or method is so imprecise that it doesn‚Äôt
convey much useful information</li>
<li><strong>Hard to Pick Name:</strong> it is difficult to come up with a precise and intuitive name
for an entity</li>
<li><strong>Hard to Describe:</strong> in order to be complete, the documentation for a variable or
method must be long</li>
<li><strong>Non-obvious Code:</strong> the behaviour or meaning of a piece of code cannot be
understood easily</li>
</ul>
      ]]></content:encoded></item><item><title>XPUGBg March Meetup: ‚ÄúThe Actor Model (and why an XP programmer should know it)‚Äú</title><link>https://marcobacis.com/blog/2023-actor-model-meetup/</link><pubDate>Sat, 01 Apr 2023 08:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2023-actor-model-meetup/</guid><description>Hi üëã welcome!
This post is a short summary (with personal notes and opinions here and there) of the XPUGBg (Bergamo‚Äôs eXtreme Programming User Group) meetup I attended in March.
Actually, it‚Äôs just a bunch of notes and ideas connected together by my imagination and opinions üòÇ (as I already did here and here).
This month&amp;rsquo;s talk was titled ‚ÄúThe Actor Model and why an XP programmer should know it‚Äù by Emanuele DelBono.</description><enclosure url="https://marcobacis.com/blog/2023-actor-model-meetup/cover_hu4935255b628ef439cc0d6e19f8d876d5_16010_480x480_fit_q75_bgffffff_box_2.jpg" length="16122" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/2023-actor-model-meetup/cover_hu4935255b628ef439cc0d6e19f8d876d5_16010_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="270" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2023-actor-model-meetup/cover_hu4935255b628ef439cc0d6e19f8d876d5_16010_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="270"/></media:content><content:encoded><![CDATA[
        <p>Hi üëã welcome!</p>
<p>This post is a short summary (with personal notes and opinions here and there) of the XPUGBg (Bergamo‚Äôs eXtreme Programming User Group) meetup I attended in March.</p>
<p>Actually, it‚Äôs just a bunch of notes and ideas connected together by my imagination and opinions üòÇ (as I already did <a href="http://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >here</a> and <a href="http://marcobacis.com/blog/2023-jan-xp-codebase-meetup/"  target="_blank" >here</a>).</p>
<p>This month&rsquo;s talk was titled ‚Äú<em>The Actor Model and why an XP programmer should know it</em>‚Äù by Emanuele DelBono.</p>
<p>Emanuele is a Software Architect and Developer at <a href="https://codiceplastico.com/"  target="_blank" >Codice Plastico</a>, a software house near Brescia. He has a lot of experience and he‚Äôs always interested in experimenting with new paradigms and technologies, and right now he‚Äôs working with Elixir (the language he used during the talk).</p>
<p>Let‚Äôs start!</p>
<h2 id="the-actor-model">The Actor Model</h2>
<p>The Actor Model is a programming paradigm for concurrent and parallel computations. In this model, all computation is divided into different components called Actors.</p>
<p>An <strong>Actor</strong> is an individual unit of computation with its private state. A single actor by itself cannot do much but must work in a system of multiple, <strong>independent</strong> actors.</p>
<p>Multiple actors together can be used to perform any computation, but only if they communicate! This is done by assigning a unique <strong>address</strong> to each one and using messages. Each actor can receive and send messages from/to others.</p>
<p>One key difference between the Actor Model and any other event/message-based system is that an actor can process only <strong>one message at a time</strong>. This is a big constraint imposed by the model, but it makes the actor‚Äôs computation model simple to reason about. By processing one message at a time, it basically eliminates any chance of data race inside the single unit. In addition, it makes the code easily testable (send a message and check the output message and created actors; that‚Äôs it!).</p>
<p>The final action that an actor can do, apart from receiving and sending messages, is to create other actors.</p>
<p>The model just described is really similar to standard OOP. In fact, it fits perfectly with the definition given by Alan Kay, which is of multiple independent objects communicating with messages.</p>
<h3 id="pros-cons-and-use-cases">Pros, Cons, and Use Cases</h3>
<p>So, how can this paradigm be useful to us developers?</p>
<p>The first advantage of the Actor Model is the strong <strong>decoupling</strong> and <strong>isolation</strong> of state between different Actors. The Actors can only communicate using messages, so no one can access an Actor‚Äôs individual state.</p>
<p>Another pro of Actors is their extreme scalability. Depending on the Actor‚Äôs granularity (the size of each actor), there might be hundreds or even thousands of Actors at the same time in the system. Being decoupled and isolated among themselves, it‚Äôs possible to distribute the computation and the state among multiple nodes easily. This is also helped by frameworks, which handle the redistribution of Actors in the cluster automatically.</p>
<p>Finally, the model helps in reducing the cognitive load of the developer. By processing only one message at a time and communicating only through messages, the developer doesn‚Äôt need to think about nasty side effects or multi-object state changes. There might be a steeper learning curve at the beginning, as always when creating distributed systems, but the model helps in making it easier in the long run.</p>
<h3 id="actor-model-implementations">Actor Model Implementations</h3>
<p>After describing the actor model in theory, Emanuele showed us different languages that implement this paradigm. Some of the technologies are Erlang, Elixir, Akka (a framework used in the JVM and .NET ecosystems), Swift, and Pony.</p>
<p>One of the first languages to use a similar paradigm to the Actor Model is Erlang. Erlang was created in the 90s at Ericsson, and at the beginning, it was used to manage their telecommunications infrastructure (telephone switches). The main requirements it served were to allow concurrent computation, allow hot-reloading of components, and robust failure management.</p>
<p>Erlang supports all these scenarios by implementing a paradigm very similar to the Actor Model. The only differences are in the messaging order (incoming messages are ordered, while the Actor Model doesn‚Äôt require it) and the absence of exception management.</p>
<p>This last characteristic is known as ‚Äúlet it fail‚Äù: when an actor has an error, we don‚Äôt throw an exception, but we just let it crash and create a new one. The mechanism is a precursor to the current cloud paradigm, in which small individual components can crash and be recreated immediately (think of k8s and docker containers).</p>
<p>Elixir is the successor of Erlang, as it runs on the same virtual machine (BEAM), implements the actor model in the Erlang way, and is also functional. Emanuele used it for the demo.</p>
<h3 id="demo-pizza-ordering-api-with-actors">Demo: Pizza ordering API with Actors</h3>
<p>Emanuele used Elixir to show us a small demo of an actor-based web service for a pizza delivery service.</p>
<p>The service was pretty simple, with a web API for managing the basket, time slots, and orders from the customer and the pizzeria sides.</p>
<p>Some considerations about the demo and the model in general:</p>
<ul>
<li>Elixir is functional, so the internal actor state is managed with immutable and pure functions (similar to reducers)</li>
<li>We can create a lot of actors!! The demo created an actor for each user (for the basket), for each time slot (and there can be thousands of them in a year) and for each created order. They almost felt as standard objects, but all kept at runtime</li>
<li>Some actors (like the ones managing the basket) didn‚Äôt save the state in persistent storage. This was an architectural choice made based on the use case (if a basket actor fails, we just lose the current basket, nothing special)</li>
<li>Elixir allows both synchronous and asynchronous sending of messages and to respond to messages (e.g., to return errors to clients in the http endpoints)</li>
</ul>
<h3 id="conclusions">Conclusions</h3>
<p>The meetup was really interesting. I already knew about the Actor Model (I studied a bit of Scala while in university), but this talk was a refresher on the concepts and actually showed a production-like example of how working with Actors feels.</p>
<p>I think the Actor Model paved the way for current technologies (microservices and containers) and that its philosophy is hidden in many current languages, so it‚Äôs an important paradigm to study. Also, it‚Äôs a great way to learn to divide a system into decoupled components, which fits well with other architectural practices (Domain-Driven Design, Event Sourcing, CQRS, and many other buzzwords) and with good software in general.</p>
<p>That‚Äôs it for today. I hope my short summary of Emanuele‚Äôs talk intrigued you, and that right now you‚Äôll go watch his other talk (link right below here) and start learning the Actor Model!</p>
<p>As always, thanks to the <a href="https://www.meetup.com/it-IT/xpugbg/"  target="_blank" >XPUGBg</a> and to <a href="https://www.linkedin.com/in/emanueledb/"  target="_blank" >Emanuele</a> for the great meetup (and the pub after that üòâ).</p>
<p>See you next time!</p>
<h3 id="resources">Resources</h3>
<ul>
<li>Another <a href="https://blog.codiceplastico.com/events/avanscoperta-introduzione-actor-model"  target="_blank" >talk</a> given by Emanuele</li>
<li>The <a href="https://www.amazon.it/Cronache-Domain-Driven-esperienze-progetti-raccontati/dp/8894255697/"  target="_blank" >Cronache di Domain-Driven Design</a> book has a chapter by Emanuele on using DDD and Actors in a real-life scenario (which inspired the Talk and Demo üòõ)</li>
</ul>

      ]]></content:encoded></item><item><title>A Case for Outside-In Design: Sandro Mancuso @ Tech Talks by eDreams ODIGEO</title><link>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</link><pubDate>Wed, 25 Jan 2023 22:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</guid><description>Hi üëã and welcome to a new post!
In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (here) on January 24th.
For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk ‚ÄúA Case for Outside-In Design‚Äù, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</description><enclosure url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" length="22981" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343"/></media:content><content:encoded><![CDATA[
        <p>Hi üëã and welcome to a new post!</p>
<p>In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (<a href="https://www.eventbrite.com/e/tech-talks-by-edreams-odigeo-milan-hub-inauguration-special-edition-tickets-493515075877"  target="_blank" >here</a>) on January 24th.</p>
<p>For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk ‚ÄúA Case for Outside-In Design‚Äù, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</p>
<p>You may already have heard of ‚ÄúOutside-In Design‚Äù on this blog <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >before</a>. Sandro‚Äôs talk follows the same philosophy and extends it not only to code but to the entire business and product decisions made before coding even begin.</p>
<p><em>Disclaimer: I will share some notes/brief recap of the talk given by Sandro. It‚Äôs by no means a complete transcription and may contain my own interpretation of what was said. Go watch his past talks (e.g. <a href="https://www.youtube.com/watch?v=VSkDu5YgAh4"  target="_blank" >here</a>) for the real deal!</em></p>
<h3 id="developer-biases-and-the-insideoutside-perspective">Developer Biases and The Inside/Outside perspective</h3>
<p>The talk started with a list of biases (most of the time we call them ‚Äúpractices‚Äù) that affect software developers. They include:</p>
<ul>
<li>Structural biases (procedural, oop, functional, services, event-based)</li>
<li>Design biases (all architectural design patterns such as SOA, Actor model, Hexagonal arch, Microservices and so on..)</li>
<li>Design Direction biases (starting from the persistence, domain, UI, and lastly <strong>incremental outside-in</strong>, the topic of this talk)</li>
</ul>
<p>Most of the time we tend to work led by our biases: a backend developer will start working on the domain model and then implement the details (infrastructure, application); frontend will start working from the design of the UI down to the actual implementation. However, in this way, we end up with a discrepancy between the systems, and this leads to ugly adapter layers to adapt the API exposed by the backend and the data the frontend needs to work.</p>
<p>This behaviour extends also at a higher level, that of business and product design. Technology and product work in parallel tracks, and then need to somewhat meet at the intersection: the top of the backlog. At that moment, it‚Äôs more difficult to align the product decisions needed to create value for the company and the system design.</p>
<p>Software design should <strong>serve</strong> the business, and its value should be measured by how much it impacts the business value. Thus, we need to align the two perspectives, inside (technology) and outside (business).</p>
<p>To solve this issue, Sandro proposes a different approach, in which we start from the product and then define lower and lower level abstractions of the system, contrary to the standard inside-out design approach.</p>
<h3 id="outside-in-design">Outside-In Design</h3>
<p>The first thing to do when designing a new system or a set of features for the business is to create a birds-eye view (<strong>product box</strong>) in which we put the main features that bring value, and the main functional areas involved.</p>
<p>Then, we proceed to do <strong>Impact Mapping</strong>, in which we identify the high-level bounded contexts and architecture. Starting from the main goals of the system, we identify its actors and the different impacts they have, on the deliverables (features). Sandro showed an example using mind maps, refining the different levels (actor ‚Üí impact ‚Üí feature) on every iteration.</p>
<p>After impact mapping, with <strong>Functional Mapping,</strong> we identify the business flows, the external (and internal) users and systems and connect them, in a way similar to sequence diagrams but using bounded contexts instead of classes. It allows to decide which systems are external and which are internal, and which should become public APIs or internal services. Sandro gave some examples, one in which only one service (the catalogue) was public-facing, and another (checkout) in which all services were public and called by the frontend.</p>
<p><strong>User Interaction via Mockups</strong> is the step in which we see some UI (finally!!). Sandro does the mockups with Balsamiq, as it allows the creation of dynamic wireframes. It‚Äôs better to do them with UX experts, in order to have a basic wireframe both for the UX/UI team and the development team (by designing the APIs and the data needed by the frontend).</p>
<p>Finally, we get into the actual software design and implementation with the method we prefer (Inside-Out or Outside-In TDD for example üòè).</p>
<p>All these steps might seem long, but Sandro explained that they are actually short (e.g. product box can be done in an afternoon!) and need to be performed at different intervals (6/12 months for the highest level, then 3/4 months, monthly, 1/2 weeks and finally daily for the actual coding practices).</p>
<h3 id="thats-it">That‚Äôs it!</h3>
<p>As you can see, I just wrote a quick summary of Sandro‚Äôs talk. The meetup also included a panel with Sandro and three people from eDreams ODIGEO (the CTO Carsten Bernhard, Milan‚Äôs Hub Director Luca Pivotto and Agile Director Brett Ansley), in which they continued the argument brought by the talk and expanded with other content (e.g. how to tackle and measure technical debt, what is value and much more). I didn‚Äôt include it in this post as I didn‚Äôt take notes üòÖ.</p>
<p>Overall, the meetup was really interesting. The outside-in perspective is (as in the last meetup I attended) a great way to meet the tech side of the business (working on the nitty-gritty details and implementation) and the product side (concerned with value, customers and overall functionality of the system).</p>
<p>I think that this could be really useful in both big companies (to iterate on new features) and in startups (to design the first system in an extensible and ‚Äúgrowable‚Äù way). During the talk, Sandro mentioned a book that is on my ‚Äúto read‚Äù bookshelf, ‚Äú<a href="https://teamtopologies.com/book"  target="_blank" >Team Topologies</a>‚Äù. Employing an outside-in perspective allows in the end to define these topologies in advance, allowing the system to grow organically and without breaking everything on each iteration.</p>
<p>That‚Äôs all for today‚Äôs post! Thank you for reading (if anyone is reading this ü§î) and see you next time!</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Some other places to find Sandro‚Äôs talk:</p>
<ul>
<li><a href="https://www.codurance.com/publications/2017/10/23/outside-in-design"  target="_blank" >Blog Post</a></li>
<li>2019 <a href="https://www.youtube.com/watch?v=bvie9vl7X6A"  target="_blank" >Talk</a></li>
<li>2018 <a href="https://www.youtube.com/watch?v=rbSDGr-_UwY"  target="_blank" >Talk</a> and <a href="https://www.slideshare.net/sandromancuso/a-case-for-outsidein-design"  target="_blank" >Slides</a> (don‚Äôt know if they are the same exact version)</li>
</ul>

      ]]></content:encoded></item><item><title>My Experience at the Italian Agile Days 2022: Talks and Reflections</title><link>https://marcobacis.com/blog/2022-italian-agile-days/</link><pubDate>Tue, 17 Jan 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-italian-agile-days/</guid><description>Hi üëã
Today‚Äôs post is about my experience at the Italian Agile Days 2022, which I attended in October 2022. I know, it‚Äôs way too late to write this, but I still think that remembering the talks I watched will be useful for others üòÉ.
The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.</description><enclosure url="https://marcobacis.com/blog/2022-italian-agile-days/iad_cover_hu25a5bab0b89b2c4e8dc57f781a061ed2_67698_480x480_fit_q75_bgffffff_box_2.jpg" length="28096" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/2022-italian-agile-days/iad_cover_hu25a5bab0b89b2c4e8dc57f781a061ed2_67698_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="335" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2022-italian-agile-days/iad_cover_hu25a5bab0b89b2c4e8dc57f781a061ed2_67698_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="335"/></media:content><content:encoded><![CDATA[
        <p>Hi üëã</p>
<p>Today‚Äôs post is about my experience at the <a href="https://www.agileday.it/"  target="_blank" >Italian Agile Days 2022</a>, which I attended in October 2022. I know, it‚Äôs way too late to write this, but I still think that remembering the talks I watched will be useful for others üòÉ.</p>
<p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.</p>
<p>This year, the conference was held on the Brescia University campus. It was my first in-person conference in 3 years, and seeing live talks and talking with people with the same interests was refreshing and inspiring!</p>
<p>I mostly watched technical talks about programming, but some of the ones you‚Äôll find below drift from pure programming into the realm of philosophy (and psychology), and they were the most interesting.</p>
<p>Enjoy!</p>
<h2 id="talks">Talks</h2>
<p><em>Disclaimer: most talks were in Italian. The videos are available <a href="https://vimeo.com/showcase/9957525"  target="_blank" >online</a>, here I‚Äôll just post a brief summary and my opinions on the talks.</em></p>
<h3 id="keynote-myth-busting-in-agile-scaling-en---nigel-thurlow">Keynote: Myth busting in agile Scaling (en) - Nigel Thurlow</h3>
<p><a href="https://vimeo.com/767786361"  target="_blank" >Video</a></p>
<p>Nigel has been the first ever Chief of Agile at Toyota, and while there he created ‚ÄúThe Flow System‚Äù, a flow-based approach to delivering value built on the Toyota system.</p>
<p>In his keynote, he debunks myths and tries to solve the ‚Äúformat war‚Äù between agile practices. The talk is packed full of considerations and stories about agile‚Ä¶so full that I cannot summarise it here without writing everything Nigel says. Please go check it out!</p>
<h3 id="event-sourcing--cqrs-a-light-introduction-en---paolo-banfi">Event Sourcing + CQRS: a light introduction (en) - Paolo Banfi</h3>
<p><a href="https://vimeo.com/768885882"  target="_blank" >Video</a></p>
<p>In this talk, the speaker introduces two important concepts that allow to easily change and add functionalities to our systems: event sourcing and CQRS.</p>
<p>To explain them, he presents an example based on a shopping cart, showing that by just saving the current state of the system (as we usually do with databases) we lose information that could be useful to the business. By using event sourcing and CQRS strategies, we employ a more generic model that allows using these pieces of information without making the system much more complex than before.</p>
<p>Paolo does a great introduction to both arguments. Even if I never used event sourcing and CQRS before, I now feel like I should use them in all my future projects!</p>
<h3 id="diamo-una-chance-a-una-codebase-legacy-it---nicola-mincuzzi">Diamo una chance a una codebase legacy? (it) - Nicola Mincuzzi</h3>
<p>‚ÄúLet‚Äôs give a legacy codebase a chance‚Äù</p>
<p><a href="https://vimeo.com/768879474"  target="_blank" >Video</a></p>
<p>Working with legacy codebases is a dread. Legacy systems are unstable, and every change to their code or structure leads to bugs and unknown issues, given their lack of tests.</p>
<p>In his talk, Nicola shows a project on which he worked, and describes how he ‚Äúattacked‚Äù the legacy monster by using harnesses and a lot of testing. He basically followed the advice in Michael Feather‚Äôs ‚ÄúWorking Effectively With Legacy Code&quot; which was effective for real!</p>
<p>Given that this was his first talk, it was great. I‚Äôm also working on a nasty legacy project, and seeing other people&rsquo;s (successful) experiences is inspiring and comforting at the same time.</p>
<h3 id="ive-done-tdd-wrong-all-the-time-it---luca-giuberti">I‚Äôve done TDD wrong all the time (it) - Luca Giuberti</h3>
<p><a href="https://vimeo.com/768875860"  target="_blank" >Video</a></p>
<p>In this talk, Luca expresses a common concern that we all think about while writing tests - Am I testing too much the implementation? Do the tests reflect the <strong>what</strong> (the business need), or do they represent the <strong>how</strong> (implementation)?</p>
<p>Luca shows a more sustainable way to test, in a <strong>coarse-grained</strong> fashion. I find this more in line with how I usually test, by testing the behaviour of multiple/larger modules and not of the single classes and methods (with a lot of mocking).</p>
<p>The definition of ‚Äúunit‚Äù is quite confusing. Some of us end up testing single classes or methods in isolation, by mocking every external dependency. Luca‚Äôs talk advocates for a coarser grain, like testing multiple (cohesive) classes for their external behaviour. It might seem like integration testing, but it‚Äôs not, and I think is a more sound approach.</p>
<h3 id="larte-dello-sviluppatore-it---marco-fracassi">L‚Äôarte dello sviluppatore (it) - Marco Fracassi</h3>
<p>‚ÄúThe software developer art‚Äù</p>
<p><a href="https://vimeo.com/768873513"  target="_blank" >Video</a></p>
<p>In this philosophical (and humorous) talk, Marco talks about the role of creativity (and how to get creative) in software development.</p>
<p>Software developers are a creative species, despite the stereotypes that others associate with the role (and we get a huge list in the talk). Practices such as pair programming, TDD and DDD are indeed quite creative and, at the time of their definition, were revolutionary.</p>
<p>Software development is a social activity in addition to technical practices, and in this regard, creativity can help us solve problems better. Marco presents a lot of ways to increase creativity personally and in the workplace (by increasing psychological safety) and what tends to stop it (ignorance, hyper-specialization, fear, vanity etc..).</p>
<p>In the end, the talk was very inspiring and showed that there‚Äôs a lot of ‚Äúart‚Äù in our practice as software developers.</p>
<h3 id="dal-carbone-al-software-i-sistemi-socio-tecnici-it---ferdinando-santacroce">Dal carbone al software: i sistemi socio-tecnici (it) - Ferdinando Santacroce</h3>
<p>‚ÄúFrom coal to software: socio-technical systems‚Äù</p>
<p><a href="https://vimeo.com/768881541"  target="_blank" >Video</a></p>
<p>Agile is not just for programmers, and Ferdinando shows us why in his talk. He tells a story set in post-war England, when a technological innovation (the ‚Äúlongwall‚Äù) was introduced but didn‚Äôt improve productivity, all because of social issues.</p>
<p>The researchers found out that this innovation disrupted (in a bad way) the current social organisation of the mines. From autonomous, cross-functional and trusted teams, the longwall brought hyper-specialisation, control and loss of autonomy and ownership, leading to lower productivity.</p>
<p>This story serves as a reminder that all techniques and practices we see today in agile (such as lean, kanban, XP etc..) didn‚Äôt start with programming, but are way older. In addition, we cannot only think about the technical aspects of the organisation, because the social ones are way more important!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed attending this conference!</p>
<p>Each talk explored an argument which I didn‚Äôt know and wanted to know more about. I also got to meet new people in a community near me (Brescia is right next to Bergamo and Milan) and I also got gadgets ü§©. In addition, I bought two books from Avanscoperta: ‚ÄúCronache di Domain-Driven Design‚Äù (DDD Chronicles) and ‚ÄúDecision-Making for Software Development Teams‚Äù. I hope to read them soon!</p>
<p>That‚Äôs all for today. I hope you enjoyed this short summary of my experience at IAD2022, and I hope to attend and write about next year‚Äôs conference (and some workshops? üòá).</p>

      ]]></content:encoded></item></channel></rss>