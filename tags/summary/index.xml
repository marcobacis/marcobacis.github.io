<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Summary" on Marco Bacis</title><link>https://marcobacis.com/tags/summary/</link><description>Recent content in Summary" on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis</copyright><lastBuildDate>Sat, 10 Jun 2023 07:00:00 +0100</lastBuildDate><atom:link href="https://marcobacis.com/tags/summary/index.xml" rel="self" type="application/rss+xml"/><item><title>Book Summary: A Philosophy of Software Design</title><link>https://marcobacis.com/blog/philosophy-of-software-design/</link><pubDate>Sat, 10 Jun 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/philosophy-of-software-design/</guid><description>&lt;p>Hi üëã¬† and welcome to a new post!&lt;/p>
&lt;p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú&lt;em>A Philosophy of Software Design&lt;/em>‚Äù, by &lt;em>John Ousterhout&lt;/em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.&lt;/p>
&lt;p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.&lt;/p></description><media:content url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu_63826d9fcfea58dc.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu_63826d9fcfea58dc.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <img src="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu_63826d9fcfea58dc.jpg" title="%!s(<nil>)" alt="%!s(<nil>)"/>
          <p>Hi üëã¬† and welcome to a new post!</p>
<p>Today I‚Äôll post a summary of a book I read at the beginning of 2023, titled ‚Äú<em>A Philosophy of Software Design</em>‚Äù, by <em>John Ousterhout</em>. John is a professor at Stanford, where he teaches ‚ÄúOperating System Principles‚Äù and ‚ÄúSoftware Design Studio‚Äù.</p>
<p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.</p>
<p>I wrote this summary mainly for myself, to remember the concepts expressed in the book. There might be missing information and inconsistent levels of detail üòÖ¬†just a disclaimer.</p>
<p>Let‚Äôs start!</p>
<h2 id="its-all-about-complexity">It‚Äôs All About Complexity</h2>
<p>Writing Software is one of the purest creative activities done by humans. It allows to create entire systems and world only constrained by the developers‚Äô imagination.</p>
<p>However, the greatest limitation of creating software is our ability to <em>understand</em> it. Over time, complexity will inevitably increase, so we must find ways to minimise its impact. But <strong>what</strong> is complexity, and how can we <strong>reduce</strong> it? These are the goals of the book.</p>
<blockquote>
<p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.</p>
</blockquote>
<p>Complexity manifests itself with symptoms:</p>
<ul>
<li><strong>Change Amplification</strong>: simple changes require to modify code in many different places</li>
<li><strong>Cognitive Load</strong>: how much a developer needs to know to complete a task
(e.g. shorter but difficult to understand is worse than longer but easier to understand code)</li>
<li><strong>Unknown Unknowns</strong> (the worst): it‚Äôs not obvious which code to modify/add to complete a task</li>
</ul>
<p>But what are the causes of complexity? The book highlights two, <em>dependencies</em> and <em>obscurity</em>, which can be reduced by making code obvious and easy to read, by encapsulating the complexity in separate modules and in general by designing the system better (easy right? üòÖ).</p>
<h2 id="tactical-vs-strategic-programming">Tactical vs Strategic Programming</h2>
<p>To improve the quality of software, we must change out <em>mindset,</em> from <strong>tactical</strong> to <strong>strategic</strong>.</p>
<p>Tactical programming focuses only on working software. ‚ÄúIf it works it‚Äôs ok, let‚Äôs go on the next task‚Äù. Thinking in terms of working code, and not quality and design, leads to incremental complexity in the long term. Code becomes more complex because every small complexity adds up. Refactoring is seen as a cost because it will slow down developers, so the design is never modified from the starting one.</p>
<p>Strategic programming is the solution to increasing complexity. The primary goal of strategic programming is to <em>produce a great design, which also happens to work</em>. It can be seen as an investment in the quality of software, which over time will avoid complexity and allow to ship features fast and lower development costs.</p>
<p>Some modern software trends (such as Agile and TDD) expose to the risk of tactical programming, by proposing an iterative approach and focusing on features instead of abstractions. When working in an iterative approach it is then important to focus on <strong>abstractions</strong> instead of single features/modules/methods, and outside-in design might be a possible solution (my take on the argument at least, read more <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >here</a>).</p>
<h2 id="modular-design">Modular Design</h2>
<h3 id="deep-modules">Deep Modules</h3>
<p>The center of the book is dedicated to modular design and its main benefits. In modular design, a software system is decomposed in a set of (relatively) independent modules. The goal while designing a modular system is to minimise the dependencies between modules.</p>
<p>A dependency can be formal, based on the public <em>interface</em> of a module, or informal, based on the module‚Äôs <em>behaviour</em> and side-effects. The book advocates for <strong>deep</strong> modules, meaning modules that have a simple interface hiding powerful functionalities. This is in contrast to <strong>shallow</strong> modules, with complex interfaces and simple implementations.</p>
<p>An example of deep module is the Unix I/O api, which exposes simple methods (open, read, write, close) to manage a really complex underlying system (filesystems, buffers, disks and so on). Examples of shallow modules are instead pass-through methods, linked lists and in general all the classes we create which don‚Äôt hide the underlying implementation.</p>
<h3 id="information-hiding">Information Hiding</h3>
<p>Information hiding is the fist technique that can be used to create deep modules. It consists in encapsulating design decisions and information behind an interface which doesn‚Äôt expose it, thus hiding the underlying complexity (examples of underlying information: networking, data structures, multithreading, parsing and serialization, system and physical stuff like protocols and disks, etc..).</p>
<p>The opposite of information hiding is information leakage, in which the underlying design choices and implementation  ‚Äúleak‚Äù from the interface. One of the causes of information leakage is <strong>temporal decomposition</strong>, in which the execution order of the operation is reflected in the code structure (e.g. class to read, then to modify and finally a class to write the result‚Ä¶ they pass the underlying structure among them, leaking it outside the actual interface). The solution is actually contrary to the current best practices, which proposed to create a lot of small classes with shallow interfaces: create slightly larger classes which encapsulate more operations (still keeping levels of abstraction separated). The same thing can be done inside classes, by using information hiding and deep (private) methods to hide implementation details.</p>
<h3 id="general-purpose-modules-are-deeper">General-Purpose Modules are Deeper</h3>
<p>Another consideration is to think about <strong>general-purpose</strong> classes instead of special-purpose interfaces. A general-purpose interface is by definition deeper, as it must present a common (we hope simpler) interface to the users to deal with different cases. A special purpose interface is instead designed around the special case it is handling. The goal should be to design <em>somewhat general-purpose</em> interfaces without over-engineering the code too early (it‚Äôs an investment, but it shouldn‚Äôt block the development and risk to be useless in the future). The book proposes three questions (‚ÄùWhat is the simplest interface for the current use?‚Äù, ‚ÄúIn how many situations will this method be used?‚Äù, and ‚ÄúIs this API easy to use for my current needs?‚Äù) to discern if the class is general purpose or just over-engineered.</p>
<h3 id="different-layer-different-abstraction">Different Layer, Different Abstraction</h3>
<p>Systems are usually designed as <strong>layers</strong>, each with a different level of abstraction offered. When two adjacent layers offer similar abstractions, this is a red flag. Most of the times this leads to shallow modules, which don‚Äôt hide complexity and just bloat the system.</p>
<p>The biggest example are pass-through methods, which just call the same method of the underlying layer. This approach doesn‚Äôt hide anything and adds complexity to the system, as it adds a similar interface without adding functionality! The book proposes three solutions:</p>
<ul>
<li>Expose the lower layer directly to the higher-level modules</li>
<li>Redistribute functionality between classes</li>
<li>Merge the two layers</li>
</ul>
<p>In some cases, having duplicated interfaces is ok, such as in <strong>dispatcher</strong> and interfaces with multiple implementations (such as disk drivers). In most cases it is instead harmful.</p>
<p>One kind of API duplication is given by <strong>decorators</strong>. A decorator has always the same interface, but different implementations which are used to extend the functionality. This might lead to an explosion in the number of decorators, each for a single operation. This represents a case of <em>shallow</em> modules.</p>
<p>Another form of duplication is given by <strong>pass-through variables</strong>, which must be passed between multiple layers and it‚Äôs basically a leaked information. Think about configuration parameters and arguments that are used by lower level classes, but not by the higher levels. Pass-through variables add complexity because they force all the intermediate layers to be aware of their existence. The solutions for this problem are mostly ugly, so a compromise must be reached and it‚Äôs a design decision:</p>
<ul>
<li>Store the information in a global variable</li>
<li>Use an already existing object related to the lower-level module in which to put the variable</li>
<li>Introduce a <em>context</em> object, which presents some of the disadvantages of global variables, but allows to have multiple instances in the same process and it‚Äôs more test-friendly</li>
</ul>
<h3 id="pull-complexity-downwards">Pull Complexity Downwards</h3>
<p>The goal of software design is to minimise complexity, thus it‚Äôs important to hide the complexity whenever it is possible. This is also valid for interfaces. It is better to make a more complex implementations, if that means a simpler interface for the users. This relates to the ‚Äúinvestment mindset‚Äù explained at the beginning of the book.</p>
<p>The most important lessons is to avoid exposing configuration parameters as much as possible, and if necessary, to compute reasonable defaults if that‚Äôs the case.</p>
<p>Don‚Äôt take it too far however, by putting all of the code into a class or merging too many classes. Pulling down complexity:</p>
<ul>
<li>should simplify the interface</li>
<li>should be done on functionality related to the existing one</li>
<li>should result in many simplifications elsewhere in the application</li>
</ul>
<h3 id="together-or-apart">Together or Apart?</h3>
<p>Deciding to merge or divide functionality is a fundamental question developers face. In general, the rule is to <strong>simplify</strong> the interfaces and to create <em><strong>deep</strong></em> modules and methods. Splitting or putting together code can help, but it‚Äôs full of compromises and choices.</p>
<p>Subdividing may increase complexity (it creates a higher <strong>number</strong> of components, additional code to manage, might lead to more dependencies and separation or duplication of cohesive functionalities. Bringing pieces of code together might help in reducing the complexity, and good indicators are:</p>
<ul>
<li>Shared information</li>
<li>Simpler interface when merged</li>
<li>Duplication of functionality</li>
</ul>
<p>Splitting is instead indicated when there is a mixture of general and special purpose code in the same module (it might be better to separate the two) and when the functionalities inside the module are not related. In general, a method/module should <strong>do one thing and do it completely</strong>.</p>
<p>When splitting is important to still keep modules deep, while us developers have a tendency to split too much (I‚Äôm actually torn on this, given the advice from uncle bob and countless people saying to divide in minuscule, but <strong>shallow</strong>, methods).</p>
<p>Splitting can be done by:</p>
<ul>
<li>Extracting a subtask into a separate method (keeping the methods deep, remember!)</li>
<li>Splitting in two separate methods ‚Üí avoid conjoined methods, in which you cannot understand the methods/modules independently. also, avoid shallow methods</li>
</ul>
<p>Examples of the chapter:</p>
<ul>
<li>Merge http reading and parsing method because they shared the http request informations</li>
<li>Bring together to simplify the interface (what should be done with stream and buffers in java)</li>
<li>Separate a class for logging</li>
<li>Separate text-related stuff and ui operations in the editor example (general text handling vs special operations such as selection and undo)</li>
</ul>
<h2 id="error-handling">Error Handling</h2>
<p>Exception handling is a huge source of complexity in software systems. An exception alters the flow of the program, and must be either handled or reported to the upper layer. In addition, code that handles exceptions tends to be verbose, complex and an additional source of exceptions itself!</p>
<p>Programmers tend to throw exceptions at every suspicious behaviour, but a class with a lot of exceptions is <em><strong>shallow</strong></em> and leads to further complexity. The book list 4 ways to reduce exceptions in our code.</p>
<ul>
<li><strong>Define errors out of existence</strong>: change the code in order to handle special cases (or avoid them) without raising exceptions</li>
<li><em>Masking</em>: detecting and handling the exception at a lower level (e.g. with retries)</li>
<li><em><strong>Aggregation:</strong></em> handle many exceptions with a single piece of code at a higher level and in a more generic way</li>
<li><strong>Crash/Abort</strong>: to be used only for exceptions for which there is no recovery (e.g. most out-of-memory and I/O errors)</li>
</ul>
<p>The same principles can be used to handle special cases, and not just errors, in our code. Defining special cases out of existence with general-purpose code, or handling special cases in separate internal methods and classes can help create deep modules, thus reducing complexity.</p>
<h2 id="commenting-code">Commenting Code</h2>
<p>Comments are the most important form of documentation that developers can write: they help improve the design (if written before writing code), reduce cognitive load and remove unknown unknowns by capturing both high and low-level details that are not present in the code.</p>
<p>However, programmers tends to not write (or delay writing) comments, with main excuses being that ‚Äúcode should be self-documenting‚Äù (leading to smaller methods and shallow modules), that they don‚Äôt have time (it doesn‚Äôt take much), that they have seen only worthless comments (that‚Äôs why it‚Äôs important to write them correctly) and that they require constant update (that‚Äôs because they are coupled to the implementation, and they shouldn‚Äôt).</p>
<p>In general, comments should describe the <em><strong>what</strong></em> and <strong>why</strong> of the underlying code, and not the how (implementation). They shouldn‚Äôt just repeat the code, and instead <strong>add precision</strong> or provide the underlying <strong>intuition</strong> and <strong>reasons</strong> why the code was written in the first place (e.g. design decision, fixed bug reference, adherence to protocols and standards etc..) . An example are interface comments, which allows the user of an interface to see what it does without reading the underlying code. Implementation comments describe complex details inside the code, but they should be kept <em><strong>near</strong></em> the code they describe (e.g. not at the beginning of a method or in the interface definition). <em><strong>Cross-Module</strong></em> comments should be kept in a easily discoverable place for the developer (e.g. in a common class/file, or in extreme cases in an external doc file, even if less desirable).</p>
<p>Comments can also be used as a <strong>design</strong> <strong>tool</strong>, by writing them before the code. In this way, the comments will reflect the high-level overview of the implementation, will be written better and force the developer to think about the design before coding. If comments are complex or describe the implementation in too much detail, then the final design will be complex and/or shallow.</p>
<h2 id="consistency-and-clarity">Consistency and Clarity</h2>
<p>The final advice of the book is that code should be <strong>obvious</strong>, meaning that the reader should have all the information needed to understand the code and modify it. Being obvious means having a low complexity and clear interface. This can be done by working both the design and the <em>consistency</em> of the code.</p>
<p>Regarding consistency, it can be enforced by:</p>
<ul>
<li>Following conventions and enforcing a coding style (e.g. with tools such as linters and with code review)</li>
<li>Giving the right <strong>names</strong> (they must be precise, with a clear definition and purpose, and consistent in the entire codebase)</li>
<li>Documentation (both in form of <strong>comments</strong> and external documentation for conventions and overall design)</li>
</ul>
<p>In general, the code shouldn‚Äôt violate the reader‚Äôs expectation, in order to work as a cognitive leverage: if the design is consistent and obvious, once the developer learns how something is done in one place, he can use that knowledge to understand other places of the codebase which use the same approach.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed this book. It was short (just 170 pages!), but full of insights, opinions and a ton of advice!</p>
<p>Some advice contained in the book made me think about current practices. For example, short methods are a cornerstone of clean coding, but the author goes against them when they make the code ‚Äúshallower‚Äù. Another controversy are the chapters on commenting code, in which the author goes against the myth of ‚Äúself-documenting code‚Äù.</p>
<p>I must admit that I don‚Äôt always follow the advice given by the author (for example I don‚Äôt comment the code much, and sometimes consistency is not my first concern), but from now on I‚Äôll watch out on many of the ‚Äúred flags‚Äù contained in the book.</p>
<p>That‚Äôs it for today! I hope you enjoyed this summary. I might have skipped some concepts and chapters (e.g. the last one about ‚Äúdesigning for performance‚Äù). I recommend this book for anyone interested in improving his development and design skills.</p>
<h3 id="bonus">Bonus</h3>
<p>PS. The book contains a list of ‚Äúred flags‚Äù to keep in mind while writing or reviewing code. Each of the red flags might represent the symptom of design issues in the system.</p>
<p>Here it is:</p>
<ul>
<li><strong>Shallow Module:</strong> the interface of a class or method isn‚Äôt much simpler than its implementation</li>
<li><strong>Information Leakage</strong>: a design decision is reflected in multiple modules</li>
<li><strong>Temporal Decomposition</strong>: the code structure is based on the order in which operations are executed, not on information hiding</li>
<li><strong>Overexposure</strong>: an API forces callers to be aware of rarely used features in order to use commonly used features</li>
<li><strong>Pass-Through Method</strong>: a method does almost nothing except pass its arguments to another method with a similar signature</li>
<li><strong>Repetition</strong>: a nontrivial piece of code is repeated over and over</li>
<li><strong>Special-General Mixture</strong>: special-purpose code is not cleanly separated from general-purpose code</li>
<li><strong>Conjoined Methods</strong>: two methods have so many dependencies that it‚Äôs hard to understand the implementation of one without understanding the implementation of the other</li>
<li><strong>Comment Repeats Code:</strong> all of the information in a comment is immediately
obvious from the code next to the comment</li>
<li><strong>Implementation Documentation Contaminates Interface:</strong> an interface
comment describes implementation details not needed by users of the thing
being documented</li>
<li><strong>Vague Name:</strong> the name of a variable or method is so imprecise that it doesn‚Äôt
convey much useful information</li>
<li><strong>Hard to Pick Name:</strong> it is difficult to come up with a precise and intuitive name
for an entity</li>
<li><strong>Hard to Describe:</strong> in order to be complete, the documentation for a variable or
method must be long</li>
<li><strong>Non-obvious Code:</strong> the behaviour or meaning of a piece of code cannot be
understood easily</li>
</ul>
        ]]></content:encoded></item></channel></rss>