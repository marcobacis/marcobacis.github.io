<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>summary on Marco Bacis</title><link>https://marcobacis.com/tags/summary/</link><description>Recent content in summary on Marco Bacis</description><language>en-uk</language><copyright>© Copyright Marco Bacis 2018-2024</copyright><lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://marcobacis.com/tags/summary/index.xml" rel="self" type="application/rss+xml"/><item><title>Milan XPUG January Meetup: My Advice on Microservices Architecture, by Gabriele Lana</title><link>https://marcobacis.com/blog/xpug-milan-meetup-microservices/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://marcobacis.com/blog/xpug-milan-meetup-microservices/</guid><description>&lt;p>Hi  👋 and welcome to a new post!&lt;/p>
&lt;p>Today I want to share with you a summary on the last meetup I attended, organized by the &lt;a href="https://www.meetup.com/it-IT/xpugmi/" target="_blank" >Milan eXtreme Programming Group&lt;/a>.&lt;/p>
&lt;p>This time , &lt;a href="https://github.com/gabrielelana" target="_blank" >Gabriele Lana&lt;/a> gave his advice on the pros and cons of microservices, and the problems (and solutions) that he found in his experience.&lt;/p></description><enclosure url="https://marcobacis.com/blog/xpug-milan-meetup-microservices/cover_hu31d1723f075c76d5e02ad52b392e4df7_22474_480x480_fit_q75_bgffffff_box_2.jpg" length="18150" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/xpug-milan-meetup-microservices/cover_hu31d1723f075c76d5e02ad52b392e4df7_22474_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="461" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/xpug-milan-meetup-microservices/cover_hu31d1723f075c76d5e02ad52b392e4df7_22474_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="461"/></media:content><content:encoded><![CDATA[
        <p>Hi  👋 and welcome to a new post!</p>
<p>Today I want to share with you a summary on the last meetup I attended, organized by the <a href="https://www.meetup.com/it-IT/xpugmi/"  target="_blank" >Milan eXtreme Programming Group</a>.</p>
<p>This time , <a href="https://github.com/gabrielelana"  target="_blank" >Gabriele Lana</a> gave his advice on the pros and cons of microservices, and the problems (and solutions) that he found in his experience.</p>
<p>Gabriele is a consultant with over 20 years of experience, founder of the Milan XPUG and a nerd at heart (he still likes to play with cabinets and has contributed to a <a href="https://github.com/gabrielelana/emacs-nes"  target="_blank" >NES simulator in emacs</a>, among other stuff!!).</p>
<p>Let&rsquo;s begin!</p>
<h2 id="microservices-architecture-definition">Microservices Architecture Definition</h2>
<p>Gabriele started with a premise: Microservices are currently (and have been for  years) still in their &ldquo;hype&rdquo; phase. Hype is a double-edged sword: it means that it&rsquo;s easier to get buy-in for using them, but (as all engineers know) there&rsquo;s the risk to <em>fit the problem to the solution</em>, instead of finding the right solution for the job.
In fact, microservices are most of the times used without proper reasons, and that&rsquo;s the main source of issues.</p>
<p>Then, he gave a simple definition of microservices (which can be used to describe anything really, as he admitted): &ldquo;<em>Microservices are small, autonomous services that work together</em>&rdquo;.</p>
<p>But how big should a microservices be in reality? Given the &ldquo;micro&rdquo; prefix, we might think that their size matters. Some schools of thought say they should be as big as a small team can implement in a month, others will talk in terms of number of lines (hundreds? thousands?). The advent of serverless computing has made thei size even more relevant.</p>
<p>Gabriele gave the usual answer: <em>it depends</em>!</p>
<p>But what does it depends from? For Gabriele, the size of a microservice should be intended as the size perceived from outside, such as the API surface.
A microservice might have millions of lines (e.g. doing video encoding and processing) but still be &ldquo;micro&rdquo; because it does just one thing!! On the other hand, a small CRUD service might have a large surface area and handle a lot of entities, and thus be too complex to make a single microservice. In the end, the size depends on the domain of the system we are going to develop for.</p>
<h2 id="pros-and-cons">Pros and Cons</h2>
<p><div class="image imgB-0190f847a304ba81c0fcd9a89e308bb1-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_320x0_resize_q75_h2_box.webp 320w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_640x0_resize_q75_h2_box.webp 640w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_960x0_resize_q75_h2_box.webp 960w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1280x0_resize_q75_h2_box.webp 1280w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1600x0_resize_q75_h2_box.webp 1600w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1920x0_resize_q75_h2_box.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_320x0_resize_q75_box.jpeg 320w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_640x0_resize_q75_box.jpeg 640w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_960x0_resize_q75_box.jpeg 960w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1280x0_resize_q75_box.jpeg 1280w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1600x0_resize_q75_box.jpeg 1600w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_1920x0_resize_q75_box.jpeg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/xpug-milan-meetup-microservices/microservices_pros_cons_hua2cc598100e3d41464220e0373af784f_431195_640x0_resize_q75_box.jpeg" width="3648"
        height="2736" alt="Microservices Pros and Cons, thanks to Stefano Martinelli for the photo!" title="Microservices Pros and Cons, thanks to Stefano Martinelli for the photo!" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Microservices Pros and Cons, thanks to Stefano Martinelli for the photo!</figcaption>

</figure></p>
<p>After giving a mandatory definition of microservices and their &ldquo;micro&rdquo;-ness, Gabriele gave an overview of the pros and cons of employing a microservices architecture in our systems.</p>
<h3 id="pros">Pros</h3>
<p>Let&rsquo;s start with the pros of microservice architectures:</p>
<p><strong>Diversity</strong></p>
<p>With microservices, the company can diversify their technology: each microservice can in fact be implemented with the most suitable language or framework for the problem.
In addition to this, diversity allows to integrate new technologies in a system without rewriting everything from scratch! It also allows to be more appealing to engineers who want to learn new languages, and to follow the trends (still being cautious of using too much new technology - stick to the old, good stuff!).
One con of diversity is that it can bring more complexity (see below) and requires more standards and a better culture.</p>
<p><strong>Resiliency</strong></p>
<p>If you partition well the responsibilities inside the system, splitting it in multiple microservices helps increase its availability.
Even when some services are down, the others stays up, and that increases the resiliency of the application as a whole.</p>
<p><strong>Scalability</strong></p>
<p>By splitting an architecture in services, each functionality can scale differently from the others. For example, a central feature of the system might need more resources to run and be used by many users, while other parts of the system might need less resources.
This scalability pro is even more useful when using serverless architectures, which in some cases can help cut costs considerably.</p>
<p><strong>Independence</strong></p>
<p>Independence here is related to the possibility to independently deploy different parts of the system at different times and frequency. By deploying services independently, we can keep the availability of the system high and allow developers to develop features without the fear of &ldquo;big bad deployments&rdquo; (the one you don&rsquo;t want to do on a friday).</p>
<p><strong>Organizational Alignment</strong></p>
<p>Conway&rsquo;s law states that</p>
<blockquote>
<p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.</p>
</blockquote>
<p>Following this law, using microservices helps in aligning the technical side of the system to the topology of the organization (e.g. assigning a microservice to each team separately).</p>
<p>However, microservices can also lead the opposite to happen, called <em>Inverse conway&rsquo;s law</em>: given an existing system, the organization is forced to organise in the same way as the system&rsquo;s components! This is usually difficult to perform, and leads to issues down the line.</p>
<p><strong>Composability</strong></p>
<p>Here Gabriele just said &ldquo;ah&hellip;classic&rdquo; 🥲 so I have nothing to write.</p>
<p>If I have to add two lines on the argument, I can cite something Gabriele said later, which is that microservices are just a deployment method, and all the rest is standard software architecture and design. So, composability is not a pro by itself, but it&rsquo;s a requirement for doing microservices 😜.</p>
<p><strong>Replaceability</strong></p>
<p>Finally, microservices are easily replaceable. I can implement a service, then experiment with it. The usual examples are canaries (used in deployments) and A/B tests. By being independent and resilient, microservices allows to experiment much more than a monolith, without impacting on the entire product at once.</p>
<h3 id="cons">Cons</h3>
<p>After listing all the (somewhat) pros of microservices, Gabriele started explaining the cons. They are less than the pros, but of way higher magnitude, and can impact much more the business and the developers if encountered.</p>
<p><strong>Complexity</strong></p>
<p>Microservices introduce complexity on multiple levels. The main one is the communication.  Calling a method in a monolith is a straightforward thing to do: just call the method and, if no cosmic rays are involved, you will know the answer right away.</p>
<p>Distributed systems are a different thing altogether. When you send a message to another component, you cannot know if you will receive a response, and cannot know why (did the other component receive the message but didn&rsquo;t complete? did it complete the request but I wasn&rsquo;t able to receive the response? is the other component malicious?).</p>
<p>In addition to the inherent complexity of the network, splitting a system into multiple services introduces complexity in the communication patterns (I need other services to other data) which can be worsened if the system isn&rsquo;t partitioned properly.</p>
<p><strong>Testing</strong></p>
<p>Microservices can make unit testing easy and fast (the service is small afterall). It&rsquo;s the integration testing which becomes more difficult.</p>
<p>How can we test microservices?</p>
<p>Some techniques (such as using mocks and contract testing to check the connection with other services) are useful, but they allow to test a part of the system. Testing the whole system becomes more difficult, and testing it while maintaining independence of development and deployment is even more complex.</p>
<p><strong>Infrastructure</strong></p>
<p>Deploying a microservices architecture requires more automation on the infrastructure, and more so if the number of services increases. The business must have a strong DevOps culture to manage this kind of system effectively.</p>
<p><strong>Consistency</strong></p>
<p>Forget strong consistency and ACID properties! With microservices comes the burden of eventual consistency and asynchronous communication (at least to make the most out of it).</p>
<p><strong>Cost</strong></p>
<p>This is not a con per se, but a factor that must be considered. For simple application a microservices architecture might be too expensive, while it could bring the costs down for a complex system (more so if using serverless).</p>
<p><strong>(Plus) Debugging</strong></p>
<p>In the same way testing is more complex, debugging also becomes more difficult while dealing with microservices, especially if an issue is caused by multiple services. It&rsquo;s essential to setup observability (tracing and logging) as first thing when using microservices, and even with these tools tracking an error can be difficult.</p>
<h2 id="3-of-the-worst-problems">3 of the Worst Problems</h2>
<p>The first part of this summary covers just 30 minutes of the talk. What is the rest of the meetup about (one hour and half)?</p>
<p>In the main part of his talk, Gabriele highlighted the 3 worst issues affecting microservices architectures, their causes, symptoms, cure and prevention!</p>
<p>I didn&rsquo;t take much notes on this part, so this summary will be shorter than the pros/cons. To learn more, you can watch the <a href="https://www.youtube.com/watch?v=1quMproQ5Hk"  target="_blank" >video</a>.</p>
<h3 id="1-wrong-responsability">1. Wrong Responsability</h3>
<p><div class="image imgB-5d9c9bdef263bbee7f1fac02311ee06e-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_320x0_resize_q75_h2_box.webp 320w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_640x0_resize_q75_h2_box.webp 640w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_960x0_resize_q75_h2_box.webp 960w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1280x0_resize_q75_h2_box.webp 1280w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1600x0_resize_q75_h2_box.webp 1600w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1920x0_resize_q75_h2_box.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_320x0_resize_q75_box.jpeg 320w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_640x0_resize_q75_box.jpeg 640w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_960x0_resize_q75_box.jpeg 960w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1280x0_resize_q75_box.jpeg 1280w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1600x0_resize_q75_box.jpeg 1600w, https://marcobacis.com/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_1920x0_resize_q75_box.jpeg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/xpug-milan-meetup-microservices/wrong_responsibility_hu4f6b82619ca5354471f5990670edc0a4_330441_640x0_resize_q75_box.jpeg" width="2576"
        height="1860" alt="Wrong Responsibility, thanks to Stefano Martinelli again" title="Wrong Responsibility, thanks to Stefano Martinelli again" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Wrong Responsibility, thanks to Stefano Martinelli again</figcaption>

</figure></p>
<p>The first (and worst) risk with microservices architecture is to partition the system wrong!</p>
<blockquote>
<p>If you design the system the wrong way, using microservices will only worsen the issue.</p>
</blockquote>
<p>Gabriele sees microservices only as a deploy model, in the sense that they aren&rsquo;t a solution to bad software design, but just a tool.</p>
<p>When the system is badly designed (with <strong>high coupling</strong> and <strong>low cohesion</strong>) making changes becomes exponentially more difficult. When a component needs some data which is not in the right spot, it needs to communicate with another service to get it. If this happens too many times, it means the component suffers of a pattern called <em>feature envy</em>. The envious component keeps asking for data (or actions) to the other component.</p>
<p>The issue is made worse by the network: when a component is envious in a monolith, all is solved with a method call. In a microservice architecture this involves the network instead, with all its related issues (latency, availability, byzantine faults and so on)!</p>
<p>In the 90s/2000s vendors tried to sell similar stuff, with CORBA and RMI. This didn&rsquo;t end well&hellip;instead, it&rsquo;s important to reduce the communication to a minimum and employ the Single Responsibility Principle, in the same way we employ it in a standard OOP monolith. As already said above, a bad system design will just get worse with microservices.</p>
<p>What can we do if we have a big ball of mud monolith and need to split it? The first thing is to refactor the monolith in order to fix the mess, and only then to split it in microservices! It&rsquo;s important to disentangle and uncouple all the components while it&rsquo;s still easy.</p>
<p>&ldquo;And what if everything is strongly connected because of our domain?&rdquo; Gabriele provoked us with a questioner a customer may give. The solution is simple&hellip;.keep the monolith! Using microservices is not mandatory, and should be done only if there is the need (and the skill) to do it. Splitting a strongly coupled system wrong instead would only lead to pain.</p>
<h3 id="2-shared-database">2. Shared Database</h3>
<p>This is an issue I&rsquo;ve been guilty multiple times: using a shared database between microservices!</p>
<blockquote>
<p>First rule of microservices: each microservice must have a separate database.</p>
</blockquote>
<p>If multiple services share the same db (access and schema altogether), then the database becomes the same as a central, global variable that everyone has access to. With a central database there is no independent deploy (how can I run migration and change the schema if others depend on it?) and making changes becomes difficult.</p>
<p>But what causes the presence of a shared database? Gabriele gave a few culprits:</p>
<ul>
<li>When the DB is used to configure/customise the system</li>
<li>Data Driven Design (when we first design the tables and then the rest)</li>
<li>Database Normalization (how we are tipically taught to design a DB schema&hellip;)</li>
<li>False need of strong consistency from the business side</li>
<li>Database containing business logic as the central part of the system (e.g. using triggers and stored procedures)</li>
</ul>
<p>How can we prevent this from happening?
The first thing to do it to not fear denormalization and to stop doing data-driven design. Instead, we should base our design on the behaviour and actions of the users (so DDD, BDD and so on) and learn that it&rsquo;s ok to split the data related to an entity among multiple databases!</p>
<p>Gabriele gave the example of the humble <strong>Order</strong> entity. An order can be represented differently by each distinct department inside the company. Each can add tens of fields into it&hellip; Sometimes the order might even be created before the user is logged or even if the goods are not available yet!</p>
<p>What should we do in this case? Create a single table with hundreds of (mostly unrelated) fields and used by all services? Nope!</p>
<p>Instead, we should have a shared id for the same entity, but store it in every microservice only with the data pertaining to that service, of which the service is responsible. It might be the Shipping Address for the logistics service, the credit card details for the Finance service, and the id and position of the goods for the warehouse service.</p>
<h3 id="3-distributed-monolith">3. Distributed Monolith</h3>
<p>The last issue Gabriele mentioned is the infamous &ldquo;Distributed Monolith&rdquo;. It happens when we use too much synchronous communication when building our microservices, coupling the system and making it harder to change and deploy independently.</p>
<p>Synchronous communication creates more coupling than asynchronous, because when sending a synchronous request, we wait for the response&hellip;. what could go wrong? As already seen with the other 2 issues, everything!!</p>
<p>The solution for this issue is to embrace asynchronous communication between services (not caring if the response arrives and when) and eventual consistency. Many system can work just fine with eventual consistency, even if we don&rsquo;t realise it.</p>
<p>Gabriele also mentioned some concepts of <em>distributed system design</em> that can help create a reliable distributed system, such as the use of circuit breakers. In the end, we must understand the distributed nature of microservice and not to go against it.</p>
<h2 id="conclusions">Conclusions</h2>
<p>Gabriele&rsquo;s talk was a long and detailed list of reasons why not to use microservices 😂.  I really liked his style of presentation (without filters and talking about real systems and issues).</p>
<p>I recently read the book &ldquo;Building Microservices&rdquo; by Sam Newman, and most of the advice given in the book resonated with Gabriele&rsquo;s talk, most of all in the issues that microservices can cause if not implemented properly. This discussion also remembered me that microservices are a tool, and that it all start with a good software design first (and second, third, fourth and so on 😅).</p>
<p>Be it an existing system or a greenfield project, it&rsquo;s important to decouple and separate the system properly before splitting it, and focusing on distributed systems&rsquo; issues and solutions (such as denormalization, async communication, event-based systems and so on) can make the difference.</p>
<p>That&rsquo;s it for this time! I hope you liked my short summary of a long talk. You can find the meetup video <a href="https://www.youtube.com/watch?v=1quMproQ5Hk"  target="_blank" >here</a>.</p>
<p>See you next time!</p>
      ]]></content:encoded></item><item><title>My Experience at the Italian Agile Days 2023</title><link>https://marcobacis.com/blog/2023-italian-agile-days/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://marcobacis.com/blog/2023-italian-agile-days/</guid><description>Hi 👋 and welcome to a new post!
Today I’m writing a summary of my experience at the Italian Agile Days 2023.
I already wrote about the 2022 edition here and, just like last time, I’m writing this summary 2 months after the event…but let’s not worry about this short delay.
This year, the event was organised at the Politecnico di Milano campus. I graduated there about 4 years ago, so it was a great occasion to return there!</description><enclosure url="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu46c66a9d19baf90f353b051ed457cb8f_24540_480x480_fit_q75_bgffffff_box_2.jpg" length="12615" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu46c66a9d19baf90f353b051ed457cb8f_24540_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2023-italian-agile-days/cover_hu46c66a9d19baf90f353b051ed457cb8f_24540_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 and welcome to a new post!</p>
<p>Today I’m writing a summary of my experience at the Italian Agile Days 2023.</p>
<p>I already wrote about the 2022 edition <a href="https://marcobacis.com/blog/2022-italian-agile-days/"  target="_blank" >here</a> and, just like last time, I’m writing this summary 2 months after the event…but let’s not worry about this short delay.</p>
<p>This year, the event was organised at the Politecnico di Milano campus. I graduated there about 4 years ago, so it was a great occasion to return there! I got to see how the campus changed, and I met some old friends (at <a href="https://necst.it/"  target="_blank" >NECSTLab</a>) who stayed for their PhD.</p>
<p>Let’s start 💪</p>
<h2 id="first-day---unconference">First Day - Unconference</h2>
<p>The first day was dedicated to the unconference. An unconference (also called open space) is an event in which the agenda and the sessions are decided by the participants at the beginning of the day.</p>
<p>This was the second unconference I ever attended (after SoCraTes, which I described <a href="https://marcobacis.com/blog/socrates-2023/"  target="_blank" >here</a>), and I must admit that I’m starting to get addicted! They are a great way to get inspired and they cover a lot of themes and topics (less $$$ spent attending distinct conferences 😜).</p>
<p><div class="image imgB-dde4a2e377d3daafec7ee6e25a7a6c19-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_320x0_resize_q75_h2_box_2.webp 320w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_640x0_resize_q75_h2_box_2.webp 640w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_960x0_resize_q75_h2_box_2.webp 960w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1280x0_resize_q75_h2_box_2.webp 1280w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1600x0_resize_q75_h2_box_2.webp 1600w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1920x0_resize_q75_h2_box_2.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_320x0_resize_q75_bgffffff_box_2.jpg 320w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_640x0_resize_q75_bgffffff_box_2.jpg 640w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_960x0_resize_q75_bgffffff_box_2.jpg 960w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1280x0_resize_q75_bgffffff_box_2.jpg 1280w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1600x0_resize_q75_bgffffff_box_2.jpg 1600w, https://marcobacis.com/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_1920x0_resize_q75_bgffffff_box_2.jpg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/2023-italian-agile-days/iad_unconference_marketplace_hu5d8b3083895f1aa5242e86b459d8b7a1_152020_640x0_resize_q75_bgffffff_box_2.jpg" width="2208"
        height="1242" alt="" title="" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Friday’s unconference agenda</figcaption>

</figure></p>
<p>Here is a summary of the sessions I was able to attend.</p>
<p><em>A little disclaimer: I didn’t take many notes (and I’m writing these summaries after 2 months 😅), so even remembering the title is enough… you’ll notice during which session I took notes and which I did not 😂.</em></p>
<p><em>In addition, I skipped some sessions and just went along with some other groups during the day. That’s the best part of unconferences: conversations just happen, and there are no limits to the discussions outside of the event itself!!</em></p>
<h3 id="unicorns---evolving-systems-where-to-find-them---alberto-acerbishttpswwwlinkedincominaacerbis">Unicorns - Evolving Systems, where to find them? - <a href="https://www.linkedin.com/in/aacerbis/"  target="_blank" >Alberto Acerbis</a></h3>
<p>In his session, Alberto gave an overview of how we can tackle the complexity of software design using Evolutionary Architectures.</p>
<p>When designing a system, we try to find a model that “fits” the problem we are trying to solve. However, the real world is complex (and sometimes chaotic), while software developers try to fit it into a clean, deterministic and simple model.</p>
<p>The guiding principle of Evolutionary Architecture is to perform guided, incremental, non-breaking changes across multiple dimensions (e.g. application and operations). Alberto then gave some links and concepts related to evolutionary architectures, such as:</p>
<ul>
<li>Modularity (low coupling and high cohesion)</li>
<li>Using fitness functions to guide the evolution of the architecture</li>
<li>The tradeoff between DRY and WET software (is it always better to reduce duplication?)</li>
<li>Using different tools for different problems (no silver bullet)</li>
<li>Least Responsible Moment (delaying decisions when you have enough information)</li>
<li>“Laws” such as <em>Postel’s</em> and <em>Conway’s</em></li>
</ul>
<p>After his session, I had a lot to process (I just highlighted some of the arguments he explained), and it was a great overview of software architecture principles!</p>
<h3 id="how-to-stop-writing-unit-tests-and-be-happy---franco-lombardohttpswwwlinkedincominfrancolombardo">How to stop writing unit tests and be happy - <a href="https://www.linkedin.com/in/francolombardo/"  target="_blank" >Franco Lombardo</a></h3>
<p>Franco gave a session on how ATDD (Acceptance Test-Driven Development) can help make us happier by writing easier tests.</p>
<p>ATDD is a flavour of TDD in which we develop a feature by starting with acceptance tests instead of standard unit tests. <em><strong>Acceptance tests</strong></em> are tests written from the perspective of the user and with the language used by the user/business. They are useful because when the test is green, then the user/business (and us) is happy and the functionality is implemented as specified (at least that’s how it should be).</p>
<p>In his session, Franco showed us that doing ATDD is easier than ever. He argued that testing with the real storage (db engine) is easy if the system is designed simply (e.g. without triggers, stored procedures or other complex stuff) and that persistence is not an “implementation detail” after all.</p>
<p>ATDD is not for everyone and every project, and he showed us the cases in which it shouldn’t be used (e.g., inexperienced developers, greenfield projects, UI-heavy applications, or projects too small or too big). In general, ATDD is a tool we can leverage in addition to the others.</p>
<p>I usually develop my tests using a similar approach (from the API controller to the DB, either in memory or in a small container) and find it useful, so Franco’s session confirmed my approach 👍 (even if there were a lot of discussions afterwards).</p>
<h3 id="legacy-code-theory-and-practice---andrea-franciahttpswwwlinkedincominandreafrancia">Legacy Code, theory and practice - <a href="https://www.linkedin.com/in/andreafrancia/"  target="_blank" >Andrea Francia</a></h3>
<p>Andrea gave a lecture (a real one, with a blackboard and in a university campus!) on how to work with legacy code. In the end, he gave a very straightforward summary of the “Working Effectively with Legacy Code” book!</p>
<p>First, he started with some definitions of legacy code, such as:</p>
<ul>
<li>Code without tests, or badly written tests (e.g. fragile, driven by the underlying implementation)</li>
<li>Code we are afraid to touch and modify</li>
</ul>
<p>After defining the enemy, Andrea showed us how to fight it. The way to do it is, of course, to add tests. But how do you add tests when the code doesn’t help (cannot refactor without test, cannot test without refactor)? We can use some techniques such as <strong>characterisation tests</strong>.</p>
<p>Basically, to test a legacy system we treat the system as a black bock driven by its I/Os (disk, DBs, network, external APIs etc..), and drive the I/O with tests to cover the piece of code we need to modify for the feature we have to develop. After covering the legacy code with enough tests, we can finally refactor it and start to develop the new feature.</p>
<p>Andrea told us about some cases that happened to him, such as testing using the log outputs to check that the system was behaving correctly. He also debunked the myth that we cannot use the debugger while doing TDD…with legacy code, everything is possible (and accepted).</p>
<p>Of the entire session I still remember a phase Andrea said: “Tests are like bets”. I think this sums up pretty well how I feel about tests and TDD in general. Every time I write a test, I’m betting that the system will behave in a certain way, and then correct my assumption (when doing characterisation tests) or the underlying implementation (during normal TDD) based on the test output.</p>
<h3 id="tdd-training-for-devs-working-full-time---matteo-vaccarihttpswwwlinkedincominmatteovaccari">TDD Training for devs working full time - <a href="https://www.linkedin.com/in/matteovaccari/"  target="_blank" >Matteo Vaccari</a></h3>
<p>Matteo is a Technical Principal at ToughtWorks, and in his session, he presented a problem he currently has: how do I train developers in how to use TDD, if they are already working full-time on different projects? I must admit I arrived late at this session, but just by watching the drawings there were a lot of ideas 😜</p>
<h3 id="pair-programming-discussion---angelo-ceccatohttpswwwlinkedincominangeloceccato">Pair Programming discussion - <a href="https://www.linkedin.com/in/angeloceccato/"  target="_blank" >Angelo Ceccato</a></h3>
<p>Angelo proposed an open discussion about pair programming. In a small group, we discussed what pair programming means for us, if and how we are using it at work and what are the advantages, disadvantages and common issues with it. I don’t pair often (and never in the “canonical” way at least), and hearing the stories of other developers was interesting, from people who do it every day and for more than half of their workday, to others who are sceptic about some of its implementation, and to others (like me) who never did it apart from emergencies and workshops.</p>
<h2 id="second-day---conference">Second Day - Conference</h2>
<p>The second day was a standard conference, held in a single Polimi building (n. 3 to be precise).</p>
<p>After arriving at the main campus and finding the entrance (on Saturday all secondary entrances are closed it seems 🤔), it was time to grab the goodies bag, buy the conference T-shirt and finally attend the main event!</p>
<p>Here is the usual (incomplete) list of talks I watched (and some notes when I took them).</p>
<h3 id="e-non-ci-indurre-in-tentazione-ma-liberaci-dal-bug---marco-fracassihttpswwwlinkedincominmarco-fracassi">E non ci indurre in tentazione, ma liberaci dal bug - <a href="https://www.linkedin.com/in/marco-fracassi/"  target="_blank" >Marco Fracassi</a></h3>
<p>In his talk, Marco explained how emergent design can help keep a codebase clean, maintainable and close to the domain of the business.</p>
<p>He started with a definition of emergent design and its advantages (e.g. non-speculative, working in small steps, refactoring and simple design), then he went on showing how legacy code has little to none of that!!</p>
<p>Most legacy code contains recurrent (anti)patterns that push it far away from the domain:</p>
<ul>
<li>Layered architecture (code divided by layer instead of features)</li>
<li>Anaemic objects</li>
<li>Big Services doing everything</li>
<li>Dependency Injection with a lot of scattered containers (10+ parameters constructors anyone?)</li>
<li>Behaviour separate from the data (which is caused by all the above)</li>
</ul>
<p>In the long run, these issues affect most legacy systems and lead to unmaintainable code. To make it worse, the problem is not caused by the framework or language (and we love so much to blame the language!).</p>
<p>To solve these issues, Marco proposed some solutions, such as:</p>
<ul>
<li>Introducing repositories to separate domain and persistence</li>
<li>Extracting (domain-based) use cases from big services, to separate responsibilities and make a set of smaller, cleaner functionalities</li>
<li>Bringing data and behaviour closed by using domain objects (again, bringing code away from big services)</li>
<li>Splitting read and write procedures (usually removing useless use cases, most of all in the read part)</li>
<li>Writing tests and add coverage (remembering that coverage itself is not fundamental, but tests can act as a “parachute”)</li>
<li>“contamination”, through pair/mob programming and shared learning</li>
</ul>
<p>The main takeaway from his talk is that the design can emerge if we work in small steps, keeping the domain as central in the application and bringing data and behaviour close together (as in DDD).</p>
<p>Marco just started his YouTube channel <a href="https://www.youtube.com/@ImprovingCode"  target="_blank" >ImprovingCode</a> (in Italian) in which he talks about these (and other) topic, check it out!!</p>
<h3 id="bdd-molto-più-che-testing---fabio-cocchihttpswwwlinkedincominfabiococchi">BDD: Molto più che testing - <a href="https://www.linkedin.com/in/fabiococchi/"  target="_blank" >Fabio Cocchi</a></h3>
<p>Gathering requirements for a feature or a product is always difficult. We can write all the specifications we want, but then, as developers, we are left alone to implement them.</p>
<p>BDD (Behavior-Driven Development) is an agile methodology that enables customers and developers to collaborate on the requirements process. It involves writing a verifiable specification that can be used as acceptance criteria.</p>
<p>Fabio introduced us to this world and its main principles and ingredients. In particular, he described the process of using <strong>behaviours</strong> to model the system requirements and how it helps in delivering value to the business more quickly and with fewer iterations. By writing acceptance criteria using a shared language, developers and customers can communicate effectively and understand the domain together, resulting in higher quality and faster delivery.</p>
<h3 id="tdd-e-il-mito-del-100-code-coverage---gianni-bombellihttpswwwlinkedincomingianni-bombelli-manuela-munarettohttpswwwlinkedincominmanuelamunaretto">TDD e il mito del 100% code coverage - <a href="https://www.linkedin.com/in/gianni-bombelli/"  target="_blank" >Gianni Bombelli</a>, <a href="https://www.linkedin.com/in/manuelamunaretto/"  target="_blank" >Manuela Munaretto</a></h3>
<p>Gianni and Manuela staged a great theatrical show, in which two developers discuss a bug they found in their team codebase.</p>
<p>The twist is that the buggy code has 100% test coverage! How is it possible?</p>
<p>During their session, Gianni and Manuela showed that code coverage isn’t the best metric to follow when writing tests, and that it’s more important to write proper tests (asserting the behaviour of the system, and not only blinding covering lines…).
I didn’t take any notes because I couldn’t stop laughing during the session 😂 it was great, and in the end, they were able to find and fix the bug (and then they lived happily ever after).</p>
<h3 id="just-commit-to-master-please---how-to-actually-implement-ci---daniele-scilliahttpswwwlinkedincomindaniele-scillia">Just Commit to master, please - How to actually implement CI - <a href="https://www.linkedin.com/in/daniele-scillia/"  target="_blank" >Daniele Scillia</a></h3>
<p>Daniele showed <em><strong>why</strong></em> and <em><strong>how</strong></em> to implement Continuous Integration the right way, using Trunk-Based Development. I like how he compared the usual pull-request model with trunk-based development and why they have different use cases (open source software the first, usual product development the latter).</p>
<p>I didn’t take notes, so I’ll just give you a link to Daniele’s <a href="https://danthedev.carrd.co/"  target="_blank" >website</a>.</p>
<p>I also highly recommend his newsletter, <a href="https://learnagilepractices.substack.com/"  target="_blank" >Learn Agile Practices</a>, in which he explains agile practices (technical and not),  each week. I’ve been following him since the beginning of 2023, and every new post was great 👍.</p>
<h3 id="building-a-culture-of-sw-craftsmanship---michele-brissonihttpswwwlinkedincominmichelebrissoni">Building a culture of SW Craftsmanship - <a href="https://www.linkedin.com/in/michelebrissoni/"  target="_blank" >Michele Brissoni</a></h3>
<p>In his talk, Michele presented the <a href="https://swcraftsmanshipdojo.com/"  target="_blank" >SW Craftmanship Dojo</a>, a platform in which he teaches the principles and techniques of software craftmanship with a holistic approach.</p>
<p>The dojo trains students by using techniques taken from the world of martial arts (of which Michele himself is a very expert practitioner). Students learn eXtreme Programming concepts (all the *DDs out there), DevOps and Infrastructure/SRE stuff and also product-related topics, making theme all-around professional software craftsmen.</p>
<p>His talk was really interesting and showed that I still have A LOT to learn in order to be a real  professional 😅</p>
<h3 id="in-between-talks">In between talks…</h3>
<p>While taking a break, I decided to not follow any talk and just roam around the conference.</p>
<p>While wandering around my old university halls, I stumbled upon some people from <a href="https://qmates.tech/"  target="_blank" >QMates</a> (<a href="https://www.linkedin.com/company/qmates/"  target="_blank" >linkedin</a>) who just took an empty lecture room as hostage and started doing the <a href="https://github.com/sandromancuso/Bank-kata"  target="_blank" >bank kata</a> on the small desks used by students.</p>
<p>It was a great moment, as I watched a mob discussing the proper way to develop and test REST endpoints for a fake bank account service in a university room… it couldn’t get better 😁</p>
<p>These are exactly the reasons why I prefer in-presence conferences to their online version…</p>
<h3 id="come-funziona-il-cevello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemi---pietro-roversihttpswwwlinkedincominpietro-roversi-61070527-slideshttpswwwslidesharenetpietroroversi3come-funziona-il-cervello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemipdf">Come funziona il cevello di un programmatore quando impara e affronta nuovi problemi? - <a href="https://www.linkedin.com/in/pietro-roversi-61070527/"  target="_blank" >Pietro Roversi</a> (<a href="https://www.slideshare.net/PietroRoversi3/come-funziona-il-cervello-di-un-programmatore-quando-impara-e-affronta-nuovi-problemipdf"  target="_blank" >slides</a>)</h3>
<p>How does our brain work, and how can we exploit it to work with code better?</p>
<p>Pietro introduced us to the magical world of our brain. He talked about memory, cognitive load, knowledge and flow, and how everything impacts our work as developers.</p>
<p>For example, short-term and working memory are essential to keep a flow state, and we can improve our flow by learning the syntax and some of the documentation of our languages and frameworks (which we never do 😂). This also allows to reduce interruptions (google searches which become a rabbit-hole of surfing the web in various ways) .</p>
<p>Another interesting fact is that working memory is involved in a process called chunking (dividing and storing information in chunks), and with more experience comes better chunking… so, reading more code (and having more experience) allows senior developers to remember it better than the juniors 🤯.</p>
<p>Pietro’s talk was full of these insights, and I enjoyed the explanation behind how our brain works!</p>
<h3 id="navigando-nel-mondo-del-software-tra-modelli-e-realtà---ferdinando-santacrocehttpswwwlinkedincominferdinandosantacroce-marco-massarottohttpswwwlinkedincominmassama">Navigando nel mondo del software, tra modelli e realtà - <a href="https://www.linkedin.com/in/ferdinandosantacroce/"  target="_blank" >Ferdinando Santacroce</a>, <a href="https://www.linkedin.com/in/massama/"  target="_blank" >Marco Massarotto</a></h3>
<p>The last talk I attended was given by Marco and Ferdinando. Together, they explored the difference between models and the reality of software development.</p>
<p>In their talk they linked various arguments and topics (from User Stories to technical debt and the definition of Ubiquitous Language in DDD) to highlight that we operate in a world of approximations.</p>
<p>I enjoyed this session (as I did with Ferdinando’s session <a href="https://vimeo.com/768881541"  target="_blank" >last year</a>) because it reached full circle with the first session I attended the day before (given by Alberto Acerbis, see above) in showing the importance of modelling and facing approximations in our job as developers.</p>
<h2 id="conclusions">Conclusions</h2>
<p>The conference was great!</p>
<p>Last year was my first time and I had some trouble meeting people and just enjoying the event.</p>
<p>This time, after participating in the community a bit more, I was able to attend the conference with a different mindset and just enjoy it.</p>
<p>The fact that the conference was held on the Politecnico campus was the cherry on top: I was finally able to visit the campus again after 4 years and sink into the memories (both good…and bad 😅) of my university years.</p>
<p>I can’t wait to see what next year brings in terms of events, and to keep learning!</p>
<p>See you next time!</p>

      ]]></content:encoded></item><item><title>2023: A Review</title><link>https://marcobacis.com/blog/2023-review/</link><pubDate>Sat, 30 Dec 2023 08:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2023-review/</guid><description>Hi 👋 and welcome to the last post of 2023!
As already done last year, it’s time for a end-of-year recap!
I usually spend the last days of the year eating and laying on the couch (christmas is strong in italy) so don’t expect a long post.
Let’s begin!
2023 Goals Review First, a short check on the goals I wrote in my 2022 review:
❓Learn in public
I definitely tried to expose myself a little more and share what I learned in public.</description><enclosure url="https://marcobacis.com/blog/2023-review/cover_hu8fee9e9e742717870000e95fcd0ea453_80746_480x480_fit_q75_bgffffff_box.jpeg" length="15854" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/2023-review/cover_hu8fee9e9e742717870000e95fcd0ea453_80746_480x480_fit_q75_bgffffff_box.jpeg" width="480" height="320" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2023-review/cover_hu8fee9e9e742717870000e95fcd0ea453_80746_480x480_fit_q75_bgffffff_box.jpeg" width="480" height="320"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 and welcome to the last post of 2023!</p>
<p>As already done <a href="https://marcobacis.com/blog/2022-a-review/"  target="_blank" >last year</a>, it’s time for a end-of-year recap!</p>
<p>I usually spend the last days of the year eating and laying on the couch (christmas is strong in italy) so don’t expect a long post.</p>
<p>Let’s begin!</p>
<h2 id="2023-goals-review">2023 Goals Review</h2>
<p>First, a short check on the goals I wrote in my 2022 review:</p>
<p><strong>❓Learn in public</strong></p>
<p>I definitely tried to expose myself a little more and share what I learned in public. Some examples are my blog posts on books I read (<a href="https://marcobacis.com/blog/atomic-habits-book/"  target="_blank" >here</a>, <a href="https://marcobacis.com/blog/philosophy-of-software-design/"  target="_blank" >here</a> and <a href="https://marcobacis.com/blog/indistractable-book-summary/"  target="_blank" >here</a>), and the github repos for <a href="https://github.com/marcobacis/adventofcode"  target="_blank" >Advent Of Code</a> and <a href="https://github.com/marcobacis/coding-challenges"  target="_blank" >Coding Challenges</a>.</p>
<p>I left a question mark because I think I could have done more this year, and there’s room for improvement.</p>
<p>❓ <strong>Improve as a Backend Developer</strong></p>
<p>Another goal, another question mark. Even though I got better at working on the backend (e.g. I just read <em>Building Microservices</em> and two books on DDD) I didn’t work much with backend systems in the last months, focusing more on device communication (e.g. serial port, BLE) and GUIs (in windows) instead of web applications.</p>
<p>This will definitely change next year (see below for why…spoiler: in my new job I’ll work mostly on web applications 😛).</p>
<p><strong>✅ Attend more meetups and conferences</strong></p>
<p>This is a green flag! I attended a lot of conferences and meetups this year. This helped my in meeting a lot of people and technologies. I documented some of the events in this blog, so make sure to give it a look 😁</p>
<p><strong>✅ Take care of my body and mind</strong></p>
<p>The first half of the year was meh (I reached 100Kg and didn’t exercise), but it got better in the second half: I started to watch more what I eat and started exercising a bit, and right now I’m about 92Kg with a tiny bit of fat less than before 😅.</p>
<h2 id="work">Work</h2>
<p>Let’s deep dive into some aspects of this year, starting with my job as a software engineer/developer/whatever.</p>
<p>The year started with a long-running project finally coming to an end. We finished it by testing with the customer for a last time…..in japan! I went to Okinawa for the tests, and mainland Japan for the final review of the project. In the end, the customer was satisfied by our work and I managed to visit a small japanese town (even if it was just for a day)! I also managed to see sakura trees blooming even if it was march.</p>
<p><div class="image imgB-82c737163d946ad93188de0de7580114-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_320x0_resize_q75_h2_box_2.webp 320w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_640x0_resize_q75_h2_box_2.webp 640w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_960x0_resize_q75_h2_box_2.webp 960w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1280x0_resize_q75_h2_box_2.webp 1280w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1600x0_resize_q75_h2_box_2.webp 1600w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1920x0_resize_q75_h2_box_2.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_320x0_resize_q75_bgffffff_box_2.jpg 320w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_640x0_resize_q75_bgffffff_box_2.jpg 640w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_960x0_resize_q75_bgffffff_box_2.jpg 960w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1280x0_resize_q75_bgffffff_box_2.jpg 1280w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1600x0_resize_q75_bgffffff_box_2.jpg 1600w, https://marcobacis.com/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_1920x0_resize_q75_bgffffff_box_2.jpg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/2023-review/sakura_hu9f83d736fcd1ec324051e145b3d30979_1766392_640x0_resize_q75_bgffffff_box_2.jpg" width="4032"
        height="3024" alt="Sakura Trees Blooming" title="Sakura Trees Blooming" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Too many pictures to share...</figcaption>

</figure></p>
<p>From April to October I worked for <a href="https://weart.it/"  target="_blank" >WeArt</a>, a small startup inside e-Novia focusing on haptics for Virtual/Augmented reality. In particular, I worked on their low-level SDK (e.g. <a href="https://marcobacis.com/blog/docs-as-code-doxygen-awesome/"  target="_blank" >improving the documentation</a>) and their Middleware software (a WinUI/UWP app to communicate with their device).</p>
<p>In WeArt I learned to be more proactive in my work. Being in a small, product-oriented startup shifted my actions from just doing what I was told (common in consulting firms) to actively thinking on how to improve the product itself (in my case, the SDK and Middleware).</p>
<p><div class="image imgB-31568efab1dc746f1ff91bc7a6d94966-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_320x0_resize_q75_h2_box_2.webp 320w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_640x0_resize_q75_h2_box_2.webp 640w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_960x0_resize_q75_h2_box_2.webp 960w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1280x0_resize_q75_h2_box_2.webp 1280w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1600x0_resize_q75_h2_box_2.webp 1600w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1920x0_resize_q75_h2_box_2.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_320x0_resize_q75_bgffffff_box_2.jpg 320w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_640x0_resize_q75_bgffffff_box_2.jpg 640w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_960x0_resize_q75_bgffffff_box_2.jpg 960w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1280x0_resize_q75_bgffffff_box_2.jpg 1280w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1600x0_resize_q75_bgffffff_box_2.jpg 1600w, https://marcobacis.com/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_1920x0_resize_q75_bgffffff_box_2.jpg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/2023-review/touchdiver_hua7ebdf289df51d92c7e8499fa4fb2872_121230_640x0_resize_q75_bgffffff_box_2.jpg" width="2355"
        height="1344" alt="WeArt TouchDIVER" title="WeArt TouchDIVER" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">TouchDIVER ©Weart S.r.l. (weart.it)</figcaption>

</figure></p>
<p>Finally, in December I started a new journey in <a href="https://www.zupit.it/"  target="_blank" >Zupit</a>!</p>
<p>Zupit is a small software house in Trento (Italy) which focuses on agility, code quality, learning and work-life balance. The most interesting aspect of my new job is that I’m working only 6 hours per day (part-time) without compromising on productivity.</p>
<p>The work is fast but already rewarding, even after just 1 month since I started: working less hours has led to improved productivity (we still have to ship the same amount!) and to more focus during working hours. In addition to that, I have time to learn, exercise and relax in the afternoon.</p>
<p>I just started, but can’t wait to get more involved in my new job!</p>
<h2 id="writing">Writing</h2>
<p>It’s been one year since I started this blog!</p>
<p>Overall, I’m satisfied with how the blog is going. I wrote 13 posts in 2023 including this one (not listing them here, you can visit the blog instead 😛), so on average I published one post each month.</p>
<p>Most of the posts are about experiences I had (e.g. conferences, meetups and so on) and on books I read and summarised. I still don’t think I have a lot to say on the technical side that hasn’t been covered by someone else (impostor syndrome will always be there for me), but I hope to improve my writing and my habits.</p>
<p>One thing I struggled with in 2023 was consistency. I wrote most of the posts in batches (so 2 or 3 at a time) and then postponed their publication to fit the goal of “one post each month”. In November and December I ended up with no post scheduled and I didn’t write anything in that period, and that’s why this is the first post in 2 months….</p>
<p>In 2024 I hope to focus and write more on this blog. Also, I hope to improve my content, adding more technical/programming stuff to the more “journal-style” posts I wrote this year.</p>
<h2 id="conferences-and-meetups">Conferences and Meetups</h2>
<p>This year I finally got the courage to get out and attend some conferences and meetups! I mostly stayed in my zone (physically, meaning Bergamo, Milan and northern italy in general) and attended local events, but I also adventured outside Italy once (for FOSDEM).</p>
<p>Here’s the list of conferences I attended in 2023:</p>
<ul>
<li><a href="https://cloudgen.it/codegen/"  target="_blank" >CodeGen</a> - Verona</li>
<li><a href="https://archive.fosdem.org/2023/"  target="_blank" >FOSDEM</a> - Bruxelles → <a href="https://marcobacis.com/blog/2023-my-fosdem-experience/"  target="_blank" >My Experience</a></li>
<li><a href="https://www.ugidotnet.org/e/3087/Web-Day-2023"  target="_blank" >Web Day 2023</a> - Online</li>
<li><a href="https://agilemovement.it/venture/2023/pordenone/"  target="_blank" >Agile Venture</a> - Pordenone</li>
<li><a href="https://www.agilemovement.it/workingsoftware/index.html"  target="_blank" >Working Software Conference</a> - Milan → <a href="https://marcobacis.com/blog/working-software-2023/"  target="_blank" >My Experience</a></li>
<li><a href="https://www.socrates-conference.it/"  target="_blank" >SoCraTeS</a> - Rimini → <a href="https://marcobacis.com/blog/socrates-2023/"  target="_blank" >My Experience</a></li>
<li><a href="https://conferences.codemotion.com/milan2023-live/"  target="_blank" >Codemotion</a> - Milan</li>
<li><a href="https://www.agileday.it/"  target="_blank" >Italian Agile Days</a> - Milan</li>
</ul>
<p>I also took part in some meetups (again, near Bergamo and Milan). I love meetups as they are smaller and more relaxed than a conference. Meeting the organisers and the speakers over a beer after or during the meetup is 100 times easier than at a big conference!!</p>
<p>Some of the meetups I usually attend:</p>
<ul>
<li><a href="https://www.meetup.com/it-IT/xpugbg/"  target="_blank" >XPUG Bergamo</a></li>
<li><a href="https://www.meetup.com/edotechtalks-milan/"  target="_blank" >Tech Talks by eDreams</a></li>
<li><a href="https://www.meetup.com/it-IT/react-js-milano/"  target="_blank" >ReactJS Milano</a></li>
<li><a href="https://www.meetup.com/it-IT/ugidotnet/"  target="_blank" >.NET Italian User Group</a> (UGIdotNet)</li>
</ul>
<p>The only thing I regret about 2023 is that I attended all these events “passively”, without ever proposing as a speaker… I don’t want to make bold claims and become a speaker in 2024, but moving towards that might be the goal (e.g. speaking at company events, or through this blog or… who knows, youtube or something similar 😅).</p>
<h2 id="reading">Reading</h2>
<p>I love reading, both fiction and non-fiction books. Reading allows me to disconnect, relax and either learn something new or distract myself with a good story.</p>
<p>This year I read a bit less than last year (28 books instead of 32). Here’s the list:</p>
<ul>
<li><em>Noise</em> by Daniel Kahneman, Olivier Sibony and Cass R. Sunstein</li>
<li><em>Soundtracks: The Surprising Solution to Overthinking</em> by Jon Acuff</li>
<li><em>#Freestyle</em> by Roberto Ottolino</li>
<li><em>Cronache di Domain Driven Design</em> by Various Authors (see more <a href="https://www.avanscoperta.it/it/libri/"  target="_blank" >here</a>)</li>
<li><em>The War of Art</em> by Steven Pressfield</li>
<li><em>The Every</em> by Dave Eggers</li>
<li><em>Solo</em> by Rebecca Seal</li>
<li><em>La Piena (Blackwater I)</em> by Michael McDowell</li>
<li><em>Matematica Rock</em> by Paolo Alessandrini</li>
<li><em>Decision-making for Software Development Teams</em> by Francesco Strazzullo</li>
<li><em>Less is more: sull’arte di non avere niente</em> by Salvatore La Porta</li>
<li><em>Indistractable</em> by Nir Eyal (my review <a href="https://marcobacis.com/blog/indistractable-book-summary/"  target="_blank" >here</a>)</li>
<li><em>Le coordinate della felicità</em> by Gianluca Gotto</li>
<li><em>The Elegant Universe</em> by Brian Greene</li>
<li><em>Developer Hegemony</em> by Erik Dietrich</li>
<li><em>Domain Driven Design Distilled</em> by Vaughn Vernon</li>
<li><em>The Master Key</em> by Togawa Masako</li>
<li><em>Show Your Work!</em> by Austin Kleon (currently writing a summary of it!)</li>
<li><em>Working Effectively with Legacy Code</em> by Michael C. Feathers</li>
<li><em>The Obstacle is The Way</em> by Ryan Holiday</li>
<li><em>The Arc</em> by Ben Oliver</li>
<li><em>Upheaval: How Nations Cope with Crisis and Change</em> by Jared Diamond</li>
<li><em>So good they can’t ignore you</em> by Cal Newport</li>
<li><em>Building Microservices</em> by Sam Newman</li>
<li><em>Thinking Better. The Art of the Shortcut</em> by Marcus Du Sautoy</li>
<li><em>Tokyo tutto l’anno</em> by Laura Imai Messina</li>
<li><em>Fooled by Randomness</em> by Nassim Nicholas Taleb</li>
<li><em>Make Shift: Dispatches from the Post-Pandemic Future</em> edited by Gideon Lichfield</li>
<li><em><strong><strong><strong><strong><strong><strong>Critica Portatile al Visual Design</strong></strong></strong></strong></strong></strong></em> (Portable Critique to Visual Design) by Riccardo Falcinelli</li>
</ul>
<p>And here’s a list of the books I didn’t finish… I must say, they are less than last year, but it might be because I read less overall.</p>
<ul>
<li><em>LSD, my problem child</em> by Albert Hofmann</li>
<li><em>Meditations</em> by Marcus Aurelius (I try to go back to it sometimes, but I stopped reading it months ago)</li>
<li><em>Irriducibile</em> by Federico Faggin (really interesting, but also a bit criptic)</li>
</ul>
<p>From the list I can see that most of my readings are non-fiction (I read only 5/6 fiction books) and programming-related books. Usually, when I read I do it either to learn something or to get inspired. As I already wrote last year, I have the bad habit of not taking notes often enough, so I don’t recall much of what I read. I hope to get better next year….</p>
<p>Also, next year I hope I’ll read so much that putting a list here won’t have sense anymore 😛</p>
<h2 id="personal">Personal</h2>
<p>Last year I bought and moved to my home with my girlfriend and her cat. The only notable thing I did this year was to finally attach lamps to the walls (instead of letting the lightbulbs dangling 😅). I also bought some furniture and improved my home office (thanks Zupit for that 😛).</p>
<p>A sad note before thinking about my goals for next year: in July, our cat Lucky passed away 😢. He had been with my girlfriend for 8 years and with me for the last year and half. We discovered he had heart issues during the christmas holidays in 2022, and even though he got better during the winter and spring, in the summer he got worse and we had to let him go.</p>
<p>See you Lucky 😢</p>
<p><div class="image imgB-65be6bcd9a29427c7dab6cc08430286e-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_320x0_resize_q75_h2_box_2.webp 320w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_640x0_resize_q75_h2_box_2.webp 640w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_960x0_resize_q75_h2_box_2.webp 960w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1280x0_resize_q75_h2_box_2.webp 1280w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1600x0_resize_q75_h2_box_2.webp 1600w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1920x0_resize_q75_h2_box_2.webp 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_320x0_resize_q75_bgffffff_box_2.jpg 320w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_640x0_resize_q75_bgffffff_box_2.jpg 640w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_960x0_resize_q75_bgffffff_box_2.jpg 960w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1280x0_resize_q75_bgffffff_box_2.jpg 1280w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1600x0_resize_q75_bgffffff_box_2.jpg 1600w, https://marcobacis.com/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_1920x0_resize_q75_bgffffff_box_2.jpg 1920w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/2023-review/lucky_hu7869ae5d2cddfcf33304f62f50113753_305342_640x0_resize_q75_bgffffff_box_2.jpg" width="4032"
        height="3024" alt="Lucky The Cat" title="Lucky The Cat" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">Such a cute boy...</figcaption>

</figure></p>
<h2 id="new-years-resolutions">New Year’s resolutions</h2>
<p>I don’t like setting goals at the end of the year. Christmas Holidays allow me to relax and dream of impossible goals and futures in which everything is perfect and goes according to plans, but reality is never like this.</p>
<p>Still…. let’s make some new year’s resolutions for 2024 😅</p>
<p>For 2024 I have some goals in mind. Last year I wrote too much, so let’s keep it short.</p>
<p>Here’s the list:</p>
<ul>
<li><strong>Write</strong> more regularly on the blog (every 2 weeks?) and more about programming (still keeping “journal-style” posts)</li>
<li>More <strong>exercise</strong> (2 times a week instead of one) and getting in shape (85 kg or less)</li>
<li><strong>Speak</strong> somewhere! Even a small meetup or internal company talks is enough to start</li>
<li>Improve on the <strong>entire stack</strong> (my new job title is “Full-Stack developer” now, so I better start learning those damned frontend frameworks!)</li>
<li>(Again) Attend <strong>conferences</strong> and <strong>meetups</strong> like I did in 2023</li>
</ul>
<h2 id="conclusions">Conclusions</h2>
<p>That’s all! 2023 was great. I met new people, changed job and learned a lot.</p>
<p>I hope 2024 will be better, for me and also for you!</p>
<p>See you next time!</p>

      ]]></content:encoded></item><item><title>Book Summary: Indistractable</title><link>https://marcobacis.com/blog/indistractable-book-summary/</link><pubDate>Thu, 05 Oct 2023 16:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/indistractable-book-summary/</guid><description>&lt;p>Hi 👋 welcome to a new post!&lt;/p>
&lt;p>I&amp;rsquo;m starting to enjoy writing short summaries about books I read, so here&amp;rsquo;s a new one 😛&lt;/p>
&lt;p>&lt;strong>Indistractable&lt;/strong> is a book by &lt;a href="https://www.nirandfar.com/" target="_blank" >Nir Eyal&lt;/a>, a &lt;em>behavioural engineer&lt;/em> who worked and studied the psychology of our attention and applied it to digital product and advertisements. In fact, his first book (”Hooked”) is about the design of habit-forming products (such as games, ads, apps and so on).&lt;/p></description><enclosure url="https://marcobacis.com/blog/indistractable-book-summary/cover_hu89c7113e09917a09a8d029ac1ea681ce_1009962_480x480_fit_q75_bgffffff_box_2.jpg" length="33108" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/indistractable-book-summary/cover_hu89c7113e09917a09a8d029ac1ea681ce_1009962_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/indistractable-book-summary/cover_hu89c7113e09917a09a8d029ac1ea681ce_1009962_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 welcome to a new post!</p>
<p>I&rsquo;m starting to enjoy writing short summaries about books I read, so here&rsquo;s a new one 😛</p>
<p><strong>Indistractable</strong> is a book by <a href="https://www.nirandfar.com/"  target="_blank" >Nir Eyal</a>, a <em>behavioural engineer</em> who worked and studied the psychology of our attention and applied it to digital product and advertisements. In fact, his first book (”Hooked”) is about the design of habit-forming products (such as games, ads, apps and so on).</p>
<p>I didn&rsquo;t read this first book, but it&rsquo;s right next on my reading list!</p>
<p>If in his fist book he unveiled how products make us “distractable” and easily influenced (looking at you, Facebook and TikTok!). This book is instead the complete opposite, as Nir explains all the strategies and behaviours we can adopt to <em>regain our attention</em>.</p>
<h2 id="why-should-we-be-indistractable">Why should we be “indistractable”?</h2>
<p>Nowadays, distractions are everywhere: TV, smartphones and social networks are just the tip of the iceberg in the ways our mind tries to distract herself. But the issue is not only technological, and it has deeper roots in our psyche.</p>
<p>Distraction brings us away from what&rsquo;s important: it can be studying and working, but also having meaningful relationships (do you remember the last time you “really” talked with someone, without turning your smartphone screen on?).</p>
<p>We want to do the right things, but we should also learn how to avoid the <em>wrong</em> ones, and distraction is one of the bad things pulling us away from our actions.</p>
<p>So, being <strong>indistractable</strong> can be considered a superpower, which allows us to be present and more productive, and in general better people.</p>
<h2 id="how-to-become-indistractable">How to become indistractable?</h2>
<p>Our actions can be pulled by two forces: distraction (moving away from what we want) and traction (moving towards our goals). To become indistractable means to follow traction! Traction and distraction are the <strong>outcomes</strong>, while at the input of we have <strong>triggers</strong>, either internal or external. Let&rsquo;s see how to control these four elements.</p>
<p><div class="image imgB-8dd0fb8a7f860905cb7f8aaadfd0f0e2-GIP">
  <figure>
    <picture>
      <source type="image/webp" srcset="https://marcobacis.com/blog/indistractable-book-summary/indistractable_model_hu676ea4fa1115a83cca828c5d63987b62_6094_320x0_resize_q75_h2_box_2.webp 320w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <source type="image/jpeg" srcset="https://marcobacis.com/blog/indistractable-book-summary/indistractable_model_hu676ea4fa1115a83cca828c5d63987b62_6094_320x0_resize_q75_bgffffff_box_2.jpg 320w" sizes="(min-width: 1024px) 100vw, 50vw" />
      <img class="w-full h-auto animate-fade" src="/blog/indistractable-book-summary/indistractable_model_hu676ea4fa1115a83cca828c5d63987b62_6094_640x0_resize_q75_bgffffff_box_2.jpg" width="500"
        height="470" alt="The “indistractable”  model" title="The “indistractable”  model" loading="lazy" />
    </picture>
</div>




<figcaption class="caption">The “indistractable”  model, ©Nir Eyal</figcaption>

</figure></p>
<h3 id="1-master-internal-triggers">1. Master internal triggers</h3>
<p>This is the most important part in my opinion, and also the most difficult. We always blame people, tools, the weather, anything for our actions, but in reality the most important triggers are inside our mind. The other causes we blame instead of ourselves are called <em>proximate causes</em>, as they help us deflect the responsibility to someone/something else.</p>
<p>The reality is that humans do not get distracted to follow pleasure (social media, food, drugs and so on), but to <strong>escape</strong> discomfort.</p>
<p>For example, when I&rsquo;m bored I try to avoid it by going on YouTube, or by eating. When I&rsquo;m writing (right now!) I try to do anything else rather than staying  calm and <em>thinking</em> about what I should write. The ones I described are just superficial issues, but there can be more serious ones (depression, going through a difficult period with our family or work, etc..).</p>
<p>Mastering our internal triggers means understanding and knowing the root causes of our distraction, in order to overcome them. The book spends 6 chapters on this argument, but I think it can be reduced to these steps:</p>
<ul>
<li>Find the root cause of your distraction (hint: it&rsquo;s usually something uncomfortable you are doing or experiencing!)</li>
<li>Practice mindfulness: observe and let the negative emotionand the discomfort dissolve, without judging. Write it down and pay attention to it</li>
<li>Reimagine both the <em>task</em> (make it fun, as explained in <em><a href="https://marcobacis.com/blog/atomic-habits-book/"  target="_blank" >Atomic Habits</a></em>) and <em>yourself</em> (willpower does not go away, and you can practice self-compassion when pulled away by distractions)</li>
</ul>
<h3 id="2-make-time-for-traction">2. Make time for traction</h3>
<p>Traction is given by the actions that draw us to what we want in our life, our <em>values</em>. Distraction is instead when we are pulled away from our goals. There&rsquo;s a catch: how can we say we’re distracted without knowing from <em>what</em> we are pulled away from, what are our goals?</p>
<p><strong>Knowing our values</strong> and goals is the first step in gaining traction.</p>
<p>The second step is to actually <strong>make time for it</strong>, with time-boxing. It&rsquo;s simple (at least that’s how Nir explains it): take a calendar and fill the white spaces with what you want to do… This includes also actions we would think of as distractions! Remember: if I planned to watch an anime or to daydream at work, it’s expected 😇.</p>
<p>I don&rsquo;t really like the idea of planning every moment in my life, and it&rsquo;s  a very difficult thing to do. Anyway, this surely helps fighting distraction better than long-revisited todo lists.</p>
<p>Values and actions can be put in three categories: “<em>You</em>”, ”<em>Relationships</em>” and “<em>Work</em>” (which also includes other things that are not work, such as studying</p>
<p>The first time to schedule is “<strong>You</strong>” time. This means time for sleeping, get healthy and  also mundane things like cleaning yourself 😃. Remember that planning and actually taking the time is the important thing. You do not control the outcomes of your actions, only the inputs. For example, if you want to write or learn something, start by showing up and starting, then the outcome will either come or not by itself, and not entirely in your control.</p>
<p>After planning “You” time, it&rsquo;s important to give time to <strong>relationships</strong>, both with friends and family, and not give them the <em>residual</em> time. It can be going out for dinner, see friends or make time for children.</p>
<p>Finally, schedule also time for <strong>work and study</strong>. Notice that work is the last priority in this plan, while in our life it’s usually the first. We work long hours and without much focus, thinking we should work even more. Instead, create a schedule (with your manager/colleagues/stakeholders) and revisit it periodically (like an agile sprint) to choose which activities have priority and require your attention. Don&rsquo;t work hard, work smart (yes, it’s a cliché, but a very useful one)</p>
<h3 id="3-hack-back-external-triggers">3. Hack back external triggers</h3>
<p>Until now we&rsquo;ve worked with with out internal triggers, and tried to regain our time and link it with our values. It&rsquo;s now time to regain that time effectively, by hacking the external triggers that draw us to distraction.</p>
<p>The book spends 9 chapters on the argument, but the most important question we need to ask ourselves every time we encounter a trigger is: “is the trigger serving us, or <em>are we serving the trigger”</em>?</p>
<p>From this we can hack <em>back</em> the triggers, making them serve us. The chapters can be summarised as:</p>
<ul>
<li>Defend your <strong>focus</strong>, and signal when you are busy and should not be disturbed (the book provides a paper red light to attach to your monitor to do it)</li>
<li>Reduce your time checking (and re-checking) <strong>emails</strong> by sending less emails (less people will respond), delaying your answers, timeboxing your email processing time and finally scheduling office hours to avoid long email threads</li>
<li>Use <strong>chats</strong> sparingly and selectively (be picky). Important communication should be slow!</li>
<li><strong>Meetings</strong> should be for making decisions (not problem-solving and brainstorming), should be hard to call (ask for an agenda and a brief document before) and the people involved should be present (not in “phisically present”, but mentally) and active (no devices used to “escape” or do other work!)</li>
<li>Hack back your devices
<ul>
<li>Remove distracting apps from your smartphone. Use the OS settings to reduce notifications to a minimum, schedule “Do Not Disturb” time and rearrange apps to make is more difficult to use the distracting (but needed) ones. You can also delete apps and use the web version (or use it just on the pc!)</li>
<li>Clean your desktop and disable all notifications on your pc</li>
<li>Save online articles for later and timebox your online reading time. Also, you can listen to articles while you do some less demanding task (chores, walking etc..)</li>
<li>If you really cannot stop using social media, at least stop the infinite scroll of the feed with some desktop extensions. Use social media only as a tool and not an escape</li>
</ul>
</li>
</ul>
<h3 id="4-prevent-distraction-with-pacts">4. Prevent distraction with pacts</h3>
<p>After mastering internal and external triggers, and making time for traction, we are still missing something. The final piece of the puzzle to become indistractable is represented by <strong>pacts</strong>.</p>
<p>A pact is a pre-commitment, a choice done before doing the actual work, which helps in “staying in” the action, in staying indistractable. An example is that of <em>Ulysses</em>, who made a pact with himself and his crew to avoid falling into the Sirens trap.</p>
<p>We can make the same type of pact for our distractions!</p>
<p>A note on this: pacts should be done only after managing the previous 3 indistractable strategies: internal triggers, external triggers and time for traction. Doing it before is almost useless, because we haven&rsquo;t treated the causes of our distraction yet.</p>
<p>Example of pacts that can be done with ourselves include:</p>
<ul>
<li><em>Effort</em> pacts: increase the difficulty of unwanted behaviours (distraction). For example, blocking social networks or asking friends for accountability</li>
<li><em>Price</em> pacts: put money on the line! If you don&rsquo;t commit, pay for it. Price pacts are scary, and should be done only in contexts where external triggers can be managed (and without beating ourselves up if we don&rsquo;t succeed)</li>
<li><em>Identity</em> pacts: identify yourself as what you want to be (e.g. <em>indistractable</em>) and act accordingly. Share your identity with others (social pressure!) and align behaviour with values and identity</li>
</ul>
<p>I find pacts to be a perfect corollary to the other strategies. They are included in my view of “design instead of fight”. If we design ourselves and our environment to follow our goals, it&rsquo;s way easier to succeed.</p>
<h2 id="have-i-become-indistractable">Have I become indistractable?</h2>
<p>I found this book extremely interesting. It is full of strategies and advice on how to fight our distraction and design an environment in which we can work and live with focus and concentration. It&rsquo;s a great companion for other similar books (”Deep Work” by Cal Newport and “Atomic Habits” by James Clear) about productivity and attention, without falling into common stereotypes.</p>
<p>In the end, I think it helped me in getting (just a little bit for now) less distractible, even if I already knew some of the strategies described. The most important thing for me is to know that most of the times, my distraction comes from within (my emotions, mood and so on) and that by finding my real goals and values I be more focused.</p>
<p>This was my short summary and comment on <em>Indistractable</em>. What do you think? Did you read it? If so, share your opinion and insights in the comments or on my social (or in private 😛).</p>
<p>See you next time!</p>
      ]]></content:encoded></item><item><title>Working Software Conference 2023</title><link>https://marcobacis.com/blog/working-software-2023/</link><pubDate>Sun, 02 Jul 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/working-software-2023/</guid><description>&lt;p>Hi 👋 and welcome to a new post!&lt;/p>
&lt;p>Last Friday I attended the 2023 &lt;a href="https://www.agilemovement.it/workingsoftware/" target="_blank" >Working Software Conference&lt;/a> in Milan. The Working Software Conference is an event organised by the &lt;a href="https://agilemovement.it" target="_blank" >Italian Agile Movement&lt;/a>, focused on the second principle of the &lt;a href="https://agilemanifesto.org" target="_blank" >agile manifesto&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Working software over comprehensive documentation&lt;/em>&lt;/p>
&lt;/blockquote></description><enclosure url="https://marcobacis.com/blog/working-software-2023/cover_hue02bc47c33646932b35af6df51d863e8_1802362_480x480_fit_q75_bgffffff_box_2.jpg" length="26908" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/working-software-2023/cover_hue02bc47c33646932b35af6df51d863e8_1802362_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/working-software-2023/cover_hue02bc47c33646932b35af6df51d863e8_1802362_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 and welcome to a new post!</p>
<p>Last Friday I attended the 2023 <a href="https://www.agilemovement.it/workingsoftware/"  target="_blank" >Working Software Conference</a> in Milan. The Working Software Conference is an event organised by the <a href="https://agilemovement.it"  target="_blank" >Italian Agile Movement</a>, focused on the second principle of the <a href="https://agilemanifesto.org"  target="_blank" >agile manifesto</a>:</p>
<blockquote>
<p><em>Working software over comprehensive documentation</em></p>
</blockquote>
<p>The meaning of this principle is that we should focus on delivering value (the working software) to the user instead of writing extensive specification documents (a.k.a. “wasting time”, as all the requirements and documentation will need to be adapted to change in a very short time).</p>
<p>The conference contained a mixture of front sessions and workshops.
In particular, I attended two workshops, one in the morning and one in the afternoon. In this post I present a small summary and comment of the two workshops, with some considerations at the end.</p>
<p>Enjoy!</p>
<h3 id="affoghiamo-i-microservizi-nella-birra---christian-de-simone-and-alberto-acerbis">“Affoghiamo i microservizi nella birra” - Christian De Simone and Alberto Acerbis</h3>
<p><em>“Let’s drown microservices in beer”</em></p>
<p>The first workshop I attended was held by <a href="https://www.linkedin.com/in/aacerbis/"  target="_blank" >Alberto Acerbis</a> and <a href="https://www.linkedin.com/in/desimonechristian/"  target="_blank" >Christian De Simone</a>, and was about how a monolith can deliver value to the customer in a fast way, and without compromising its future extension and scalability.</p>
<p>The first part was a small exercise: we had to design and start implementing a couple of services (purchases and warehouse) for a small brewery. We divided in groups, and in my team we immediately started splitting the two domains in separate micro services communicating with an external broker. We hadn’t even started to implement the system (just coded the first purchases endpoint) that it was time for a discussion with the other teams.</p>
<p>Every team used a different approach: serverless, microservices, monolith and so on…. in the end, Alberto and Christian discussed the different pros and cons of our solutions, and then presented a way to deliver value to the customer without creating unneeded complexity and costs: a <strong>Modular Monolith</strong>.</p>
<p>Alberto showed an example <a href="https://github.com/BrewUp/WorkingSoftware-2023"  target="_blank" >solution</a>, with the two different domains implemented as projects inside the same solution. Every domain was separated from the other (and the separation checked with <a href="https://archunitnet.readthedocs.io/en/latest/"  target="_blank" >ArchUnit</a> tests) and communicated with a common broker implemented with the <a href="https://github.com/jbogard/MediatR"  target="_blank" >MediatR</a> library. This kind of architecture has the pros of both monolith (fast iterations for a small team and small product) and modular and event-based applications, allowing further extensibility in the future, <strong>if</strong> and when the business will grow.</p>
<p>After seeing the implementation of a modular monolith, a question remained: how do we deploy it? And how do we keep costs to a minimum doing it? Different solutions exist:</p>
<ul>
<li>Monolith executable deployed on a VM</li>
<li>Docker container deployed using docker compose or k8s</li>
<li>Serverless solutions such as container-as-a-service or function-as-a-service</li>
</ul>
<p>Christian showed us a possible solution: given that the first implementation of the system is a simple monolith, it’s possible to keep costs low by taking advantage of managed serverless solutions, and using docker allows to still be prepared for future extensions to the system (e.g. in a Kubernetes cluster).</p>
<p>Our task for the second half of the workshop was to “dockerize” the simple endpoint we developer earlier and push it to a GitHub repository. He then showed us a way of deploying docker containers in production, by using a managed service offered by <a href="https://www.scaleway.com/en/serverless-containers/"  target="_blank" >scaleway</a>.</p>
<p>Finally, it was time to show off how we could deploy to Kubernetes, in case our brewery would grow a lot!! Christian set up a small Kubernetes cluster (always on scaleway) in which to deploy our services when they were pushed on a GitHub repository. He also explained a useful tool for deploying on Kubernetes, called <a href="https://helm.sh"  target="_blank" >helm</a>, which allows to define “charts” (parametrised templates of k8s resources and deployments) that can be deployed as a single unit. Helm is useful both for our projects and to deploy external dependencies (he deployed a MongoDb instance with a click).</p>
<p>Alberto and Christian explained the Modular monolith concept in a easily understandable way, and we were able to gain some concepts and understand the pros and cons of it. In addition, the live code explanation and live deploy to Kubernetes were amazing 😃. I also discovered some tools (MediatR, ArchUnit and helm) that I didn’t know yet, and will try for sure in my projects!</p>
<h3 id="faccio-prima-il-refactor-o-i-tests---gianni-bombelli">“Faccio prima il refactor o i tests?” - Gianni Bombelli</h3>
<p><em>“Should I do refactoring or tests first?”</em></p>
<p>In the afternoon, I participated in a workshop held by <a href="https://www.linkedin.com/in/gianni-bombelli/"  target="_blank" >Gianni Bombelli</a> and focused on testing and refactoring a (small) piece of legacy code.</p>
<p>We started the workshop with a great ice breaker: Gianni gave us a roll of toilet paper and asked each participant to draw as much paper as we usually use…. then, for each square of paper, each one had to say something about him/herself. Even before coding, I learned something 😂 to use less paper…</p>
<p>The workshop exercise was to work in pairs, testing and refactoring a small piece of code (you can find it already solved by Gianni in his <a href="https://github.com/bombo82/workshop-ws-2023"  target="_blank" >repository</a>) themed around the “Another brick in the wall” song by Pink Floyd (obviously, Gianni was wearing a “The Wall” t-shirt 😃). I paired with Christian (from the morning workshop, see above) we started to write a small test for the already implemented method we found in the repo, and….. it threw a “NotTestableCallException”!</p>
<p>Some quick notes about the exercise:</p>
<ul>
<li>We couldn’t use external dependencies and libraries</li>
<li>No Mocks</li>
<li>The code worked in production, even if we encountered difficulties in testing it! So, we should have touched it with care</li>
</ul>
<p>The exception we found was a simple example of what we could find in real production code: a static method to get the logged in user (e.g. taken from spring or from .NET authentication modules), which would work when deployed but not on our local setup.</p>
<p>To continue testing this code we should have removed the exception. But how to remove it without changing the production code and without testing it first? How could we test without refactoring first, and refactor without tests?</p>
<p>Gianni solved this dilemma for us: we could leverage some minimal and automated refactoring (available in most IDEs) to “clean” the code enough to write some tests. In our case, this meant extracting the untestable method in a separate method, and extending the class under test to override the extracted method!</p>
<p>Using an overridden method in a class used only for testing is similar to mocks and stubs, but in this case the “trick” (and the smell) was quite visible (in the tested and the test classes) as a remainder for us to clean this code afterwards.</p>
<p>We used this method for most of the workshop, extracting problematic code from the tested method and using this for our purposes. In particular, we focused on:</p>
<ul>
<li>Static/Singleton objects and methods out of our control</li>
<li>System calls (e.g. the use of DateTime.Now for equality)</li>
<li>Possibile side effects given by external dependencies</li>
</ul>
<p>After covering all the code with tests, we were finally able to refactor it easily. We tried by ping-ponging refactoring pieces of code between me and Christian, and finished in no time!</p>
<p>A last issue we encountered was how to refactor a possible side effect given by the use of a DAO (Data Access Object). Gianni helped us by explaining that in these cases, the issue can be solved with an in-memory structure to mimic the underlying object without using the real dependency.</p>
<p>In the end, we finally refactored the code to our liking, and ended up the workshop with a discussion on what we had learned.</p>
<p>So, what comes first, refactoring or testing? Here&rsquo;s the solution: first, apply the minimum set of “safe” refactoring to make the code testable. Then, cover the code with tests. Only after that you can refactor the code “properly”! In most cases it will be an iterative process of refactor → test → refactor.</p>
<p>Gianni was a great instructor. He let us bang our heads against the code, and only after he showed us how to work with it. His explanations were on point and, most of all, he encouraged us to discuss with him and the other pairs. I learned some neat tricks to work with untested (and untestable) code and it was great!</p>
<h2 id="the-end">The End!</h2>
<p>The Working Software Conference was a great event to meet new people and learn new technologies and ways to work as a software developer. I only attended two workshops, but I would have wanted it to go on for way more than a single day! All the instructors were prepared and engaging, and I learned a lot during the day. I hope to attend other events like this in the near future!</p>
<p>That&rsquo;s all for today. Thanks, and see you next time! 👋</p>
      ]]></content:encoded></item><item><title>Book Summary: A Philosophy of Software Design</title><link>https://marcobacis.com/blog/philosophy-of-software-design/</link><pubDate>Sat, 10 Jun 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/philosophy-of-software-design/</guid><description>&lt;p>Hi 👋  and welcome to a new post!&lt;/p>
&lt;p>Today I’ll post a summary of a book I read at the beginning of 2023, titled “&lt;em>A Philosophy of Software Design&lt;/em>”, by &lt;em>John Ousterhout&lt;/em>. John is a professor at Stanford, where he teaches “Operating System Principles” and “Software Design Studio”.&lt;/p>
&lt;p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.&lt;/p></description><enclosure url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" length="53548" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/philosophy-of-software-design/cover_hu15d0d69b3dfadced30ef4609af0f8696_283546_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="360"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋  and welcome to a new post!</p>
<p>Today I’ll post a summary of a book I read at the beginning of 2023, titled “<em>A Philosophy of Software Design</em>”, by <em>John Ousterhout</em>. John is a professor at Stanford, where he teaches “Operating System Principles” and “Software Design Studio”.</p>
<p>In the book he distills a career worth of advice, taken from his personal experience and the issues and solutions emerged while teaching his software design course.</p>
<p>I wrote this summary mainly for myself, to remember the concepts expressed in the book. There might be missing information and inconsistent levels of detail 😅 just a disclaimer.</p>
<p>Let’s start!</p>
<h2 id="its-all-about-complexity">It’s All About Complexity</h2>
<p>Writing Software is one of the purest creative activities done by humans. It allows to create entire systems and world only constrained by the developers’ imagination.</p>
<p>However, the greatest limitation of creating software is our ability to <em>understand</em> it. Over time, complexity will inevitably increase, so we must find ways to minimise its impact. But <strong>what</strong> is complexity, and how can we <strong>reduce</strong> it? These are the goals of the book.</p>
<blockquote>
<p>Complexity is anything related to the structure of a software system that makes it hard to understand and modify the system.</p>
</blockquote>
<p>Complexity manifests itself with symptoms:</p>
<ul>
<li><strong>Change Amplification</strong>: simple changes require to modify code in many different places</li>
<li><strong>Cognitive Load</strong>: how much a developer needs to know to complete a task
(e.g. shorter but difficult to understand is worse than longer but easier to understand code)</li>
<li><strong>Unknown Unknowns</strong> (the worst): it’s not obvious which code to modify/add to complete a task</li>
</ul>
<p>But what are the causes of complexity? The book highlights two, <em>dependencies</em> and <em>obscurity</em>, which can be reduced by making code obvious and easy to read, by encapsulating the complexity in separate modules and in general by designing the system better (easy right? 😅).</p>
<h2 id="tactical-vs-strategic-programming">Tactical vs Strategic Programming</h2>
<p>To improve the quality of software, we must change out <em>mindset,</em> from <strong>tactical</strong> to <strong>strategic</strong>.</p>
<p>Tactical programming focuses only on working software. “If it works it’s ok, let’s go on the next task”. Thinking in terms of working code, and not quality and design, leads to incremental complexity in the long term. Code becomes more complex because every small complexity adds up. Refactoring is seen as a cost because it will slow down developers, so the design is never modified from the starting one.</p>
<p>Strategic programming is the solution to increasing complexity. The primary goal of strategic programming is to <em>produce a great design, which also happens to work</em>. It can be seen as an investment in the quality of software, which over time will avoid complexity and allow to ship features fast and lower development costs.</p>
<p>Some modern software trends (such as Agile and TDD) expose to the risk of tactical programming, by proposing an iterative approach and focusing on features instead of abstractions. When working in an iterative approach it is then important to focus on <strong>abstractions</strong> instead of single features/modules/methods, and outside-in design might be a possible solution (my take on the argument at least, read more <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >here</a>).</p>
<h2 id="modular-design">Modular Design</h2>
<h3 id="deep-modules">Deep Modules</h3>
<p>The center of the book is dedicated to modular design and its main benefits. In modular design, a software system is decomposed in a set of (relatively) independent modules. The goal while designing a modular system is to minimise the dependencies between modules.</p>
<p>A dependency can be formal, based on the public <em>interface</em> of a module, or informal, based on the module’s <em>behaviour</em> and side-effects. The book advocates for <strong>deep</strong> modules, meaning modules that have a simple interface hiding powerful functionalities. This is in contrast to <strong>shallow</strong> modules, with complex interfaces and simple implementations.</p>
<p>An example of deep module is the Unix I/O api, which exposes simple methods (open, read, write, close) to manage a really complex underlying system (filesystems, buffers, disks and so on). Examples of shallow modules are instead pass-through methods, linked lists and in general all the classes we create which don’t hide the underlying implementation.</p>
<h3 id="information-hiding">Information Hiding</h3>
<p>Information hiding is the fist technique that can be used to create deep modules. It consists in encapsulating design decisions and information behind an interface which doesn’t expose it, thus hiding the underlying complexity (examples of underlying information: networking, data structures, multithreading, parsing and serialization, system and physical stuff like protocols and disks, etc..).</p>
<p>The opposite of information hiding is information leakage, in which the underlying design choices and implementation  “leak” from the interface. One of the causes of information leakage is <strong>temporal decomposition</strong>, in which the execution order of the operation is reflected in the code structure (e.g. class to read, then to modify and finally a class to write the result… they pass the underlying structure among them, leaking it outside the actual interface). The solution is actually contrary to the current best practices, which proposed to create a lot of small classes with shallow interfaces: create slightly larger classes which encapsulate more operations (still keeping levels of abstraction separated). The same thing can be done inside classes, by using information hiding and deep (private) methods to hide implementation details.</p>
<h3 id="general-purpose-modules-are-deeper">General-Purpose Modules are Deeper</h3>
<p>Another consideration is to think about <strong>general-purpose</strong> classes instead of special-purpose interfaces. A general-purpose interface is by definition deeper, as it must present a common (we hope simpler) interface to the users to deal with different cases. A special purpose interface is instead designed around the special case it is handling. The goal should be to design <em>somewhat general-purpose</em> interfaces without over-engineering the code too early (it’s an investment, but it shouldn’t block the development and risk to be useless in the future). The book proposes three questions (”What is the simplest interface for the current use?”, “In how many situations will this method be used?”, and “Is this API easy to use for my current needs?”) to discern if the class is general purpose or just over-engineered.</p>
<h3 id="different-layer-different-abstraction">Different Layer, Different Abstraction</h3>
<p>Systems are usually designed as <strong>layers</strong>, each with a different level of abstraction offered. When two adjacent layers offer similar abstractions, this is a red flag. Most of the times this leads to shallow modules, which don’t hide complexity and just bloat the system.</p>
<p>The biggest example are pass-through methods, which just call the same method of the underlying layer. This approach doesn’t hide anything and adds complexity to the system, as it adds a similar interface without adding functionality! The book proposes three solutions:</p>
<ul>
<li>Expose the lower layer directly to the higher-level modules</li>
<li>Redistribute functionality between classes</li>
<li>Merge the two layers</li>
</ul>
<p>In some cases, having duplicated interfaces is ok, such as in <strong>dispatcher</strong> and interfaces with multiple implementations (such as disk drivers). In most cases it is instead harmful.</p>
<p>One kind of API duplication is given by <strong>decorators</strong>. A decorator has always the same interface, but different implementations which are used to extend the functionality. This might lead to an explosion in the number of decorators, each for a single operation. This represents a case of <em>shallow</em> modules.</p>
<p>Another form of duplication is given by <strong>pass-through variables</strong>, which must be passed between multiple layers and it’s basically a leaked information. Think about configuration parameters and arguments that are used by lower level classes, but not by the higher levels. Pass-through variables add complexity because they force all the intermediate layers to be aware of their existence. The solutions for this problem are mostly ugly, so a compromise must be reached and it’s a design decision:</p>
<ul>
<li>Store the information in a global variable</li>
<li>Use an already existing object related to the lower-level module in which to put the variable</li>
<li>Introduce a <em>context</em> object, which presents some of the disadvantages of global variables, but allows to have multiple instances in the same process and it’s more test-friendly</li>
</ul>
<h3 id="pull-complexity-downwards">Pull Complexity Downwards</h3>
<p>The goal of software design is to minimise complexity, thus it’s important to hide the complexity whenever it is possible. This is also valid for interfaces. It is better to make a more complex implementations, if that means a simpler interface for the users. This relates to the “investment mindset” explained at the beginning of the book.</p>
<p>The most important lessons is to avoid exposing configuration parameters as much as possible, and if necessary, to compute reasonable defaults if that’s the case.</p>
<p>Don’t take it too far however, by putting all of the code into a class or merging too many classes. Pulling down complexity:</p>
<ul>
<li>should simplify the interface</li>
<li>should be done on functionality related to the existing one</li>
<li>should result in many simplifications elsewhere in the application</li>
</ul>
<h3 id="together-or-apart">Together or Apart?</h3>
<p>Deciding to merge or divide functionality is a fundamental question developers face. In general, the rule is to <strong>simplify</strong> the interfaces and to create <em><strong>deep</strong></em> modules and methods. Splitting or putting together code can help, but it’s full of compromises and choices.</p>
<p>Subdividing may increase complexity (it creates a higher <strong>number</strong> of components, additional code to manage, might lead to more dependencies and separation or duplication of cohesive functionalities. Bringing pieces of code together might help in reducing the complexity, and good indicators are:</p>
<ul>
<li>Shared information</li>
<li>Simpler interface when merged</li>
<li>Duplication of functionality</li>
</ul>
<p>Splitting is instead indicated when there is a mixture of general and special purpose code in the same module (it might be better to separate the two) and when the functionalities inside the module are not related. In general, a method/module should <strong>do one thing and do it completely</strong>.</p>
<p>When splitting is important to still keep modules deep, while us developers have a tendency to split too much (I’m actually torn on this, given the advice from uncle bob and countless people saying to divide in minuscule, but <strong>shallow</strong>, methods).</p>
<p>Splitting can be done by:</p>
<ul>
<li>Extracting a subtask into a separate method (keeping the methods deep, remember!)</li>
<li>Splitting in two separate methods → avoid conjoined methods, in which you cannot understand the methods/modules independently. also, avoid shallow methods</li>
</ul>
<p>Examples of the chapter:</p>
<ul>
<li>Merge http reading and parsing method because they shared the http request informations</li>
<li>Bring together to simplify the interface (what should be done with stream and buffers in java)</li>
<li>Separate a class for logging</li>
<li>Separate text-related stuff and ui operations in the editor example (general text handling vs special operations such as selection and undo)</li>
</ul>
<h2 id="error-handling">Error Handling</h2>
<p>Exception handling is a huge source of complexity in software systems. An exception alters the flow of the program, and must be either handled or reported to the upper layer. In addition, code that handles exceptions tends to be verbose, complex and an additional source of exceptions itself!</p>
<p>Programmers tend to throw exceptions at every suspicious behaviour, but a class with a lot of exceptions is <em><strong>shallow</strong></em> and leads to further complexity. The book list 4 ways to reduce exceptions in our code.</p>
<ul>
<li><strong>Define errors out of existence</strong>: change the code in order to handle special cases (or avoid them) without raising exceptions</li>
<li><em>Masking</em>: detecting and handling the exception at a lower level (e.g. with retries)</li>
<li><em><strong>Aggregation:</strong></em> handle many exceptions with a single piece of code at a higher level and in a more generic way</li>
<li><strong>Crash/Abort</strong>: to be used only for exceptions for which there is no recovery (e.g. most out-of-memory and I/O errors)</li>
</ul>
<p>The same principles can be used to handle special cases, and not just errors, in our code. Defining special cases out of existence with general-purpose code, or handling special cases in separate internal methods and classes can help create deep modules, thus reducing complexity.</p>
<h2 id="commenting-code">Commenting Code</h2>
<p>Comments are the most important form of documentation that developers can write: they help improve the design (if written before writing code), reduce cognitive load and remove unknown unknowns by capturing both high and low-level details that are not present in the code.</p>
<p>However, programmers tends to not write (or delay writing) comments, with main excuses being that “code should be self-documenting” (leading to smaller methods and shallow modules), that they don’t have time (it doesn’t take much), that they have seen only worthless comments (that’s why it’s important to write them correctly) and that they require constant update (that’s because they are coupled to the implementation, and they shouldn’t).</p>
<p>In general, comments should describe the <em><strong>what</strong></em> and <strong>why</strong> of the underlying code, and not the how (implementation). They shouldn’t just repeat the code, and instead <strong>add precision</strong> or provide the underlying <strong>intuition</strong> and <strong>reasons</strong> why the code was written in the first place (e.g. design decision, fixed bug reference, adherence to protocols and standards etc..) . An example are interface comments, which allows the user of an interface to see what it does without reading the underlying code. Implementation comments describe complex details inside the code, but they should be kept <em><strong>near</strong></em> the code they describe (e.g. not at the beginning of a method or in the interface definition). <em><strong>Cross-Module</strong></em> comments should be kept in a easily discoverable place for the developer (e.g. in a common class/file, or in extreme cases in an external doc file, even if less desirable).</p>
<p>Comments can also be used as a <strong>design</strong> <strong>tool</strong>, by writing them before the code. In this way, the comments will reflect the high-level overview of the implementation, will be written better and force the developer to think about the design before coding. If comments are complex or describe the implementation in too much detail, then the final design will be complex and/or shallow.</p>
<h2 id="consistency-and-clarity">Consistency and Clarity</h2>
<p>The final advice of the book is that code should be <strong>obvious</strong>, meaning that the reader should have all the information needed to understand the code and modify it. Being obvious means having a low complexity and clear interface. This can be done by working both the design and the <em>consistency</em> of the code.</p>
<p>Regarding consistency, it can be enforced by:</p>
<ul>
<li>Following conventions and enforcing a coding style (e.g. with tools such as linters and with code review)</li>
<li>Giving the right <strong>names</strong> (they must be precise, with a clear definition and purpose, and consistent in the entire codebase)</li>
<li>Documentation (both in form of <strong>comments</strong> and external documentation for conventions and overall design)</li>
</ul>
<p>In general, the code shouldn’t violate the reader’s expectation, in order to work as a cognitive leverage: if the design is consistent and obvious, once the developer learns how something is done in one place, he can use that knowledge to understand other places of the codebase which use the same approach.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed this book. It was short (just 170 pages!), but full of insights, opinions and a ton of advice!</p>
<p>Some advice contained in the book made me think about current practices. For example, short methods are a cornerstone of clean coding, but the author goes against them when they make the code “shallower”. Another controversy are the chapters on commenting code, in which the author goes against the myth of “self-documenting code”.</p>
<p>I must admit that I don’t always follow the advice given by the author (for example I don’t comment the code much, and sometimes consistency is not my first concern), but from now on I’ll watch out on many of the “red flags” contained in the book.</p>
<p>That’s it for today! I hope you enjoyed this summary. I might have skipped some concepts and chapters (e.g. the last one about “designing for performance”). I recommend this book for anyone interested in improving his development and design skills.</p>
<h3 id="bonus">Bonus</h3>
<p>PS. The book contains a list of “red flags” to keep in mind while writing or reviewing code. Each of the red flags might represent the symptom of design issues in the system.</p>
<p>Here it is:</p>
<ul>
<li><strong>Shallow Module:</strong> the interface of a class or method isn’t much simpler than its implementation</li>
<li><strong>Information Leakage</strong>: a design decision is reflected in multiple modules</li>
<li><strong>Temporal Decomposition</strong>: the code structure is based on the order in which operations are executed, not on information hiding</li>
<li><strong>Overexposure</strong>: an API forces callers to be aware of rarely used features in order to use commonly used features</li>
<li><strong>Pass-Through Method</strong>: a method does almost nothing except pass its arguments to another method with a similar signature</li>
<li><strong>Repetition</strong>: a nontrivial piece of code is repeated over and over</li>
<li><strong>Special-General Mixture</strong>: special-purpose code is not cleanly separated from general-purpose code</li>
<li><strong>Conjoined Methods</strong>: two methods have so many dependencies that it’s hard to understand the implementation of one without understanding the implementation of the other</li>
<li><strong>Comment Repeats Code:</strong> all of the information in a comment is immediately
obvious from the code next to the comment</li>
<li><strong>Implementation Documentation Contaminates Interface:</strong> an interface
comment describes implementation details not needed by users of the thing
being documented</li>
<li><strong>Vague Name:</strong> the name of a variable or method is so imprecise that it doesn’t
convey much useful information</li>
<li><strong>Hard to Pick Name:</strong> it is difficult to come up with a precise and intuitive name
for an entity</li>
<li><strong>Hard to Describe:</strong> in order to be complete, the documentation for a variable or
method must be long</li>
<li><strong>Non-obvious Code:</strong> the behaviour or meaning of a piece of code cannot be
understood easily</li>
</ul>
      ]]></content:encoded></item><item><title>Book Summary: Atomic Habits</title><link>https://marcobacis.com/blog/atomic-habits-book/</link><pubDate>Tue, 14 Mar 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/atomic-habits-book/</guid><description>Hi 👋 and welcome to a new post!
Today I’m publishing the (raw) notes I took while reading “Atomic Habits: An Easy and proven way to build good habits and break bad ones”, by James Clear.
Even though I read this book two years ago, I stumbled across this notes and they were helpful in remembering its main ideas and concepts. I know there are many summaries and reviews of this book.</description><enclosure url="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" length="16251" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="333" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/atomic-habits-book/cover_hueaefce49bd108d892c9e9919fc819a17_60788_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="333"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋  and welcome to a new post!</p>
<p>Today I’m publishing the (raw) notes I took while reading “Atomic Habits: <em>An Easy and proven way to build good habits and break bad ones”,</em> by James Clear.</p>
<p>Even though I read this book two years ago, I stumbled across this notes and they were helpful in remembering its main ideas and  concepts. I know there are many summaries and reviews of this book. Still, I&rsquo;ll keep this notes on the blog as a personal learning reference.</p>
<p>If you want to see how I personally understood the concepts explained in the book, keep reading, and enjoy!</p>
<h2 id="intro">Intro</h2>
<p>In the introduction, James writes about his teen accident with baseball and his recovery. He then talks about his college years, in which he experimented with his habits to improve, learn and become a better person and how that brought to him writing his blog and the book.</p>
<h2 id="fundamentals">Fundamentals</h2>
<p>The first thing to learn about habits is that the are the <strong>compound</strong> <strong>interest of personal improvement</strong>. By harnessing small habits and improving by 1% every day, one can make exponential progress in the long term.</p>
<p>I don&rsquo;t agree entirely with the expression &ldquo;1% better every day&rdquo; because in the long run i think that improvement decreases as one become better at something. We first start by improving a lot, but with time progress becomes exponentially more difficult. Still, the advice to improve by a bit every day it’s still valid.</p>
<p>Another reminder of this chapter is that also bad habits follow the same principle: getting a little bit worse everyday means getting <strong>a lot worse</strong> in the long run.</p>
<p>To close the first chapter, the author recommends to think about <strong>systems</strong> instead of <strong>goals</strong>, because goals are not sustainable in the long period. Also, a system is more methodic and doesn&rsquo;t change once you reach a goal.</p>
<p>The second chapter talks about reverting the way in which we set habits, from <strong>outcome-based</strong> to <strong>identity-based</strong>.</p>
<p>When thinking through outcomes, each habit serves a single goal, and after that is reached we face a sense of void and don&rsquo;t continue with the habit anymore. This happened to me while at university, as I made the habit of studying just for the exams and not for the long term goal of remembering the concepts studied.</p>
<p>James advocates instead for an internal change to drive habit-forming (identity → process → outcomes). By <em><strong>identifying</strong></em> with the new person one wants to become, it&rsquo;s easier to create and stick to habits. For example, I made the choice to <em>become</em> a healthier person, so I decided to start working out during the week and eating better. If the only goal was only to lose a certain amount of weight, I don&rsquo;t think I would have stuck to it for a long time.</p>
<p>The third chapter finally gives an high level overview on how to build better habits. Each habit (good or bad) follows the <strong>cue → craving → response → reward</strong> step. Following this steps it&rsquo;s possible to create good habits and eliminate bad ones. James then lists the four laws of behavioural change, which he will explain throughout the book. To create a good habit, you should:</p>
<ol>
<li>Make it obvious</li>
<li>Make it attractive</li>
<li>Make it easy</li>
<li>Make it satisfying</li>
</ol>
<p>To remove bad habit, you should follow the same steps, but reversed, so:</p>
<ol>
<li>Make it invisible</li>
<li>Make it unattractive</li>
<li>Make if difficult</li>
<li>Make it unsatisfying</li>
</ol>
<h2 id="first-law-make-it-obvious">First Law: Make it obvious</h2>
<p>The first law is about creating the right environment and the right <strong>clues</strong> to attach to the habits you want to make. In particular, the first thing to do is to increase your <strong>awareness</strong> and list the different habits  that you have (both good and bad ones) → Habits Scorecard. The scorecard allows you to be more aware of your behaviours, in order to keep or change them after.</p>
<p>After rising the awareness on the behaviours to change or add, it&rsquo;s time to make a plan! Without a simple direction on the new habit, it&rsquo;s way more difficult to stick to it. The second technique discussed related to the first law is <strong>implementation intentions</strong> → &ldquo;I will [behaviour] at [time] in [location]&rdquo;. In addition to this, you can use <strong>habit stacking</strong>, which means identifying an existing habit you already have and attach the new habit to that (&ldquo;After I [current habit], I will [new habit]). These two methods create obvious <strong>cues</strong> for the new habit, and design a clear plan for when and where to take action.</p>
<p>After taking care of which habits to create/keep and how to plan them, it&rsquo;s time to make the cues <strong>obvious</strong>. For this, the most important factor is the environment. The author says &ldquo;Behaviour is a function of the Person in their environment&rdquo;, and this means that motivation is not enough, and most of the times is irrelevant. Architecting the right environment is then the best way to boost our habit progress. The book shows some examples, I&rsquo;ll show some which I personally use:</p>
<ul>
<li>I put a book right next to my bed to read before sleeping</li>
<li>I have my pills in the kitchen, so that I remember to take them at breakfast and dinner every day</li>
<li>I create a new journal page (on notion) for the next day in the evening and keep it open in the app, so that whenever I open it I remember to journal</li>
</ul>
<p>The same thing can be applied to our digital environment. For example, moving some apps on the first screen, and apps we still need to keep but don&rsquo;t want to use in other screens. In this way, we encourage useful apps for our habits (e.g. I keep podcasts, medium and notion on my home screen, and hide all video and social apps in a subfolder in the other screen on my phone). This also work with notifications (disabling unwanted notifications and so on).</p>
<p>The final summary of this law is explained in chapter 7. We&rsquo;ve all been said that we lack self control and need more discipline, but the fact is, we need to <strong>design</strong> our environment and behaviour to not need self-control! <strong>Resisting temptations is an ineffective strategy</strong> in the long term. To remove bad habits we need then to reduce exposure to the cue that cause them (good habit → make it obvious, bad habit → <strong>make it invisible</strong>).</p>
<h2 id="second-law-make-it-attractive">Second Law: Make it attractive</h2>
<p>The second law of behaviour change is <em>make it attractive</em>. We should make our good habits tempting, &ldquo;inviting&rdquo; with different strategies. Habits are a <em>dopamine-driven feedback loop</em>, meaning that we usually have different dopamine levels (dopamine isn&rsquo;t the only factor, but it&rsquo;s used to give an idea) in different habit phases (remember cue, craving, response and reward).</p>
<p>At first, dopamine is high only after the reward. While creating a habit (and always after that) dopamine tends to rise in <em>anticipation</em> of the reward (craving), then becomes lower during the response phase (if we don&rsquo;t receive the reward later) and it should rise at the reward phase.</p>
<p>We can use this insight to make a habit attractive, by using <em><strong>temptation bundling</strong></em> (basically, stacking a habit together with another more attractive habit/activity used as a reward). It can also be used with habit stacking to make a powerful strategy:</p>
<ol>
<li>After [current habit], I will [habit I need] → stacking</li>
<li>After [habit I need], I will [habit I want]  → temptation bundling</li>
</ol>
<p>it relies on transitiveness to associate the habit I need with what I want to do after, and relates it to the initial cue/habit.</p>
<p>Another way to make a habit more attractive is to use social pressure and imitation, which are innate in our instincts. We tend to imitate 3 groups:</p>
<ol>
<li>The <strong>close</strong> → Surround yourself with people/culture where the behaviour you desire is the normal behaviour, and with which you already have something in common</li>
<li>The <strong>many</strong> → We tend to follow the herd, so when changing habits means going against the group, the habit will be unattractive, while it will be attractive if it means fitting in the group</li>
<li>The <strong>powerful</strong> → We imitate people we envy and see as powerful/better, so try to get approval and praise for your habit and it will be more attractive</li>
</ol>
<p>Finally, we associate emotions and feeling to our habits. They are the way in which our brain processes cues, and we can leverage them to control our habits. In particular, we can associate good feelings and emotions, or reduce bad emotions, associated with a good habit we want to continue, or associate bad emotions and drawbacks to bad habits we want to stop. The book does the example of changing &ldquo;have to&rdquo; with &ldquo;get to&rdquo; to make a positive impact on habits we want to take. Some personal examples:</p>
<ul>
<li>I <em>get to</em> walk and listen to programming podcasts</li>
<li>I <em>get to</em> practice guitar</li>
<li>I <em>get to</em> write about what I read and learn</li>
<li>I <em>get to</em> journal about my day</li>
</ul>
<p>In the same way, I could say &ldquo;I walk in the morning to get healthier and get more energy for the day&rdquo;, &ldquo;I get to write about what I read so that I can learn and grow&rdquo; etc..</p>
<h2 id="third-law-make-it-easy">Third Law: Make it easy</h2>
<p>The third law is <em>make it easy</em>. It means to reduce friction, imagine the minimum action needed to start the habit, and automate optimising choices to make the habit really easy to follow (or really difficult if that&rsquo;s the case).</p>
<p>The first concept to understand is that of “<em>preparation</em> vs <em>action”</em>: preparing is useful, but can become just another form of procrastination. It feels like progress but it isn&rsquo;t. So, preparation needs to be kept at a minimum. The important thing is to act and repeat the habit, as getting the reps is the only way to make it stick (habits form based on <strong>frequency</strong>, not time!) → How many, not how long</p>
<p>Another thing to consider is the <em>effort</em>, the energy spent on the habit. Humans act based on the <em>law of least effort. W</em>e will naturally follow the option which leads to the least amount of effort required. This can be used to our advantage in our habit making process, as we can change the environment to reduce the friction associated with a habit:</p>
<ul>
<li>Putting workout clothes in the most visible or the most useful place</li>
<li>Preparing healthy food ahead of time to have it ready when needed</li>
<li>Placing the object required to perform the habit on the table/desk, readily accessible</li>
</ul>
<p>I do the last thing (placing a book near my bed) to give my brain the right clue, and to make it easy to do (just grab the book and read it!).</p>
<p>Another technique is the <strong>two-minutes rule</strong>. There are a handful of <em>decisive moments</em> which decide what impact we&rsquo;ll deliver in a given day. In these moments we take decisions on what to do next, and we can leverage these to improve in our habit process. The two-minute rule says</p>
<blockquote>
<p>&ldquo;When you start a new habit, it should take less than two minutes&rdquo;.</p>
</blockquote>
<p>If the habits takes more, reduce the effort to the minimum viable action (e.g. exercise → put on workout clothes, writing → write one paragraph/sentence). This allows to master the act of <strong>showing up</strong>. After doing the first action, we can decide to continue or not, and it&rsquo;s difficult that we&rsquo;ll stop there&hellip;</p>
<p>Finally, we have <strong>automation</strong>. I&rsquo;m a big fan of automation, because that&rsquo;s what I do for a living as a software engineer. Automation is an example of <em>commitment device</em>, which is a choice made in the present which controls our actions in the future. There are a lot of one time actions which will lock in new habits (detailed in the book, e.g. buying a good mattress, reducing mails and notifications, changing environment, reduce some automatic expenses and so on). Finally, technology can come to our aid in automating stuff (e.g. automatic telematic prescriptions, automatic wage reduction for retirement, meal-delivery services, website blockers).</p>
<p>In a nutshell, the 3rd law can be summarised as:</p>
<ul>
<li>Reduce friction by defining the least-effort action for each habit</li>
<li>Tune the environment to make future actions easier</li>
<li>Automate and make good one-time decisions to boost or block habits</li>
</ul>
<h2 id="fourth-law-make-it-satisfying">Fourth Law: Make it satisfying</h2>
<p>The fourth rule is <em>make it satisfying</em>.</p>
<p>Humans have developed a lot of stuff in the last millennia. Think about breeding, farming, machines and the latest technology. Most of this developments brought a us new concept, unknown to our primate brain: that of <em>delayed reward</em>. We experience delayed reward while waiting for crops to harvest to animals growing, and in the latest 500 years we added a lot of delayed rewards of any kind.</p>
<p>However, our brain still rely on <em>instant gratification</em> to work, and we need to leverage that hardwired path in our brain, or we won&rsquo;t stick to a habit. We evaluate rewards differently through time (<em><strong>now</strong></em> is better than later).</p>
<blockquote>
<p>What is immediately rewarded gets repeated, and what is immediately punished is avoided.</p>
</blockquote>
<p>The final step to stick to a habit is then to <em>feel successful</em> after doing it. In fact, the first three laws (obvious, attractive and easy) allow us to start the new habit, while this last law allows us to repeat and stick to it!</p>
<p>In a nutshell, these are the tactics to use to obey the 4th law:</p>
<ul>
<li>Reward or punish the habit <strong>immediately after</strong> the behaviour</li>
<li><strong>Track</strong> the habit (it&rsquo;s obvious, satisfying and attractive, and can be used together with habit stacking and automation!). Also, <strong>never miss twice</strong></li>
<li>Create a <strong>habit contract</strong> and find an <strong>accountability partner</strong> (make it <em><strong>unsatisfying</strong></em>)</li>
</ul>
<h2 id="advanced-tactics">Advanced tactics</h2>
<p>Also called &ldquo;three random chapters which did not fit in the rest of the book&rdquo;.</p>
<h3 id="exploration-vs-exploitation">Exploration vs Exploitation</h3>
<p>The first &ldquo;secret&rdquo; to maximise your chances of success is to choose the right field of competition, to find a game in which the odds are in your favour. Everyone keeps saying that genetics don&rsquo;t matter, and they are right. However, they define your <em>areas of opportunity</em>.</p>
<p>In short, you should create habits aligned with your ambition and your personality, as in this way it will be easier to reach a state of <em>flow</em>.</p>
<p>Another thing to consider is that even when you don&rsquo;t have mastery over a single thing, you can <em>specialise</em> in multiple contexts and overcome the &ldquo;accident&rdquo; of bad genetics.</p>
<p>Questions to ask yourself to find a niche in which you can gain much more with a habit:</p>
<ul>
<li>What feels like fun to me, but work to others? → not passion, but handling the <strong>pain</strong> of a task/habit</li>
<li>What makes me lose track of time? → <strong>Flow state</strong></li>
<li>Where do I get greater returns than the average person?</li>
<li>What comes naturally to me?</li>
</ul>
<p>TL;DR; Work hard on things that come easy (<em><strong>exploit</strong>)</em>, and <em><strong>explore</strong></em> new opportunities sometimes.</p>
<h3 id="flow">Flow</h3>
<p>Regarding flow, the author explains what is called the &ldquo;Goldilocks Rule&rdquo;:</p>
<blockquote>
<p>Humans experience peak motivation when they work on tasks that are right on the edge of their current abilities.</p>
</blockquote>
<p>Neither too difficult (otherwise you&rsquo;ll quit) nor too easy (or you end up in boredom and quit too).</p>
<p>The road to mastery is full of boring moments, but you can try to create manageable challenges to grow without complacency, without making life too difficult to quit the habit. Keeping the repetition even when bored is the difference between amateur and professional!</p>
<p>I actually experience this rule in my life: when I play guitar (amateur level) I usually get bored and stop playing for long periods of time. Instead, I keep pushing while programming for work because it is my profession, and this gives me an edge over others who just try to do it without enduring it.</p>
<h3 id="review-and-feedback">Review and Feedback</h3>
<p>The last &ldquo;advanced tactics&rdquo; chapter is about review and feedback about your habits. The entire book covered creating, starting and keeping a habit. However, once a habit is fully formed our performance might decrease (a bit or much more) as we reach a plateau and don&rsquo;t improve upon it, letting small errors appear. This is ok for trivial habits, but not so much for important stuff (think getting healthy, learning and in general mastering a field).</p>
<p>We need to <strong>reflect</strong> and <strong>review</strong> to enable long-term improvements of our habits. Some techniques include <em>decision journals</em> and  <em>annual review + integrity report.</em></p>
<p>A final bit of advice is to avoid making any single aspect of your identity an overwhelming portion of who you are, and not identifying in the particular habits and things you do. A better way is to redefine yourself in a way which keeps important aspects of your identity even if your role and actions change, e.g:</p>
<ul>
<li>I&rsquo;m an athlete → I&rsquo;m the type of person who&rsquo;s mentally tough and loves a physical challenge</li>
<li>I&rsquo;m the CEO → I&rsquo;m the type of person who builds and creates things</li>
</ul>
<blockquote>
<p>&ldquo;The hard and stiff will be broken, the soft and supple will prevail&rdquo; cit. Lao Tzu</p>
</blockquote>
<h2 id="conclusions">Conclusions</h2>
<p><strong><strong>Atomic Habits</strong></strong> does a great job in explaining how to create and keep small habits, and why it is so important to do this. The secret to obtain results is to never stop making improvements.</p>
<p>The book was a great inspiration in how to improve through the power of habits. I really liked the part about changing the environment and automating decisions to reduce my reliance on discipline alone. I also try to make use of the book’s advice to create good habits, while I’m definitely less successful when it comes to removing bad habits 😅.</p>
<p>Hope you enjoyed this summary/notes post 🎉, see you next time!</p>

      ]]></content:encoded></item><item><title>XPUGBg January meetup: “eXtreme Collaborative Codebase”</title><link>https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/</link><pubDate>Fri, 03 Feb 2023 07:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/</guid><description>Hi 👋 welcome to a new post!
Today I’m going to post a little summary of my experience at the XPUGBg meetup I attended at the end of January. This time, the talk was “eXtreme Collaborative Codebase” by Alessio Coser.
What is a collaborative codebase? Alessio started his talk with a question: what does it mean to collaborate in a codebase for you? What does it take to do it? What are the practices we can use to “work well”?</description><enclosure url="https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/cover_hu5daa95c58e72ab9dc8b964bad18cfaf8_12162_480x480_fit_q75_bgffffff_box_2.jpg" length="13739" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/cover_hu5daa95c58e72ab9dc8b964bad18cfaf8_12162_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="270" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/2023-jan-xp-codebase-meetup/cover_hu5daa95c58e72ab9dc8b964bad18cfaf8_12162_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="270"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 welcome to a new post!</p>
<p>Today I’m going to post a little summary of my experience at the <a href="https://www.meetup.com/xpugbg/events/290690004/"  target="_blank" >XPUGBg meetup</a> I attended at the end of January. This time, the talk was “eXtreme Collaborative Codebase” by Alessio Coser.</p>
<h2 id="what-is-a-collaborative-codebase">What is a collaborative codebase?</h2>
<p>Alessio started his talk with a question: what does it mean to collaborate in a codebase for you? What does it take to do it? What are the practices we can use to “work well”?</p>
<p>For him, it all comes down to optimising the work flow by accepting continuous change. In order to be more productive it’s important to reduce the work in progress, make small changes and reduce the feedback loop.</p>
<!-- raw HTML omitted -->
<p>Regarding feedback, agile practices tend to work at the highest levels, that of release, iteration, acceptance and so on (as in the above picture). But what about the lower levels of feedback, down to the codebase itself? How do you “accelerate” the feedback loop on all levels, from code to release?</p>
<p>In the talk, Alessio explains why doing trunk-based devlopment brings the best collaboration on the codebase, by improving the feedback loop, making WIP evident and allowing to ship faster and with  higher quality.</p>
<h2 id="what-is-trunk-based-development">What is trunk-based development?</h2>
<p>Trunk-based development is a practice in which developers collaborate on the codebase in a single branch (the main/master/trunk). Instead of opening a feature branch and then do a pull/merge request to master (with the corresponding code review I hope), the developer commits directly to the main branch.</p>
<p>Trunk-based development goes hand in hand with <a href="https://martinfowler.com/articles/continuousIntegration.html"  target="_blank" >continuous integration</a> and <a href="https://martinfowler.com/bliki/ContinuousDelivery.html"  target="_blank" >continuous delivery</a>. In fact, by committing to the main branch and keeping it always <strong>releasable</strong>, it’s possible to deliver value to the business continuously.</p>
<p>There are variations to trunk-based development. A notable one is <strong>scaled</strong> trunk-based, used when the team size increases. In scaled trunk-based development, the developers work with <strong>short-lived</strong> (less than 1 day) feature branches. The same practices (pair programming, TDD and XP in general) are still valid, together with the constraint to keep the main branch always releasable and deployable at any time.</p>
<h2 id="advantages-of-trunk-based-development">Advantages of trunk-based development</h2>
<p>In the talk, Alessio highlighted the <strong>impact</strong> that trunk-based development has on the codebase and on the team/business itself.</p>
<p>The first “advantage” is that it allows to have <strong>frequent integration</strong> (better yet, <strong>continuous</strong>) of all the changes in the codebase. In this way, conflicts that arise during development are immediately identified (and corrected), without waiting until the code is reviewed in a pull request.</p>
<p>By making all changes on the same branch (main), there is a unique source of truth. As every change is immediately integrated and tested, the codebase is always updated, and there’s no conflict over which version of the code is the correct one (the answer is: the one on the main branch!).</p>
<p>Given that the team is working on the same branch, everyone can see all the current work in progress. In addition, by not using long feature branches, and being forced to integrate with main frequently, it’s more difficult to keep multiple features in progress.</p>
<p>The possibility to make small, deliverable changes forces us to <strong>refactor</strong> into small steps, and not create too many changes and conflicts. Also, by doing this with a continuous review (e.g. by pairing), we have the freedom to refactor into small steps with confidence.</p>
<p>Finally, trunk-based increase the <strong>collaboration</strong> between team members. If what I’m working on at the moment conflicts with another developer, I’m more eager to work together to merge it, and this is done (again) immediately, and not at merge time.</p>
<h2 id="a-change-of-mentality">A change of mentality</h2>
<p>To work with trunk-based development properly, we need to embrace a (sometimes radical) change of mentality. The change reflects both in social and technical practices.</p>
<p>From the social side, trunk-based development requires:</p>
<ul>
<li><strong>Teamwork</strong>, as everyone is working on the same codebase at the same time</li>
<li>Constructive and frequent <strong>feedback</strong>, and being open to it</li>
<li><strong>Trust</strong>, in the team members and in the code itself. This can be helped with XP practices such as TDD and pairing</li>
</ul>
<p>From a technical standpoint, the most important practices are:</p>
<ul>
<li><strong>Small</strong>, incremental changes (in contrast to big, breaking changes and long parallel branches)</li>
<li>Attention to <strong>quality</strong> (because the main branch must always be releasable, and every commit we push could be directly deployed in production!)</li>
<li>Separation between <strong>build, deploy and release</strong></li>
</ul>
<p>A strong rule is that the code should always be deployable! This is the basis for frequent releases, which allows getting faster feedback from the business and the customers.</p>
<h4 id="how-to-deploy-while-the-work-is-in-progress">How to deploy while the work is in progress?</h4>
<p>While talking about technical practices and their impact, Alessio explained how keeping build, release and deploy separate is fundamental to a collaborative codebase. But how do we keep the code “deployable” even while we are currently implementing new features?</p>
<p>The first way is to do <strong>dark launching:</strong> release the new feature, but without exposing the new/changed API (or expose it only to a subset of users, e.g. developers and internal users).</p>
<p>A second way is to use <strong>branch by abstraction</strong>: put the current api under an abstraction layer, then start to implement the new functionality in another compatible class/module. While implementing the new feature, migrate the old feature clients to the new (compatible, remember!) one, and finally remove the old module. All of this should keep the system working even when the feature is not finished yet.</p>
<p>The last way to not release in-progress work is to put the new feature behind feature toggles/flags. The toggles can be static or dynamic, but they should be short-lived (if used while developing and not for mere configuration) and removed when the feature has been released and is stable. Feature flags are also a way to decouple deploy and release of the features. In addition, they make WIP evident (as any feature toggle of that type represents a work-in-progress feature).</p>
<h2 id="considerationsdiscussions">Considerations/Discussions</h2>
<p>The characteristic I like the most in meetups is the discussion with all the participants. Alessio encouraged the audience to ask questions and express their opinions, and here are some considerations of what came out of the discussion after the talk.</p>
<p>The first thing to take care of before and while doing trunk-based development is that of <strong>ownership</strong>: who is the owner of the code? Trunk-based development works best with <strong>cohesive</strong> teams working on a <strong>product</strong>, as the code is owned by the entire team (which makes the decisions). If the code is not owned by the developer, as in some consultancy projects or in open source, then it might be better to work with other branching models (such as feature-based, git flow or github flow).</p>
<p>Another consideration is that of software <strong>versioning</strong>. Trunk-based development expects a continuous integration of the code, and this means that there is only one version of the code (the current one). If the product needs multiple versions, and separate maintenance of the versions (e.g. because some customers don’t want to pay for the newer version, but still expect bugfixes on the version they own), then there should be release branches in addition to the main branch.</p>
<p>During the discussion, someone complained that with trunk based development changes are not evident. I agree in part with this, as using a separate branch would show the entire diff, while splitting the change in multiple commits would not show the entire feature at once. However, the point of trunk-based development is to make small changes, so the features should be separated in small stories, each with its own commit (or short lived branch). This improves the reliability of the team, allowing it to ship faster and estimate better.</p>
<p>A final consideration is about <strong>conflicts</strong>. While in feature branching conflicts are identified only when merging, in trunk-based all the conflicts arise during development. To keep the build releasable and stable the conflict needs to be fixed immediately, and this might seem to slow down the development of new features.</p>
<p>To avoid integration headaches, it’s important to communicate with the team and avoid conflicts in the first place. Also, it&rsquo;s better to catch conflicts and fix them immediately than to wait for a big bang merge. In my opinion, if there is a lot of churn/conflicts in some modules, it means that the architecture should be improved (by splitting the functionality into smaller modules with clear responsibilities).</p>
<h2 id="conclusions">Conclusions</h2>
<p>The conclusion of the talk was “<em>embrace change</em>”, which is the fundamental principle of eXtreme Programming. I agree with this quote, as change is inevitable in software development (and in life in general).</p>
<p>I never had a collaborative codebase in the way described by Alessio (with trunk based, tdd, pairing and all the other practices), but I think that every team should strive to follow the same principles and practices.</p>
<p>That’s it for today! I hope you liked this short summary. If you want to go deeper into the topic, I left down here some resources (will be updated while I discover more of them). Also, reach out <a href="https://www.linkedin.com/in/alessiocoser"  target="_blank" >Alessio</a> and the <a href="https://meetu.ps/c/4s0GZ/zWszn/a"  target="_blank" >XPUGBG</a>!</p>
<h2 id="other-resources">Other Resources</h2>
<ul>
<li><a href="https://trunkbaseddevelopment.com/"  target="_blank" >Trunk-based development</a></li>
<li><a href="https://medium.com/@mattia.battiston/why-i-love-trunk-based-development-641fcf0b94a0"  target="_blank" >Why I love trunk-based development</a></li>
<li><a href="https://martinfowler.com/articles/feature-toggles.html"  target="_blank" >Feature Toggles</a></li>
</ul>

      ]]></content:encoded></item><item><title>A Case for Outside-In Design: Sandro Mancuso @ Tech Talks by eDreams ODIGEO</title><link>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</link><pubDate>Wed, 25 Jan 2023 22:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/outside-in-design-edreams-meetup/</guid><description>Hi 👋 and welcome to a new post!
In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (here) on January 24th.
For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk “A Case for Outside-In Design”, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</description><enclosure url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" length="22981" type="image/jpeg"/><media:content url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343" medium="image" type="image/jpeg"><media:thumbnail url="https://marcobacis.com/blog/outside-in-design-edreams-meetup/cover_huf56dfe8056d4c0af53a57ff1716bd72f_43194_480x480_fit_q75_bgffffff_box_2.jpg" width="480" height="343"/></media:content><content:encoded><![CDATA[
        <p>Hi 👋 and welcome to a new post!</p>
<p>In my 2022 review, I said that one of my goals for 2023 was to participate more in communities (meetups, conferences and so on). Well, as a first step to achieving that goal, I attended a meetup hosted by eDreams ODIGEO (<a href="https://www.eventbrite.com/e/tech-talks-by-edreams-odigeo-milan-hub-inauguration-special-edition-tickets-493515075877"  target="_blank" >here</a>) on January 24th.</p>
<p>For the inauguration of their Milan Hub, eDreams hosted Sandro Mancuso for his talk “A Case for Outside-In Design”, in which he proposes a set of practices and techniques to make business and technology meet when designing and extending a system.</p>
<p>You may already have heard of “Outside-In Design” on this blog <a href="https://marcobacis.com/blog/2022-dec-mars-rover-kata-meetup/"  target="_blank" >before</a>. Sandro’s talk follows the same philosophy and extends it not only to code but to the entire business and product decisions made before coding even begin.</p>
<p><em>Disclaimer: I will share some notes/brief recap of the talk given by Sandro. It’s by no means a complete transcription and may contain my own interpretation of what was said. Go watch his past talks (e.g. <a href="https://www.youtube.com/watch?v=VSkDu5YgAh4"  target="_blank" >here</a>) for the real deal!</em></p>
<h3 id="developer-biases-and-the-insideoutside-perspective">Developer Biases and The Inside/Outside perspective</h3>
<p>The talk started with a list of biases (most of the time we call them “practices”) that affect software developers. They include:</p>
<ul>
<li>Structural biases (procedural, oop, functional, services, event-based)</li>
<li>Design biases (all architectural design patterns such as SOA, Actor model, Hexagonal arch, Microservices and so on..)</li>
<li>Design Direction biases (starting from the persistence, domain, UI, and lastly <strong>incremental outside-in</strong>, the topic of this talk)</li>
</ul>
<p>Most of the time we tend to work led by our biases: a backend developer will start working on the domain model and then implement the details (infrastructure, application); frontend will start working from the design of the UI down to the actual implementation. However, in this way, we end up with a discrepancy between the systems, and this leads to ugly adapter layers to adapt the API exposed by the backend and the data the frontend needs to work.</p>
<p>This behaviour extends also at a higher level, that of business and product design. Technology and product work in parallel tracks, and then need to somewhat meet at the intersection: the top of the backlog. At that moment, it’s more difficult to align the product decisions needed to create value for the company and the system design.</p>
<p>Software design should <strong>serve</strong> the business, and its value should be measured by how much it impacts the business value. Thus, we need to align the two perspectives, inside (technology) and outside (business).</p>
<p>To solve this issue, Sandro proposes a different approach, in which we start from the product and then define lower and lower level abstractions of the system, contrary to the standard inside-out design approach.</p>
<h3 id="outside-in-design">Outside-In Design</h3>
<p>The first thing to do when designing a new system or a set of features for the business is to create a birds-eye view (<strong>product box</strong>) in which we put the main features that bring value, and the main functional areas involved.</p>
<p>Then, we proceed to do <strong>Impact Mapping</strong>, in which we identify the high-level bounded contexts and architecture. Starting from the main goals of the system, we identify its actors and the different impacts they have, on the deliverables (features). Sandro showed an example using mind maps, refining the different levels (actor → impact → feature) on every iteration.</p>
<p>After impact mapping, with <strong>Functional Mapping,</strong> we identify the business flows, the external (and internal) users and systems and connect them, in a way similar to sequence diagrams but using bounded contexts instead of classes. It allows to decide which systems are external and which are internal, and which should become public APIs or internal services. Sandro gave some examples, one in which only one service (the catalogue) was public-facing, and another (checkout) in which all services were public and called by the frontend.</p>
<p><strong>User Interaction via Mockups</strong> is the step in which we see some UI (finally!!). Sandro does the mockups with Balsamiq, as it allows the creation of dynamic wireframes. It’s better to do them with UX experts, in order to have a basic wireframe both for the UX/UI team and the development team (by designing the APIs and the data needed by the frontend).</p>
<p>Finally, we get into the actual software design and implementation with the method we prefer (Inside-Out or Outside-In TDD for example 😏).</p>
<p>All these steps might seem long, but Sandro explained that they are actually short (e.g. product box can be done in an afternoon!) and need to be performed at different intervals (6/12 months for the highest level, then 3/4 months, monthly, 1/2 weeks and finally daily for the actual coding practices).</p>
<h3 id="thats-it">That’s it!</h3>
<p>As you can see, I just wrote a quick summary of Sandro’s talk. The meetup also included a panel with Sandro and three people from eDreams ODIGEO (the CTO Carsten Bernhard, Milan’s Hub Director Luca Pivotto and Agile Director Brett Ansley), in which they continued the argument brought by the talk and expanded with other content (e.g. how to tackle and measure technical debt, what is value and much more). I didn’t include it in this post as I didn’t take notes 😅.</p>
<p>Overall, the meetup was really interesting. The outside-in perspective is (as in the last meetup I attended) a great way to meet the tech side of the business (working on the nitty-gritty details and implementation) and the product side (concerned with value, customers and overall functionality of the system).</p>
<p>I think that this could be really useful in both big companies (to iterate on new features) and in startups (to design the first system in an extensible and “growable” way). During the talk, Sandro mentioned a book that is on my “to read” bookshelf, “<a href="https://teamtopologies.com/book"  target="_blank" >Team Topologies</a>”. Employing an outside-in perspective allows in the end to define these topologies in advance, allowing the system to grow organically and without breaking everything on each iteration.</p>
<p>That’s all for today’s post! Thank you for reading (if anyone is reading this 🤔) and see you next time!</p>
<h3 id="additional-resources">Additional Resources</h3>
<p>Some other places to find Sandro’s talk:</p>
<ul>
<li><a href="https://www.codurance.com/publications/2017/10/23/outside-in-design"  target="_blank" >Blog Post</a></li>
<li>2019 <a href="https://www.youtube.com/watch?v=bvie9vl7X6A"  target="_blank" >Talk</a></li>
<li>2018 <a href="https://www.youtube.com/watch?v=rbSDGr-_UwY"  target="_blank" >Talk</a> and <a href="https://www.slideshare.net/sandromancuso/a-case-for-outsidein-design"  target="_blank" >Slides</a> (don’t know if they are the same exact version)</li>
</ul>

      ]]></content:encoded></item><item><title>My Experience at the Italian Agile Days 2022: Talks and Reflections</title><link>https://marcobacis.com/blog/2022-italian-agile-days/</link><pubDate>Tue, 17 Jan 2023 18:00:00 +0100</pubDate><guid>https://marcobacis.com/blog/2022-italian-agile-days/</guid><description>Hi 👋
Today’s post is about my experience at the Italian Agile Days 2022, which I attended in October 2022. I know, it’s way too late to write this, but I still think that remembering the talks I watched will be useful for others 😃.
The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.</description><content:encoded><![CDATA[
        <p>Hi 👋</p>
<p>Today’s post is about my experience at the <a href="https://www.agileday.it/"  target="_blank" >Italian Agile Days 2022</a>, which I attended in October 2022. I know, it’s way too late to write this, but I still think that remembering the talks I watched will be useful for others 😃.</p>
<p>The Italian Agile Days is a 2-day free conference held in a different city every year, in which people interested in agile practices (programmers and business people alike) gather to talk about agile and development practices.</p>
<p>This year, the conference was held on the Brescia University campus. It was my first in-person conference in 3 years, and seeing live talks and talking with people with the same interests was refreshing and inspiring!</p>
<p>I mostly watched technical talks about programming, but some of the ones you’ll find below drift from pure programming into the realm of philosophy (and psychology), and they were the most interesting.</p>
<p>Enjoy!</p>
<h2 id="talks">Talks</h2>
<p><em>Disclaimer: most talks were in Italian. The videos are available <a href="https://vimeo.com/showcase/9957525"  target="_blank" >online</a>, here I’ll just post a brief summary and my opinions on the talks.</em></p>
<h3 id="keynote-myth-busting-in-agile-scaling-en---nigel-thurlow">Keynote: Myth busting in agile Scaling (en) - Nigel Thurlow</h3>
<p><a href="https://vimeo.com/767786361"  target="_blank" >Video</a></p>
<p>Nigel has been the first ever Chief of Agile at Toyota, and while there he created “The Flow System”, a flow-based approach to delivering value built on the Toyota system.</p>
<p>In his keynote, he debunks myths and tries to solve the “format war” between agile practices. The talk is packed full of considerations and stories about agile…so full that I cannot summarise it here without writing everything Nigel says. Please go check it out!</p>
<h3 id="event-sourcing--cqrs-a-light-introduction-en---paolo-banfi">Event Sourcing + CQRS: a light introduction (en) - Paolo Banfi</h3>
<p><a href="https://vimeo.com/768885882"  target="_blank" >Video</a></p>
<p>In this talk, the speaker introduces two important concepts that allow to easily change and add functionalities to our systems: event sourcing and CQRS.</p>
<p>To explain them, he presents an example based on a shopping cart, showing that by just saving the current state of the system (as we usually do with databases) we lose information that could be useful to the business. By using event sourcing and CQRS strategies, we employ a more generic model that allows using these pieces of information without making the system much more complex than before.</p>
<p>Paolo does a great introduction to both arguments. Even if I never used event sourcing and CQRS before, I now feel like I should use them in all my future projects!</p>
<h3 id="diamo-una-chance-a-una-codebase-legacy-it---nicola-mincuzzi">Diamo una chance a una codebase legacy? (it) - Nicola Mincuzzi</h3>
<p>“Let’s give a legacy codebase a chance”</p>
<p><a href="https://vimeo.com/768879474"  target="_blank" >Video</a></p>
<p>Working with legacy codebases is a dread. Legacy systems are unstable, and every change to their code or structure leads to bugs and unknown issues, given their lack of tests.</p>
<p>In his talk, Nicola shows a project on which he worked, and describes how he “attacked” the legacy monster by using harnesses and a lot of testing. He basically followed the advice in Michael Feather’s “Working Effectively With Legacy Code&quot; which was effective for real!</p>
<p>Given that this was his first talk, it was great. I’m also working on a nasty legacy project, and seeing other people&rsquo;s (successful) experiences is inspiring and comforting at the same time.</p>
<h3 id="ive-done-tdd-wrong-all-the-time-it---luca-giuberti">I’ve done TDD wrong all the time (it) - Luca Giuberti</h3>
<p><a href="https://vimeo.com/768875860"  target="_blank" >Video</a></p>
<p>In this talk, Luca expresses a common concern that we all think about while writing tests - Am I testing too much the implementation? Do the tests reflect the <strong>what</strong> (the business need), or do they represent the <strong>how</strong> (implementation)?</p>
<p>Luca shows a more sustainable way to test, in a <strong>coarse-grained</strong> fashion. I find this more in line with how I usually test, by testing the behaviour of multiple/larger modules and not of the single classes and methods (with a lot of mocking).</p>
<p>The definition of “unit” is quite confusing. Some of us end up testing single classes or methods in isolation, by mocking every external dependency. Luca’s talk advocates for a coarser grain, like testing multiple (cohesive) classes for their external behaviour. It might seem like integration testing, but it’s not, and I think is a more sound approach.</p>
<h3 id="larte-dello-sviluppatore-it---marco-fracassi">L’arte dello sviluppatore (it) - Marco Fracassi</h3>
<p>“The software developer art”</p>
<p><a href="https://vimeo.com/768873513"  target="_blank" >Video</a></p>
<p>In this philosophical (and humorous) talk, Marco talks about the role of creativity (and how to get creative) in software development.</p>
<p>Software developers are a creative species, despite the stereotypes that others associate with the role (and we get a huge list in the talk). Practices such as pair programming, TDD and DDD are indeed quite creative and, at the time of their definition, were revolutionary.</p>
<p>Software development is a social activity in addition to technical practices, and in this regard, creativity can help us solve problems better. Marco presents a lot of ways to increase creativity personally and in the workplace (by increasing psychological safety) and what tends to stop it (ignorance, hyper-specialization, fear, vanity etc..).</p>
<p>In the end, the talk was very inspiring and showed that there’s a lot of “art” in our practice as software developers.</p>
<h3 id="dal-carbone-al-software-i-sistemi-socio-tecnici-it---ferdinando-santacroce">Dal carbone al software: i sistemi socio-tecnici (it) - Ferdinando Santacroce</h3>
<p>“From coal to software: socio-technical systems”</p>
<p><a href="https://vimeo.com/768881541"  target="_blank" >Video</a></p>
<p>Agile is not just for programmers, and Ferdinando shows us why in his talk. He tells a story set in post-war England, when a technological innovation (the “longwall”) was introduced but didn’t improve productivity, all because of social issues.</p>
<p>The researchers found out that this innovation disrupted (in a bad way) the current social organisation of the mines. From autonomous, cross-functional and trusted teams, the longwall brought hyper-specialisation, control and loss of autonomy and ownership, leading to lower productivity.</p>
<p>This story serves as a reminder that all techniques and practices we see today in agile (such as lean, kanban, XP etc..) didn’t start with programming, but are way older. In addition, we cannot only think about the technical aspects of the organisation, because the social ones are way more important!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I really enjoyed attending this conference!</p>
<p>Each talk explored an argument which I didn’t know and wanted to know more about. I also got to meet new people in a community near me (Brescia is right next to Bergamo and Milan) and I also got gadgets 🤩. In addition, I bought two books from Avanscoperta: “Cronache di Domain-Driven Design” (DDD Chronicles) and “Decision-Making for Software Development Teams”. I hope to read them soon!</p>
<p>That’s all for today. I hope you enjoyed this short summary of my experience at IAD2022, and I hope to attend and write about next year’s conference (and some workshops? 😇).</p>

      ]]></content:encoded></item></channel></rss>