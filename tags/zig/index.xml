<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Zig on Marco Bacis</title><link>https://marcobacis.dev/tags/zig/</link><description>Recent content in Zig on Marco Bacis</description><language>en-uk</language><copyright>¬© Copyright Marco Bacis</copyright><lastBuildDate>Mon, 22 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://marcobacis.dev/tags/zig/index.xml" rel="self" type="application/rss+xml"/><item><title>First time using Zig @ Zigday</title><link>https://marcobacis.dev/blog/2025-september-zigday/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://marcobacis.dev/blog/2025-september-zigday/</guid><description>&lt;p&gt;Hi! üëã Welcome to a new post.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s time to get back to &amp;ldquo;journal&amp;rdquo; style posts, talking about my experience at cool programming events. Last time was last year for &lt;a href="https://marcobacis.dev/blog/2024-update-conference/" &gt;Update Conference&lt;/a&gt;, and I really miss writing this kind of posts! To keep my writing muscle active, I will start writing more of these üòÅ. I&amp;rsquo;m doing it for selfish reasons, but if I can reach more people and have them discover new events, then I&amp;rsquo;ve reached my goal.&lt;/p&gt;</description><content:encoded><![CDATA[
          <p>Hi! üëã Welcome to a new post.</p>
<p>It&rsquo;s time to get back to &ldquo;journal&rdquo; style posts, talking about my experience at cool programming events. Last time was last year for <a href="/blog/2024-update-conference/" >Update Conference</a>, and I really miss writing this kind of posts! To keep my writing muscle active, I will start writing more of these üòÅ. I&rsquo;m doing it for selfish reasons, but if I can reach more people and have them discover new events, then I&rsquo;ve reached my goal.</p>
<p>Today I want to talk about my first time at <a href="https://zig.day/"  target="_blank" >ZigDay</a>, an event similar to <a href="https://www.meetup.com/it-IT/open-source-saturday-milano/"  target="_blank" >Open Source Saturday</a>, but all about Zig!!</p>
<p>The event was organized by <a href="https://www.codingbunker.it/"  target="_blank" >Coding Bunker</a> (in particular by <a href="https://inge.4pr.es/"  target="_blank" >Francesco</a> and <a href="https://github.com/omissis"  target="_blank" >Claudio</a>) and hosted by <a href="https://www.mollie.com/"  target="_blank" >Mollie</a> in their new Milan office.</p>
<h3 id="zig">Zig?</h3>
<p>What is Zig?</p>
<blockquote>
<p>Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.</p>
</blockquote>
<p>Zig is basically C&hellip; but simpler, more powerful, and I would say prettier too. It sits alongside other low-level languages such as Rust and Go, with a simpler philosophy for control flow, memory management, and project structure.</p>
<p>See the <a href="https://ziglang.org/"  target="_blank" >official website</a> to know more (I wanted to include a sample zig program showcasing all the main features, but I don&rsquo;t know it enough üòÖ not even to force a LLM to create it for me).</p>
<h3 id="event-journal">Event Journal</h3>
<p>This is how the day unfolded:</p>
<p>I arrived at the Mollie office at 9:30 AM. We had a short breakfast, then <a href="https://www.linkedin.com/in/francescogualazzi/"  target="_blank" >Francesco</a> introduced the event. Each of us introduced ourselves and shared what we wanted to do that day.</p>
<p>Being the first time I used Zig, I proposed to see what others were doing and learn using <a href="https://codeberg.org/ziglings/exercises/#ziglings"  target="_blank" >ziglings</a> (like rustlings, but for Zig).</p>
<p>Other participants had different plans: some contributed to their own projects in Zig (e.g., a JSON schema parser and generator), others experimented with Vulkan/GPUs, played with RISC-V boards, and someone even started <a href="https://operating-system-in-1000-lines.vercel.app/en/"  target="_blank" >writing an OS in 1000 lines</a>&hellip;. the usual stuff developers have fun with on a Saturday morning, after all.</p>
<p>During the first hour and a half, <a href="https://kristoff.it/"  target="_blank" >Loris</a> showed us how to install Zig and how a Zig project is structured.</p>
<p>I learned about modules, packages, and how the build system works. The Zig build system is quite powerful: you can define custom commands, modules, and targets, all in Zig itself! It&rsquo;s useful to define custom compilation steps or jobs that have to run during the build. The great feature is that it&rsquo;s not limited to Zig only: you can incorporate C/C++ workflows and linking to work with existing libraries.</p>
<p>Another feature Loris showed us was how Zig manages memory.</p>
<p>Zig is a low-level language that makes memory management explicit, so it has allocations, deallocation, pointers, heap and stack, and many other concepts. The difference between Zig and existing low-level languages such as C and C++ is that it makes memory allocation explicit, but without compromising the robustness of the software itself!</p>
<p>Whenever a method allocates memory, it needs to be given an <code>allocator</code>, and in most places, the code must handle allocation errors explicitly: this allows for robust programs.</p>
<p>Using custom allocators makes the language more versatile (e.g., an allocator for embedded systems behaves differently from one for desktop). This also helps in writing performant tests: the testing allocator can detect memory leaks automatically and allows tracking, showing, and debugging memory allocation.</p>
<p>After the Zig crash course, I started playing with <a href="https://codeberg.org/ziglings/exercises/#ziglings"  target="_blank" >ziglings</a>. Ziglings are a series of small exercises that introduce Zig features step-by-step. Each exercise is a program with small missing pieces or errors that we must solve to progress. They are a great way to learn the main features of the language, in small steps, and have fun in the process!</p>
<p>I did the first 39 exercises, and these are some of the things I learned:</p>
<ul>
<li>Arbitrary bit-width integers</li>
<li>Error handling (<code>try</code>, <code>catch</code>, union types, and the <code>?</code> operator)</li>
<li>The <code>defer</code> and <code>errdefer</code> keywords (useful to handle memory deallocation, logging, and error handling)</li>
<li>The <code>unreachable</code> keyword (useful in switch and if statements)</li>
<li>Standard control structures, with Zig&rsquo;s own quirks (e.g., continue expressions)</li>
<li>Optionals and nice ways to assign &ldquo;no value&rdquo; (in particular, I like how <code>undefined</code> works, which is different from other languages I&rsquo;m used to)</li>
</ul>
<p>I still missed a lot of features that I&rsquo;m going to explore next (e.g., <code>slices</code>, <code>comptime</code>, <code>async/await</code>, and the entire standard library), but I think that for my first day of Zig, there was enough!</p>
<p>At the end of the day, we shared our impressions. Some people gave demos, others shared their opinions or talked about their current projects. At the end, Loris showed us a project he&rsquo;s currently working on: <a href="https://github.com/kristoff-it/superhtml"  target="_blank" >SuperHTML</a>, an LSP for HTML! I discovered how much I DON&rsquo;T know about HTML, and that the web stack is a dark, incoherent platform&hellip;</p>
<p><em>Update: you can find the final round of presentations on the Zig Day Milano channel (<a href="https://youtu.be/K6ULgtdj1Yg"  target="_blank" >youtube</a> in italian). I didn&rsquo;t present because I just did exercises, nothing much to show üòÖ</em></p>
<p>So&hellip; that was my Saturday. I hope to have more Saturdays like this üòÄ</p>
<p>See you next time!</p>

        ]]></content:encoded></item></channel></rss>